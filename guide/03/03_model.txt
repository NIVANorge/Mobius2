
model("Hydrology model") {

	air    : compartment("Atmosphere")
	soil   : compartment("Soil")
	gw     : compartment("Groundwater")

	temp   : property("Temperature")
	precip : property("Precipitation")

	water : quantity("Water")
	
	module("Soil hydrology", version(0, 0, 1)) {
	
		par_group("Soil hydrology") {

			# The field capacity is how much water the soil can be filled with before there is runoff.
			# It can be thought of as the retention volume of the soil.
			fc : par_real("Field capacity", [m m], 50)
			
			tcs : par_real("Soil water time constant", [day], 2)
			tcg : par_real("Groundwater time constant", [day], 20)
			bfi : par_real("Baseflow index", [], 0.7)
			ddfpet : par_real("Degree-day factor for potential evapotranspiration", [m m, deg_c-1, day-1], 0.12)
		}

		# Initializing the soil water volume at field capacity is just a convenience. You could create
		# a separate parameter for the initial soil water volume if you wanted to.
		var(soil.water, [m m], "Soil water volume") @initial { fc }

		# For the groundwater we assume that there is no retention volume (for now).
		# Here we could also leave out the @initial note since the default initial value
		# for a quantity is 0.
		var(gw.water, [m m], "Groundwater volume") @initial { 0[m m] }
		
		# Add a couple of meteorological forcings that can drive the system
		var(air.temp,   [deg_c], "Air temperature")
		var(air.precip, [m m, day-1], "Precipitation")

		# Let the precipitation be a pure source of water to the system
		# This is specified by letting the source of the flux be 'out'.
		# We ignore the possibily of freezing or snow for now.
		flux(out, soil.water, [m m, day-1], "Precipitation to soil") {
			air.precip
		}

		# We create a property to compute a value that is re-used in two separate fluxes.
		flow : property("Flow")
		var(soil.water.flow, [m m, day-1], "Soil water flow") {
			
			# We let the amount of runoff be proportional to the amount of
			# water above field capacity. This makes it a so-called
			# "Linear reservoir".
			# In real simulations it may be a good idea to use a cutoff
			# function that is not as sharp as this, but we will not worry
			# about that for now.
			max(0, water - fc)/tcs
		}

		# Take water from the soil and move it to the groundwater
		flux(soil.water, gw.water, [m m, day-1], "Groundwater recharge") {

			# We call the relative fraction of soil water runoff that goes to the groundwater
			# the "Baseflow index" (bfi).
			bfi * flow
		}

		# We don't model the river for now, so the target is 'out'. We can
		# redirect it later.
		flux(soil.water, out, [m m, day-1], "Runoff to river") {
			(1 - bfi)*flow
		}

		# Finally, there is so-called "Evapotranspiration", which is a sum of plant water
		# uptake and evaporation. The model we use here where it scales linearly with
		# air temperature is extremely simple, and mostly for illustration.
		# Evapotranspiration is a whole separate science of its own.
		flux(soil.water, out, [m m, day-1], "Evapotranspiration") {
			# Declare a "Potential evapotranspiration" local variable.
			# This could also be factored out as its own equation.
			pet := max(0, air.temp*ddfpet),
			
			# Limit the evapotranspiration if water is far below field capacity
			0     if water < 0.7*fc,
			pet   otherwise
		}

		# Make the groundwater into another linear reservoir. The target is really the river,
		# but we don't model it yet.
		flux(gw.water, out, [m m, day-1], "Groundwater runoff") {
			water/tcg
		}
	}
	
	# The name "Hydrology solver" is arbitrary, you can call it what you want. This is just for reference e.g. in error messages.
	# inca_dascru identifies a specific algorithm. This one is good for most purposes.
	# [2, hr] is the initial solver step length.
	# 1e-2 is how much the solver algorithm is allowed to decrease the step size to preserve accuracy of the solution.
	sol : solver("Hydrology solver", inca_dascru, [2, hr], 1e-2)

	# Put the two variables in the ODE system of this solver. You can call solve as many times you want
	# on the same solver.
	solve(sol, soil.water, gw.water)

}