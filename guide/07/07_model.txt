
model("Lake model") {

	layer_idx : index_set("Layer index")
	
	air   : compartment("Atmosphere")
	lake  : compartment("Lake")
	layer : compartment("Lake layer", layer_idx)
	
	water : quantity("Water")
	heat  : quantity("Heat")
	ice   : quantity("Ice")
	
	temp  : property("Temperature")
	rho   : property("Density")
	area  : property("Area")
	evap : property("Evaporation")
	precip   : property("Precipitation")
	wind     : property("Wind speed")
	
	# Many of the following variables are required by the AirSea heat exchange module that we reuse from other Mobius2 models. You don't need to understand what most of them are for.
	g_rad    : property("Global radiation")
	pressure : property("Pressure")
	a_hum    : property("Actual specific humidity")
	lwd      : property("Downwelling longwave radiation")
	sw       : property("Shortwave radiation")
	cos_z    : property("Cosine of the solar zenith angle") 
	s_vap    : property("Saturation vapour pressure")
	a_vap    : property("Actual vapour pressure")
	
	attn     : property("Attenuation")
	indicator : property("Ice indicator")
	
	vert    : connection("Lake vertical") @grid1d(layer, layer_idx)
	sw_vert : connection("Shortwave vertical") @grid1d(layer, layer_idx)
	
	freeze : constant("Ice formation temperature", [deg_c], 0.0)
	
	load("lake_module.txt",
		module("Simple layered lake", air, lake, layer, water, heat, ice, temp, rho, area, sw, attn, indicator, cos_z, vert, sw_vert))
	
	load("modules/atmospheric.txt",
		module("Atmospheric", air, temp, wind, g_rad, pressure, a_hum, rho, lwd, cos_z, a_vap, s_vap))
	
	load("modules/airsea.txt",
		module("AirSea", air, lake, ice, heat, temp, precip, wind, g_rad, pressure, rho, a_hum, lwd, sw, attn, indicator,
							evap, cos_z, loc(freeze), loc(lake.area), loc(layer.water[vert.top]), loc(layer.water.heat[sw_vert.top])))
	
	
	sol : solver("Lake solver", inca_dascru, [2, hr], 1e-2)
	
	solve(sol, layer.water, lake.ice)
	
	module("Additional variables", version(0, 0, 0)) {
		
		# Declare input series in case they are not declared anywhere else.
		var(air.precip, [m m, day-1])
		var(air.temp, [deg_c], "Air temperature")
	}

}