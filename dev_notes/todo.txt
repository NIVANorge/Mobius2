

	Finish connection system 
		the index set the connection is over should be taken from the data set.
		compartments of multiple index sets
		multiple connections per variable
		Other types of connections
			one_dimensional
		'to' value fetching inside flux body.
		ability to view all_to_all fluxes (or other matrix results) in MobiView.
		all_to_all connections for quantities (not just compartments)
	
	Make sure only the right kind of Model_Instructions can be matrix indexed (maybe allow for properties, but not for most fluxes and quantities, except for all_to_all fluxes (and only with the right index set)).
		Also only one matrix indexing for a given state variable (at least for now)
		The challenge is providing good error messages.
	
	Do proper memory management for Math_Expr_FT. The current system is becoming unbearable, and quickly leads to leaks or double deletes.
	
	Clean up the State_Variable struct to make it less easy to have usage errors (maybe make accessors).
		No, really! Do it!

	
	*** Intermediate-pri ***

		Processes not specified per compartment / quantity. Can be attached to those.
			- something like compartment_type etc.
			- have to figure out what to do with duplicates of par_group etc. - ties into name system (next item).
		
		Better scoping system for declaration names (not just for symbols).
			also for variable names.
			
		String_View auto-converting to bool also means that it auto-converts to int. This can cause bugs when we refactor some things.
		
		Allow redeclaration of constants without conflict (?)

		Move to std::string instead of String_View in path_utils.. (if possible, had a problem when trying it before).
		
		Allow declaration of no_carry inside modules.
		
		Organize state var tree by quantity in MobiView
			Maybe order direct properties and fluxes above dissolved substances (or have it as an option)
		
		Check for conflicting declarations of variables (unit, name).
		
		New system of automatic solvers unnecessarily puts soil TDP on a solver in SimplyP. Should be a way to specify it not to. Or maybe even for it to detect that it is not necessary.
			Actually, this should be detected. It should be omitted because the value is an override, and none of the dependencies are on solvers. Instead of having auto-solver with an override, let the solver propagate as for properties.
	
	
	*** Low-pri ****
		Override declarations.   --- not needed for connections since we found another way. Also, not certain what is the best way to do it.
	
		Check for constant computability of properties (or constant series or constant state vars) and have them stored in a separate structure that is computed at model startup.
			Not high priority, just a nice feature.
			
		If a dissolved substance can flow somewhere, you don't have to declare that it is there (?) - but could be tricky wrt units.
		
		Let declarations in inlined modules be visible in the parent model scope (?) or other way around is maybe more reasonable.
		
		
	*****************   DONE:   ***********************
	
	Interchangable components for connections. Simple system.
		lake vs. river
	
	connection fluxes of dissolvedes seem to add to the base substance rather than the dissolved substance.
	
	Make and test a SimplyTox    (partial at least)
	
	Index set distribution of quantities
		+ par groups on quantities
		
	Probably only allow connection fluxes between state variables that are on solvers. (Currently set to be the default)
		
	Relative paths are always relative to the model source file, but this breaks when you do extend_model of a model from another folder.
	Same when including a library from another library...
	
	Make variables of type Source_Location be named source_loc consistently to not confuse with other things.
	
	Allow fluxes to have a default no_carry()
	
	Make it automatic that certain state variables are on solvers (dissolveds)
	
	Allow multiple has declarations for the same variable (or fix existing system).
	
	Matrix formatting of parameters in the data file.
	
	Other types of connections
		all_to_all