
model("EasyLake-SimplyCNP") {
	extend("easylake_simplyq_model.txt")
	extend("simplyc_model.txt") @exclude(heat : quantity)  # To not clash with easylake decls of this
	extend("simplyn_model.txt") @exclude(heat : quantity)
	extend("simplyp_model.txt")
	
	
	phyt : quantity("Phytoplankton")
	o2   : quantity("O₂")
	
	on   : quantity("Organic nitrogen")
	toc  : property("Total organic carbon")
	tn   : property("Total nitrogen")
	
	bot  : compartment("Lake bottom sediments")
	distribute(bot, lake_index)
	solve(simply_solver, bot.phos)
	
	#TODO: Maybe also organic N, P later.
	# sed_area should be different for epi and hyp.
	load("modules/easychem.txt", 
		module("EasyChem", air, epi, hyp, water, oc, phyt, o2, din, phos, on, ice, sed, temp, sw, wind, indicator, tp, toc, sed_oc, area),
		module("EasyChem-Particulate", air, epi, hyp, bot, water, sed, phos, wind, area)
	)
	
	load("modules/simplyn.txt",    module("Simply organic C-N", river, water, din, on, oc, tn))
	
	load("modules/simplyc.txt",    module("Simple river TOC", river, water, oc, sed, toc, sed_oc))
	
	par_group("Suspended carbon") {
		sed_oc : par_real("Suspended sediments OC fraction", [], 0.02, 0, 1)
	}
	
	# TODO: Probably move to simplyc.txt
	
	
	module("Simple River O₂", version(0, 1, 0)) {
		"The purpose of this module is only to provide oxygen inputs to EasyChem."
		
		#TODO: Not sure if we should do anything else for this module. Could also have mass balance and instead set concs in flow from land.
		
		load("stdlib/seawater.txt", library("Sea oxygen"))
		load("stdlib/physiochemistry.txt", library("Chemistry"))
		
		par_group("River oxygen") {
			f_o2sat    : par_real("Catchment O₂ saturation fraction", [], 0.9, 0, 1)
			COS_alloch : par_real("Carbon Oxidation State alloch DOC", [], -0.5, -1, 0)
		}

		var(river.water.o2, [k g], [m g, l-1], "River oxygen") 
		#@override_conc {
		#	o2_saturation(temp, 0) * o2_mol_mass ->>
		#}
		flux(out, river.water.o2, [k g, day-1], "River oxygen from catchment") {
			#catch_conc := 8[m g, l-1],#
			catch_conc := f_o2sat*o2_saturation(temp, 0) * o2_mol_mass,
			in_flux(water)*catch_conc->>
		}
		
		var(river.water.oc.o2, [k g], [], "River DOC oxidation state") @override_conc {
			1 + COS_alloch/4
		}
		
		# Hmm: This doesn't work properly unless you also count it under PP(TDP?) and TP in the river.
		var(river.water.phyt, [k g], [m g, l-1]) # Just to allow transport of it.
		#flux(river.water.phyt, river.water.oc, [k g, day-1], "River phyto DOC release") {
		#	phyt*0.1[day-1]
		#}
		#flux(out, river.water.sed.phos, [k g, day-1], "River phyto P release") {
		#	0=>>#phyt*0.009*0.1[day-1]
		#}
	}
}