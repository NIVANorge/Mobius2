

model("EasyReservoir-multibasin-EasyChem") {
	
	#extend("simplyq_model.txt")
	
	air		 : compartment("Atmosphere")
	epi      : compartment("Epilimnion")
	hyp      : compartment("Hypolimnion")
	surf	 : compartment("Surface")
	
	ice      : quantity("Ice")
	
	FPV      : quantity("FPV")
	
	# for EasyChem
	oc       : quantity("Organic Carbon")
	phyt     : quantity("Phytoplankton")
	o2       : quantity("Oxygen")
	nitro    : quantity("Nitrogen")
	phos     : quantity("Phosphorus")
	resp     : property("Bacterial respiration")
	dic      : quantity("Dissolved inorganic carbon")
	ch4      : quantity("Methane")
	
	ocf       : quantity("Organic Carbon FPV")
	phytf     : quantity("Phytoplankton FPV")
	o2f       : quantity("Oxygen FPV")
	nitrof    : quantity("Nitrogen FPV")
	phosf     : quantity("Phosphorus FPV")
	respf     : property("Bacterial respiration FPV")
	dicf      : quantity("Dissolved inorganic carbon FPV")
	ch4f      : quantity("Methane FPV")
	###
	
	wind     : property("Wind speed")
	g_rad    : property("Global radiation")
	pressure : property("Pressure")
	a_hum    : property("Actual specific humidity")
	rho      : property("Density")
	lwd      : property("Downwelling longwave radiation")
	sw       : property("Shortwave radiation (Light)")
	cos_z    : property("Cosine of the solar zenith angle")
	s_vap    : property("Saturation vapour pressure")
	a_vap    : property("Actual vapour pressure")	
	sw_heat  : property("SWR as heat")
	attn     : property("Attenuation coefficient")
	deg_cov  : property("Degree of coverage")
	sol_elec : property("Solar energy production")
	hydro_elec: property("Hydropower energy production")
	z_e      : property("Thickness")
    abstrac  : property("Lake abstraction")
	ruleCurve  : property("Rule Curve")
    area     : property("Lake surface area")
	sed_area : property("Sediment area")
	temp     : property("Temperature")
	tempf     : property("Temperature FPV")
	precip   : property("Precipitation")
	level	 : property("Water level")
	wl_Wsaved : property("Water level including saved water")
	epi_inflow : property("Inflow to reservoir")
	in_Temp  : property("Inflow Temp")
	in_Tempf  : property("Inflow Temp FPV")
	depth    : property("Depth")
	saved_water : property("Water saved")

	
	heat : quantity("Heat energy")
	heatf : quantity("Heat energy FPV")
	water : quantity("Water")
	water_FPV : quantity("WaterFPV")
	
	evap_mm  : property("Evaporation per area")
		
	par_group("Lake data", epi) {
		A_surf : par_real("Initial lake surface area", [m 2], 107183, 0, 371e9)
		precip_scalor : par_real("Precipitation scalor", [], 1, 0.5, 1.5)
		evap_scalor : par_real("Humidity scalor", [], 1, 0.5, 1.5)
		swr_scalor : par_real("SWR scalor", [], 1, 0.5, 1.5)
		always_cover : par_bool("Always cover (FPV)", false)
		Area_cov : par_real("Surface Area covered with FPV", [m 2], 1, 0.2, 1)
	}
	
	par_group("Lake ensemble data") {
		A_total : par_real("Total initial surface area", [m 2], 107183, 0, 371e9)
		constant_din_flux  : par_real("Epilimnion DIN point source", [k g, day-1], 0, 0, 1000000)
		constant_tdp_flux  : par_real("Epilimnion TDP point source", [k g, day-1], 0, 0, 1000000)
	}
	
	
	#load("modules/simplysoiltemp.txt", module("Simply soil temperature", air, soil, snow_box, snow, temp))
	#load("modules/rivertemp.txt",      module("RiverTemperature", air, soil, river, water, heat, temp))
	load("modules/atmospheric.txt",    module("Atmospheric", air, temp, wind, g_rad, pressure, a_hum, rho, lwd, cos_z, a_vap, s_vap))
	load("modules/airsea_fpv_old.txt",         module("AirSea FPV", air, epi, ice, FPV, evap_mm, temp, precip, wind, g_rad, pressure, rho, a_hum, lwd, sw, sw_heat, attn, deg_cov, sol_elec, depth, saved_water, precip_scalor, evap_scalor, swr_scalor, always_cover, Area_cov,
											loc(epi.area), ht : loc(epi.water.heat), ht, loc(epi.water.temp), loc(epi.water_FPV.heatf), loc(epi.water_FPV.tempf)))
	load("modules/easyreservoir.txt",       module("EasyReservoir", air, epi, hyp, surf, water, water_FPV, ice, heat, temp, heatf, tempf, precip, z_e, evap_mm, abstrac, ruleCurve, area, sed_area, sw_heat, hydro_elec, depth, saved_water, A_surf, A_total, precip_scalor, always_cover, level, wl_Wsaved, epi_inflow, in_Temp, in_Tempf)) #, loc(downstream), downstream
	load("modules/easychem_old.txt",       module("EasyChem", air, epi, hyp, surf, water, water_FPV, ice, heat, oc, phyt, o2, dic, ch4, nitro , phos, temp,ocf, phytf, o2f, dicf, ch4f, nitrof , phosf, tempf, precip, wind, z_e, evap_mm, abstrac, area, sed_area, sw, epi_inflow, in_Temp, always_cover, resp, respf, horz, horz_hyp, constant_din_flux, constant_tdp_flux, A_surf, A_total, loc(epi.water.temp)))
	
	simply_solver : solver("Simply solver", "INCADascru", 0.1, 1e-3)   # NOTE: The small relative minimal step is needed by SimplyTox.
	
	solve(simply_solver, epi.water, hyp.water, epi.water_FPV, hyp.water_FPV, epi.ice)
	
	
	
	
	lake_index : index_set("Lake")
	
	distribute(epi, lake_index)
	distribute(hyp, lake_index)
	distribute(surf, lake_index)


	horz : connection("Horizontal", all_to_all) { epi[lake_index] }
	horz_hyp : connection("Horizontal hypo", all_to_all) { hyp[lake_index] }
	
	module("Horizontal mixing", version(0, 0, 1)) {
		
		par_group("Horizontal mixing", epi) {
			mix : par_real("Horizontal mixing coefficient", [day-1], 0.1)
		}
		
		flux(epi.water, horz, [m 3, day-1], "Epi horizontal mixing") {
			(water + water[below]) * mix
		} #@no_carry{heat}
		
		flux(hyp.water, horz_hyp, [m 3, day-1], "Hyp horizontal mixing") {
			(water + water[below]) * mix
		} #@no_carry{heat}
		
		flux(hyp.water, horz_hyp, [m 3, day-1], "Water level adjustment") {
			dl := epi.level - epi.level[below],
			dl*A_surf*10[day-1]   if dl > 0,
			0=>>                   otherwise
		} #@no_carry { heat }
		
		flux(epi.water_FPV, horz, [m 3, day-1], "Epi horizontal mixing FPV") {
			(water + water[below]) * mix
		} #@no_carry{heat}
		
		flux(hyp.water_FPV, horz_hyp, [m 3, day-1], "Hyp horizontal mixing FPV") {
			(water + water[below]) * mix
		} #@no_carry{heat}
		
		flux(hyp.water_FPV, horz_hyp, [m 3, day-1], "Water level adjustment FPV") {
			dl := epi.wl_Wsaved - epi.wl_Wsaved[below],
			dl*A_surf*10[day-1]   if dl > 0,
			0=>>                   otherwise
		} #@no_carry { heat }
	}
	
	
	# NOTE: Just update the regex for the compartments.
	# override(downstream) { (river|epi)* }
}