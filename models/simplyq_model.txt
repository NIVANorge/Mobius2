
model("SimplyQ") {
	
	air      : compartment("Atmosphere")
	snow_box : compartment("Snow layer")
	soil     : compartment("Soil")
	gw       : compartment("Groundwater")
	river    : compartment("River")
	
	snow     : quantity("Snow")
	water    : quantity("Water")
	
	temp     : property("Temperature")
	precip   : property("Precipitation")
	flow     : property("Flow")
	pet      : property("Potential evapotranspiration")
	
	par_group("Land cover", soil) {
		lu_prop  : par_real("Land use proportions", [], 1, 0, 1)
	}
	
	par_group("Catchment data", river) {
		a_catch  : par_real("Catchment area", [k m 2], 51.7, 1e-6, 7e6)
	}
	
	downstream : connection("Downstream")  @directed_graph { 
		river+ out
	} @no_cycles
	
	###### Import modules
	load("modules/pet.txt",       module("Degree-day PET", air, soil, pet, temp))
	#load("modules/pet.txt",      module("Penman-Monteith PET"))
	
	load("modules/hbv_snow.txt",  module("HBVSnow", air, snow_box, snow, water, temp, precip, loc(soil.water)))
	
	load("modules/simplyq.txt",
		module("SimplyQ land", soil, gw, river, water, flow, pet, a_catch, loc(river.water), loc(river.water) ),
		module("SimplyQ river", river, water, flow, loc(downstream)))
		#module("SimplyQ river trapezoid", river, water, flow, loc(downstream)))	
	
	aggregation_weight(soil, gw)    { lu_prop }
	aggregation_weight(soil, river) { lu_prop }
	
	# Convert mm to m^3. The framework figures out how to use a_catch to do that.
	unit_conversion(soil.water, river.water) { a_catch }
	unit_conversion(gw.water, river.water)   { a_catch }
	
		
	###### Distribute compartments over index sets and set ODE solvers
	
	sc : index_set("Subcatchment")
	lu : index_set("Landscape units")
	
	distribute(soil,  sc, lu)
	distribute(gw,    sc)
	distribute(river, sc)
	
	#par_group("Solver configuration") {
	#	solver_h : par_real("Solver fractional step", [], 0.1)
	#	solver_hmin : par_real("Solver relative minimal step", [], 0.01)
	#}
	#simply_solver : solver("Simply solver", "INCADascru", solver_h, solver_hmin)
	
	simply_solver : solver("Simply solver", inca_dascru, [2, hr], 1e-3)   # NOTE: The small relative minimal step is needed by SimplyTox.
	
	solve(simply_solver, soil.water, gw.water, river.water)
	
}


