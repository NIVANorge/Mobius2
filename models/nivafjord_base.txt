
model("NIVAFjord") {

	# NOTE: These configurations can be overruled by an extending model
	has_boundaries : constant(true) 
	default_airsea : constant(true)
	
	basin_idx     : index_set("Basin index")
	
	option(has_boundaries) {
		bnd_basin_idx : index_set("Boundary basin index")
		all_basins    : index_set("All basins") @union(basin_idx, bnd_basin_idx)
		#e_idx         : index_set("Fjord connection index") @sub(basin_idx)
		layer_idx     : index_set("Layer index") @sub(all_basins)
	} @otherwise {
		layer_idx     : index_set("Layer index") @sub(basin_idx)
	}
	
	air       : compartment("Atmosphere")
	basin     : compartment("Basin",          basin_idx)
	layer     : compartment("Fjord layer",    basin_idx, layer_idx)
	sediment  : compartment("Fjord sediment", basin_idx, layer_idx)
	
	option(has_boundaries) {
		bnd_basin : compartment("Boundary basin", bnd_basin_idx)
		bnd_layer : compartment("Boundary layer", bnd_basin_idx, layer_idx)
	}
	
	water : quantity("Water")
	ice   : quantity("Ice")
	salt  : quantity("Salt")
	heat  : quantity("Heat energy")
	
	temp     : property("Temperature")
	salinity : property("Salinity")
	precip   : property("Precipitation")
	wind     : property("Wind speed")
	g_rad    : property("Global radiation")
	pressure : property("Pressure")
	a_hum    : property("Actual specific humidity")
	rho      : property("Density")
	lwd      : property("Downwelling longwave radiation")
	sw       : property("Shortwave radiation")
	cos_z    : property("Cosine of the solar zenith angle") 
	attn     : property("Attenuation")
	freeze_t : property("Ice formation temperature")
	indicator : property("Ice indicator")
	a_vap    : property("Actual vapor pressure")
	s_vap    : property("Saturation vapor pressure")
	
	z    : property("Depth")
	dz   : property("Thickness")
	h    : property("Sea level")
	evap : property("Evaporation")
	area : property("Area")
	
	vert    : connection("Fjord vertical") @grid1d(layer, layer_idx)
	sw_vert : connection("Shortwave vertical") @grid1d(layer, layer_idx)
	
	par_group("Solver step") {
		solver_h    : par_real("Initial solver step", [hr], 1)
		solver_hmin : par_real("Solver relative min step", [], 0.01)
	}
	
	load("modules/atmospheric.txt",
		module("Atmospheric", air, temp, wind, g_rad, pressure, a_hum, rho, lwd, cos_z, a_vap, s_vap))
	
	option(default_airsea) {
		load("modules/airsea.txt",
			module("AirSea", "AirSea Fjord", air, basin, ice, heat, temp, precip, wind, g_rad, pressure, rho, a_hum, lwd, sw, attn, indicator,
								evap, cos_z, loc(basin.freeze_t), loc(basin.area), loc(layer.water[vert.top]), loc(layer.water.heat[sw_vert.top])))
	}
	
	option(has_boundaries) {
		all_layer : compartment("All layers", all_basins, layer_idx) # This is not used for anything other than to force a par group to distribute over all_basin
		load("modules/nivafjord/basin.txt", dims : preamble("NIVAFjord dimensions", all_layer, layer))
	} @otherwise {
		load("modules/nivafjord/basin.txt", dims : preamble("NIVAFjord dimensions", layer, layer))
	}
		
	load("modules/nivafjord/basin.txt",
		module("NIVAFjord basin", air, basin, layer, water, salt, heat, temp, salinity, pressure, wind, g_rad, rho, attn, z, dz, h, area, freeze_t, sw, cos_z, loc(basin.ice.indicator), vert, sw_vert, loc(sediment.heat), dims))
	
	option(has_boundaries) {
		load("modules/nivafjord/boundary_basin.txt",
			module("NIVAFjord boundary", bnd_basin, bnd_layer, water, heat, salt, temp, salinity, dz, h, rho, pressure, vert, dims))
			
		solve(sol, bnd_basin.h)
	}
	
	option(has_boundaries) {
		horz : connection("Fjord horizontal") @directed_graph(e_idx) { 
			layer+ bnd_layer?
		} #@no_cycles
		
		edge       : compartment("Basin edge",       basin_idx, e_idx)
		edge_layer : compartment("Basin edge layer", basin_idx, e_idx, layer_idx)
		
		load("modules/nivafjord/horizontal_fluxes.txt",
			module("NIVAFjord horizontal fluxes",
				basin, bnd_basin, layer, bnd_layer, edge, edge_layer, edge2, edge_layer2, water, rho, pressure, dz, h, horz, horz2, vert, dims),
			#module("NIVAFjord simple realignment", basin, layer, water, dz, vert, dims)
			module("NIVAFjord immediate realignment", basin, layer, water, horz, horz2, vert)
		)
		e_idx         : index_set("Fjord connection index") @sub(basin_idx)
		e_idx2        : index_set("Fjord connection index 2") @sub(bnd_basin_idx)
		
		horz2 : connection("Fjord horizontal reverse") @directed_graph(e_idx2) {
			bnd_layer layer
		} @no_cycles
		
		edge2 : compartment("Boundary basin edge", bnd_basin_idx, e_idx2)
		edge_layer2 : compartment("Boundary basin edge layer", bnd_basin_idx, e_idx2, layer_idx)
	}
	
	sol : solver("NIVAFjord solver", inca_dascru, solver_h, solver_hmin)
	solve(sol, layer.water, basin.ice)
}