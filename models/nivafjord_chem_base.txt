

model("NIVAFjord-Chem-Base") {
	
"""
This won't run as its own model, it is just a base for model extension.
"""	
	
	extend("nivafjord_base.txt")
	
	phyt_type : index_set("Phytoplankton type") #Not currently used..
	
	option_group("FjordChem configurations") {
		compute_dic   : par_bool("Compute DIC (CO₂, CH₄)", true)
		point_sources : par_enum("Point sources type", none) { none constant dynamic }
		phyt_module   : par_enum("Phytoplankton module", equilibrium) { equilibrium exponential }
		# Eventually we could have other configurations, like include zooplankton, type of phyto module, allow multiple phyto species etc.
		jet           : par_bool("Jet mix outlet", false)
	}
	
	sed : quantity("Sediments")
	oc : quantity("Organic carbon")
	on : quantity("Organic nitrogen")
	op : quantity("Organic phosphorous")
	din : quantity("Nitrate")
	phos : quantity("Phosphate")
	
	# Called 'fjord_phyt' to distinguish from freshwater in the version of the model that also has EasyLake
	fjord_phyt : quantity("Fjord phytoplankton")#, phyt_type)
	#zoo        : quantity("Zooplankton")
	o2         : quantity("O₂")
	co2        : quantity("CO₂")
	ch4        : quantity("CH₄")
	chl_a      : property("Chlorophyll-a")
	tn         : property("Total nitrogen")
	tp         : property("Total phosphorous")
	
	o2satconc : property("O₂ saturation concentration")
	
	load("modules/nivafjord/fjordchem.txt",
		chem_par : preamble("NIVAFjord chemistry rates"),
		module("NIVAFjord chemistry", air, layer, sediment, water, o2, co2, ch4, oc, din, on, phos, op, sed, fjord_phyt, tn, tp, temp, salinity, z, dz, attn, area, cos_z, sw, o2satconc, vert, chem_par, dims, compute_dic))
		
	option(phyt_module.equilibrium) {
		load("modules/plankton.txt",
			phyt_par : preamble("Phytoplankton parameters", "Phytoplankton parameters Fjord", basin, fjord_phyt),
			module("Phytoplankton", "Phytoplankton Fjord", layer, water, fjord_phyt, oc, on, op, o2, din, phos, sed, chl_a, sw, temp, phyt_par))
	}
	option(phyt_module.exponential) {
		load("modules/plankton.txt",
			phyt_par : preamble("Phytoplankton parameters 2", "Phytoplankton parameters Fjord 2", basin, fjord_phyt),
			module("Phytoplankton 2", "Phytoplankton Fjord 2", layer, water, fjord_phyt, oc, on, op, o2, din, phos, sed, chl_a, sw, temp, phyt_par))
	}
	
	option(default_airsea) {
		load("modules/airsea_gas.txt",
			module("AirSeaGas", "AirSeaGas Fjord", air, basin, o2, co2, ch4, temp, wind, precip, o2satconc, pressure, loc(basin.ice.indicator), loc(layer.water[vert.top]), loc(basin.area), loc(compute_dic))) 
	}
	
	load("modules/nivafjord/sediment.txt",
		module("NIVAFjord sediments", layer, sediment, water, o2, co2, ch4, salinity, sed, oc, din, on, phos, op, heat, area, temp, dz, z, vert, chem_par, dims, compute_dic))
	
	option(has_boundaries) {
		load("modules/nivafjord/boudary_chem.txt",
			module("NIVAFjord boundary chemistry", bnd_layer, water, o2, oc, din, on, phos, op, fjord_phyt, chl_a, temp, salinity, sed, chem_par, phyt_par))
	}
	
	option(point_sources.constant) {
		load("modules/nivafjord/point_sources.txt",
			module("NIVAFjord point sources", layer, water, din, on, phos, sed, oc, o2, heat, temp))
	}
	
	option(point_sources.dynamic) {
		
		psi : index_set("Point source index")
		ps : compartment("Point source", psi)
		
		psc : connection("Point source connection") @directed_graph { ps layer } @no_cycles
		
		load("modules/nivafjord/point_sources.txt",
			module("NIVAFjord dynamic point sources", air, ps, layer, water, din, on, phos, sed, oc, o2, heat, temp, psc)
		)
	}
	
	option(jet) {
		#NOTE: Need technical framework upgrade to be able to have multiple of these per basin
		jps : compartment("Jet point source", basin_idx)
		
		load("modules/nivafjord/point_sources.txt",
			module("NIVAFjord jet point source", air, jps, layer, water, o2, heat, temp, rho, z, vert)
		)
	}
	
	
	solve(sol, sediment.sed, sediment.heat)
	solve(sol, air.cos_z, air.g_rad)
}

