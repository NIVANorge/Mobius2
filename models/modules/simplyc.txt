

module("SimplyC land", version(1, 0, 1),
	air   : compartment,
	soil  : compartment,
	gw    : compartment,
	water : quantity,
	oc    : quantity,
	temp  : property
) {
"""
A simple DOC model.
"""

	load("stdlib/basic_math.txt", library("Response"))
	
	so4   : property("SO4 deposition")
	
	var(air.so4, [m g, l-1])
	
	par_group("DOC general") {
		kt1        : par_real("Soil temperature DOC creation linear coefficient", [deg_c-1], 0, 0, 0.1)
		kt2        : par_real("Soil temperature DOC creation second-order coefficient", [deg_c-2], 0, 0, 0.1)
		kso4       : par_real("Soil DOC linear SO4 dependence", [l, m g-1], 0, 0, 0.1)
		cdoc       : par_real("Baseline soil DOC dissolution rate", [m g, l-1, day-1], 1, 0, 10, "Only used if the soil DOC computation type is dynamic.")
		soildoc_type : par_enum("Soil DOC computation type", equilibrium) { const equilibrium dynamic }
		gwdoc_type : par_enum("Groundwater DOC computation type", soil_avg) { const soil_avg half_life }
	}
	
	par_group("DOC land", soil) {
		basedoc    : par_real("Baseline soil DOC concentration", [m g, l-1], 10, 0, 100)
	}
	
	par_group("DOC deep soil", gw) {
		gwdochl    : par_real("Groundwater DOC half-life", [day], 80, 1, 500)
		gwdocconc  : par_real("Groundwater DOC concentration", [m g, l-1], 3, 0, 20)
	}
	
	var(soil.water.oc, [k g, k m -2], [m g, l-1], "Soil water DOC")
		@initial_conc { basedoc }
		@override_conc {
			basedoc                                             if soildoc_type.const,
			basedoc*(1 + (kt1 + kt2*temp)*temp - kso4*air.so4)  if soildoc_type.equilibrium,
			no_override                                         otherwise
		}
		
	var(gw.water.oc,   [k g, k m -2], [m g, l-1], "Deep soil DOC")
		@initial_conc {
			gwdocconc                       if gwdoc_type.const,
			aggregate(conc(soil.water.oc))  otherwise
		} @override_conc {
			gwdocconc                       if gwdoc_type.const,
			aggregate(conc(soil.water.oc))  if gwdoc_type.soil_avg,
			no_override                     otherwise
		}
	
	flux(out, soil.water.oc, [k g, k m-2, day-1], "Soil DOC production") {  max(0, water*cdoc*(1 + (kt1 + kt2*temp)*temp - kso4*air.so4))  }
	
	flux(soil.water.oc, out, [k g, k m-2, day-1], "Soil DOC mineralization+resorption") {  oc * (cdoc / basedoc)  } @no_carry
	
	flux(gw.water.oc, out, [k g, k m-2, day-1], "Deep soil DOC mineralization") {
		rate := hl_to_rate(gwdochl),
		oc * rate
	} @no_carry
	
}

module("SimplyC river", version(0, 0, 1),
	river : compartment,
	gw    : compartment,
	water : quantity,
	oc    : quantity,
	temp  : property
) {
	load("stdlib/basic_math.txt", library("Response"))

	par_group("DOC river", river) {
		r_loss : par_real("River DOC loss rate at 20Â°C", [day-1], 0)
		r_q10  : par_real("River DOC loss Q10", [], 1)
	}

	var(river.water.oc, [k g], [m g, l-1], "River water DOC") @initial_conc {  conc(gw.water.oc)  }
	
	flux(river.water.oc, out, [k g, day-1], "River DOC loss") {
		rate := q10_adjust(r_loss, 20.0[deg_c], temp, r_q10),
		oc * rate
	} @no_carry
}


module("Simple river TOC", version(0, 1, 0),
	river : compartment,
	water : quantity,
	oc    : quantity,
	sed   : quantity,
	toc   : property
) {
	par_group("Particulate carbon") {
		sed_oc : par_real("Suspended sediments OC mass fraction", [], 0.02, 0, 1)
	}

	var(river.water.sed.oc, [k g], "River POC") @show_conc(river.water, [m g, l-1])
	
	flux(out, river.water.sed.oc, [k g, day-1], "River POC mobilization") {   sed_oc*in_flux(river.water.sed)->>   }
	
	var(river.water.toc, [m g, l-1], "River TOC concentration") {   conc(oc) + conc(sed.oc)*conc(sed)   }
}



