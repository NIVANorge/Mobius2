

module("SimplyQ land", 0, 5, 0) {
"""
This is an adaption of a hydrology module originally implemented in Python as a part of the model SimplyP, which was published as

[Jackson-Blake LA, Sample JE, Wade AJ, Helliwell RC, Skeffington RA. 2017. Are our dynamic water quality models too complex? A comparison of a new parsimonious phosphorus model, SimplyP, and INCA-P. Water Resources Research, 53, 5382â€“5399. doi:10.1002/2016WR020132](https://doi.org/10.1002/2016WR020132)
"""
	load("../../stdlib/basic_math.txt", library("Response"))    #TODO: we need a better way to address the stdlib so that we don't have to know the path.

	soil     : compartment("Soil")
	gw       : compartment("Groundwater")
	river    : compartment("River")
	
	water : quantity("Water")
	
	soil.par_group("Hydrology general") {
		bfi    : par_real("Baseflow index", [],                        0.6,  0,    1)
		qqinfl : par_real("Quick flow inflection point", [m m, day-1], 160, 20,  500)
	}
	
	soil.par_group("Hydrology land") {
		fc     : par_real("Field capacity", [m m],                     120,  0, 1000)
		tc_s   : par_real("Soil water time constant", [day -1],          2,  1,   40)
	}
		
	gw.  par_group("Groundwater") {
		tc_g    : par_real("Groundwater time constant", [day -1],       30,  1,  400)
	}
	
	a_catch : par_real("Catchment area", [k m 2]) # NOTE: This is a reference to a parameter that must be declared in the model file.
	
	soil.has(water, [m m], "Soil water volume") .initial { fc }
	gw  .has(water, [m m], "Groundwater volume") .initial {
		tc_g * river.water.flow * 86.4 / a_catch
	}

	pet  : property("Potential evapotranspiration")
	
	quick_flow :
	flux(soil.water, out, "Quick flow") {
		drylim := 0.9		# Could be a parameter. Stops quick flow below drylim*fc
		flow   := in_flux(water)
		#flow * s_response(water, drylim*fc, fc, 0, 1) * (2 / (1 + exp(-flow/qqinfl)) - 1)
		flow * s_response(water, drylim*fc, fc, 0, 1) * atan(flow/qqinfl)*2/pi
	}
	
	evap :
	flux(soil.water, nowhere, "Evapotranspiration") {   
		#pet*(1 - 0.01^(water/fc))   # = pet*(1 - exp(ln(0.01)*water/fc)) #NOTE: these two are equivalent formulations due to optimizations.
		s_response(water, 0.5*fc, fc, 0, pet)
	}  
	
	soil.water.has(flow : property("Flow"), [m m, day -1], "Soil water flow") {
		rate := (water - fc)/tc_s
		s_response(water, fc, 1.01*fc, 0, rate) # smoothly turn the rate on between water volumes of fc and 1.01*fc
	}
	
	soil_runoff :
	flux(soil.water, out, "Soil runoff")            {   flow * (1 - bfi)   }
	
	flux(soil.water, gw.water, "Recharge")          {   soil.water.flow * bfi   }
	
	gw_runoff :
	flux(gw.water, out, "Groundwater runoff")       {   water / tc_g   }
}


module("SimplyQ river", 0, 0, 1) {
"""
The river part of the SimplyQ module.
"""

	river : compartment("River")
	
	water : quantity("Water")
	
	river.par_group("Reach parameters") {
		slope          : par_real("Reach slope", [],                     0.014, 0.00001,        3)
		len            : par_real("Reach length", [m],                   10000,       0, 10000000)
		c_mann         : par_real("Manning's roughness coefficient", [],  0.04,   0.012,      0.1, 
			"Default of 0.04 is for clean winding natural channels. See e.g. Chow 1959 for a table of values for other channel types")
		init_flow      : par_real("Initial reach flow", [m 3, s-1],          1,       0,     100)
	}
	
	flow : property("Flow")
	
	river.has(water, [m 3], "Reach water volume") .initial {
		depth := 0.349 * flow^0.34
		width := 2.71 * flow^0.557
		width * depth * len
	}

	river.water.has(flow, [m 3, s -1], "Reach flow")    { 0.28 * (water * sqrt(slope) / (len * c_mann))^1.5   } .initial { init_flow }
	
	reach_out :
	flux(river.water, out, "Reach flow flux")     {	 flow * 86400  }                  #NOTE: explicit unit conversion should be removed once we get automatic unit checks 
}