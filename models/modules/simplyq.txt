

module("SimplyQ land", version(0, 5, 0),
	soil  : compartment,
	gw    : compartment,
	river : compartment,   # TODO: Should find a way to avoid passing river (and a_catch and maybe flow)
	water : quantity,
	flow  : property,
	pet   : property,
	a_catch : par_real,
	runoff_target : loc,
	gw_target     : loc
) {
"""
This is an adaption of a hydrology module originally implemented in Python as a part of the model SimplyP, which was published as

Jackson-Blake LA, Sample JE, Wade AJ, Helliwell RC, Skeffington RA. 2017. Are our dynamic water quality models too complex? A comparison of a new parsimonious phosphorus model, SimplyP, and INCA-P. Water Resources Research, 53, 5382â€“5399. [doi:10.1002/2016WR020132](https://doi.org/10.1002/2016WR020132)

New to version 0.5 :
- New implementation in the Mobius2 framework.
"""
	load("stdlib/basic_math.txt", library("Response"))
	
	par_group("Hydrology general") {
		bfi    : par_real("Baseflow index", [],                        0.6,  0,    1)
		qqinfl : par_real("Quick flow inflection point", [m m, day-1], 160, 20,  2000)
	}
	
	par_group("Hydrology land", soil) {
		fc     : par_real("Field capacity", [m m],                     120,  0, 1000)
		tc_s   : par_real("Soil water time constant", [day],             2,  1,   40)
	}
		
	par_group("Groundwater", gw) {
		tc_g    : par_real("Groundwater time constant", [day],          30,  1,  400)
		gw_ret  : par_real("Groundwater retention volume", [m m],        0,  1, 1e4)
	}
	
	var(soil.water, [m m], "Soil water volume")  @initial { fc }
	var(gw.water,   [m m], "Groundwater volume") @initial {
		gw_ret + (tc_g * river.water.flow / a_catch) -> [m m]  #TODO: Alternatively, access the init_flow parameter and cut the river.water.flow property entirely
	}
	
	flux(soil.water, river.water, [m m, day-1], "Quick flow") {
		drylim := 0.9,		# Could be a parameter. Stops quick flow below drylim*fc
		q_in   := in_flux(water)->>,
		q_in * s_response(water, drylim*fc, fc, 0, 1) * atan(q_in/qqinfl)*2/pi
	}
	
	flux(soil.water, out, [m m, day-1], "Evapotranspiration") {
		s_response(water, 0.5*fc, fc, 0, pet) # smoothly turn the etp on when water level is between 1/2 field capacity and field capacity.
	} @no_carry   # Don't carry dissolved substances in the evapotranspiration
	
	var(soil.water.flow, [m m, day -1], "Soil water flow") {
		rate := (water - fc)/tc_s,
		s_response(water, fc, 1.01*fc, 0, rate) # smoothly turn the flow rate on between water volumes of fc and 1.01*fc
	}
	
	flux(soil.water, runoff_target, [m m, day-1], "Soil runoff")            {   flow * (1 - bfi)   }
	
	flux(soil.water, gw.water, [m m, day-1], "Recharge")                    {   flow * bfi   }

	flux(gw.water, gw_target, [m m, day-1], "Groundwater runoff")           {   max(0, water-gw_ret) / tc_g   }
}


module("SimplyQ river", version(0, 5, 0),
	river : compartment,
	water : quantity,
	flow  : property,
	river_target : loc
) {
"""
The river part of SimplyQ.

The flow equations are derived as follows:

We assume the flow follows Manning's formula:

$$
v = \frac{R_h^{2/3}S^{1/2}}{n}
$$

Where $$v$$ is the cross-sectional average velocity, $$R_h$$ the hydraulic radius, $$S$$ the channel slope an $$n$$ the roughness coefficient (c_mann below). Now $$Q = vA$$, where $$Q$$ is the discharge and $$A$$ the cross-sectional area. Also, $$A = V/l$$ where $$V$$ is the volume and $$l$$ the length.

We also assume that depth and width of the river are given by the formulas

$$
d = 0.35 Q^{0.34} \\
w = 2.71  Q^{0.557}
$$

These are taken from (reference to be inserted).

We use the approximation

$$
R_h = \frac{dw}{2d+w}.
$$

Putting everything together and rearranging we can get

$$
\frac{2}{2.71}Q^{0.943} + \frac{1}{0.35}Q^{1.16} = \left(\frac{V\sqrt{S}}{ln}\right)^{\frac{3}{2}}
$$

We then make the approximation $$Q^{0.943} \simeq Q^{1.16} \simeq Q$$, and get

$$
Q \simeq 0.28\left(\frac{V\sqrt{S}}{ln}\right)^{\frac{3}{2}}
$$

"""

	par_group("Reach parameters", river) {
		slope          : par_real("Reach slope", [],                             0.014, 0.00001,        3,
			"Roughly the altitude difference between the uppermost and lowermost points divided by the length")
		len            : par_real("Reach length", [m],                           10000,       0, 10000000)
		c_mann         : par_real("Manning's roughness coefficient", [s, m-1/3],  0.04,   0.012,      0.1, 
			"Default of 0.04 is for clean winding natural channels. See e.g. Chow 1959 for a table of values for other channel types")
		init_flow      : par_real("Initial reach flow", [m 3, s-1],                  1,       0,     100)
	}
	
	var(river.water, [m 3], "Reach water volume") @initial {
		q := init_flow => [],   # Force it as dimensionless since it doesn't make sense to take fractional powers of it otherwise
		depth := 0.349[m] * q^0.34,
		width := 2.71[m] * q^0.557,
		width * depth * len
	}
	
	# TODO: ideally we should here be able to cut the property "Flow", but unfortunately it is being referenced by the gw module...

	# NOTE: Empirical formula, so the units don't make sense, hence forced unit conversion.
	var(river.water.flow, [m 3, s-1], "Reach flow") {
		0.28[m 3, s-1] * (water * sqrt(slope) / (len * c_mann) =>[] )^1.5
	} @initial { init_flow }
	@no_store # It is identical to the Reach flow flux. We only have it as a separate variable for reference by the gw module
	
	flux(river.water, river_target, [m 3, s-1], "Reach flow flux")  {  flow ->>  }
}

module("SimplyQ river trapezoid", version(0, 1, 0),
	river : compartment,
	water : quantity,
	flow  : property,
	river_target : loc
) {
"""
Alternative version of the SimplyQ river module assuming trapezoid cross-section of the river.
"""

	par_group("Reach parameters", river) {
		slope          : par_real("Reach slope", [],                             0.014, 0.00001,        3)
		sb             : par_real("Reach bank slope", [],                            1, 0.00001,       10)
		wb             : par_real("Reach bottom width", [m],                         2,     0.1,    10000)
		len            : par_real("Reach length", [m],                           10000,       0, 10000000)
		c_mann         : par_real("Manning's roughness coefficient", [s, m-1/3],  0.04,   0.012,      0.1, 
			"Default of 0.04 is for clean winding natural channels. See e.g. Chow 1959 for a table of values for other channel types")
		init_flow      : par_real("Initial reach flow", [m 3, s-1],                  1,       0,     100)
	}
	
	Rh   : property("Hydraulic radius")
	
	var(river.Rh, [m]) {
		A := water/len,
		wetted_perimeter := wb + 2*sqrt( ( (wb*sb)^2 + 4*A*sb ) / (1 + sb^2) ),
		A / wetted_perimeter
	}
	
	var(river.water, [m 3], "Reach water volume") @initial {
		#This is not exactly correct, and so will not cause the right initial reach flow.. :( Assumes rectangular instead of trapezoid cross-section and uses depth instead of hydraulic radius. But will not be very far off, and it will correct itself quickly.
		len*(flow*c_mann*cbrt(wb^2)/sqrt(slope))^(3/5.)
	}

	var(river.water.flow, [m 3, s -1], "Reach flow")    {  (water/len)*Rh^(2/3.)*sqrt(slope)/c_mann  } @initial { init_flow } @no_store
	flux(river.water, river_target, [m 3, s-1], "Reach flow flux")     {  flow  }
}


module("SimplyQ river manual", version(0, 0, 1),
	river : compartment,
	water : quantity,
	flow  : property,
    tc_reach : property,
	river_target : loc
) {
"""
Alternative version of the SimplyQ river module using a user-supplied mean velocity
"""

	par_group("Reach parameters", river) {
    	length   : par_real("Reach length", [m], 10000, 50, 10000000)
		velocity : par_real("Mean velocity", [m, s-1], 0.3, 0.0001, 8, "Mean water velocity in the reach")
	}
    
    init_flow : constant("Initial reach flow", [m 3, s-1], 0)
	
	var(river.water, [m 3], "Reach water volume") @initial {
        q := init_flow => [],   # Force it as dimensionless since it doesn't make sense to take fractional powers of it otherwise
		depth := 0.349[m] * q^0.34,
		width := 2.71[m] * q^0.557,
		width * depth * length
	}

    var(river.water.tc_reach, [s], "Reach travel time") { length / velocity }
    
	var(river.water.flow, [m 3, s-1], "Reach flow") {
        water / tc_reach
	} @initial { init_flow } @no_store
	
	flux(river.water, river_target, [m 3, s-1], "Daily mean reach flow")  {  flow ->>  }
}