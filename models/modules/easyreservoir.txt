

module("EasyReservoir", version(0, 1, 0),
	air    : compartment,
	epi    : compartment,
	hyp    : compartment,
	water  : quantity,
	ice    : quantity,
	heat   : quantity,
	temp   : property,
	precip : property,
	z_e    : property,
	evap_mm : property,
	abstrac  : property,
	area   : property,
	sed_area : property,
	A_surf : par_real,
	A_total : par_real,
	precip_scalor : par_real,
	always_cover : par_bool,
	wl : property,
	epi_inflow : property,
	in_Temp : property
	#epi_target : loc,
	#downstream : connection
) {
"""
This is a very simple reservoir model based on EasyLake but allowing for flow abstraction 
and free water level for use along with catchment models.
The physical part of the model simulates water balance and temperature.

The water balance part of the model is conceptually similar to VEMALA
[A National-Scale Nutrient Loading Model for Finnish Watersheds - VEMALA, Inse Huttunen et. al. 2016, Environ Model Assess 21, 83-109](https://doi.org/10.1007/s10666-015-9470-6)
"""

	load("stdlib/physiochemistry.txt", library("Water utils"))

	par_group("Lake physical", epi) {
		z_outflow : par_real("Altitude of natural outlet (masl)", [m], 100, 0.1, 1642.0)
		z_abstrac : par_real("Altitude of abstraction (masl)", [m], 100, 0.1, 1642.0)
		z_wl_masl : par_real("Initial water level (masl)", [m], 90, 0.1, 1642.0)
		z_bottom_masl : par_real("Altitude of lake bottom (masl)", [m], 10, 0.1, 1642.0)
		z_epi     : par_real("Initial epilimnion thickness", [m], 2, 0.1, 10)
		dz_epi    : par_real("Epilimnion thickening rate", [m, day-1], 0.01)
		rate_l    : par_real("Rating function linear component", [m 2, s-1], 10, 0, 1000)
		t_epi     : par_real("Initial epilimnion temperature", [deg_c], 15, 0, 50)
		t_bot     : par_real("Bottom temperature", [deg_c], 4, 0, 50)
		mix_deg   : par_real("T. diff threshold for epi and hypo mixing", [deg_c], 0.4, 0.01, 2)
	}

	var(air.precip, [m m, day-1])
	var(air.temp, [deg_c])
	var(epi.water, [m 3], "Epilimnion volume")  @initial {   0.5 * A_surf * (z_wl_masl - z_bottom_masl) - hyp.water   }
	
	var(hyp.water, [m 3], "Hypolimnion volume") @initial {
		z := (z_wl_masl - z_bottom_masl) - z_epi,
		A := A_surf * (z/(z_wl_masl - z_bottom_masl)),
		0.5 * A * z
	}

	depth : property("Depth")
	#wl : property("WL")
	flow : property("Flow")
	
	var(epi.z_e, [m], "Epilimnion thickness") @initial { z_epi }
	{
		z_epi
		#last(z_e) + (dz_epi)*time.step_length_in_seconds->> if !epi.ind & water.temp > t_bot,
		#z_epi                                               otherwise
	} 
	
	
	flux(nowhere, epi.water, [m 3, day-1], "Precipitation to lake")         { air.precip * area * precip_scalor ->>} 
	
	var(epi.depth, [m], "Lake depth")     @initial { z_wl_masl - z_bottom_masl }  
	{
		sqrt(2*(epi.water + hyp.water)/A_surf * (z_wl_masl - z_bottom_masl))
	}
	
	var(epi.sed_area, [m 2], "Sediment surface area (epi)") {
		2* (sqrt(depth*depth + area/4)*sqrt(area)) - hyp.sed_area
	}
	
	var(hyp.sed_area, [m 2], "Sediment surface area (hypo)") {
		2* (sqrt((epi.depth-epi.z_e)*(epi.depth-epi.z_e) + (sqrt(epi.area)/2 * (epi.depth-epi.z_e)/(epi.depth))*(sqrt(epi.area)/2 * (epi.depth-epi.z_e)/(epi.depth)))*sqrt(epi.area)) 
	}
	
	var(epi.wl, [m], "Water Level")     @initial { z_wl_masl}  
	{
		depth + z_bottom_masl
	}
	
	var(epi.area, [m 2], "Lake surface area")   @initial  {   A_surf   }
	{
		A_surf											if always_cover,
		A_surf * (depth / (z_wl_masl - z_bottom_masl)) 	otherwise
	}	
	var(epi.water.flow, [m 3, s-1], "Lake outflow")  {   max(0, rate_l*(z_bottom_masl + depth - z_outflow))   }

	lake_out :
	flux(epi.water, out, [m 3, day-1], "Lake outflow flux")                   {   flow ->>  }
	var(hyp.abstrac, [m 3, day-1], "Lake abstraction")
	flux(hyp.water, nowhere, [m 3, day-1], "Hyp abstraction") {
		hyp.abstrac 
    } 
	
	var(epi.epi_inflow, [m 3, day-1])
	
	flux(out, epi.water, [m 3, day-1], "Inflow to epilimnion") {
		epi.epi_inflow 
	} 
	
	var(epi.water.in_Temp, [deg_c], "Inflow Temp"){
		26.1[deg_c]+0.2*(air.temp - 27.77[deg_c])
	}
	
	flux(out, epi.water.heat, [J, day-1], "Inflow heat to epi" ) {
		water_temp_to_heat(epi.epi_inflow => [m 3], in_Temp) =>>
	}
	
	flux(epi.water, hyp.water, [m 3, day-1], "Epi compensation") {
		#hyp.abstrac
		epi.epi_inflow + air.precip * epi.area * precip_scalor ->> - epi.water.flow ->> - evap_mm*area ->> 
    } #@no_carry { heat }

	
	rho_ice    : constant("Ice density", [k g, m-3], 917)
	l_freeze   : constant("Latent heat of freezing", [J, k g-1], 333500)
	lambda_ice : constant("Ice heat conduction coefficient", [W, m-1, K-1], 2.1)
	
	var(epi.water.heat, [J]) @initial {
		water_temp_to_heat(water, t_epi)
	}
	
	var(hyp.water.heat, [J]) @initial {
		# TODO: Not quite the correct formula for what the mean hypolimnion temperature should be.
		t_hyp := 0.5*(t_epi + t_bot),
		water_temp_to_heat(water, t_hyp)
	}
	
	evap :
	flux(epi.water, nowhere, [m 3, day-1], "Evaporation") {
		evap_mm*area ->>
	} @no_carry # Don't carry any dissolved substances
	
	epi_temp_should_be : property("Epi temp should be")
	var(epi.epi_temp_should_be, [deg_c]) {
		V := water + hyp.water,  # entire volume
		lake_t := water_heat_to_temp(V, water.heat + hyp.water.heat), # Mean lake temperature.
		(lake_t*V - 0.5*t_bot*hyp.water) / (water + 0.5*hyp.water)
	}
	
	flux(epi.water.heat, hyp.water.heat, [J, day-1], "Layer heat transfer") {
		V := water + hyp.water,
		lake_t := water_heat_to_temp(V, heat + hyp.water.heat), # Mean lake temperature.
		epi_t_should_be := (lake_t*V - 0.5*t_bot*hyp.water) / (water + 0.5*hyp.water),
		epi_heat_should_be := water_temp_to_heat(water, epi_t_should_be),
		20[day-1]*(heat - epi_heat_should_be)   # The 5 is pretty arbitrary. Just to get a quick equilibration
	}
	
	var(epi.water.temp, [deg_c], "Epilimnion temperature") {
		water_heat_to_temp(water, water.heat)
	} @initial { t_epi }
	
	var(hyp.water.temp, [deg_c], "Hypolimnion temperature (mean)") {
		water_heat_to_temp(water, water.heat)
	}
	
	
	# TODO: How does mixing interact with ice (?)
	ind : property("Mixing indicator")
	var(epi.ind, [], "Mixing indicator") { abs(water.temp - hyp.water.temp) < mix_deg }
	
	# NOTE: This moves an equal body of water up and down, which does not impact the water volume, but does mix dissolved substances.
	# The no_carry for heat is because we can't let the mixing flux carry heat, since the heat transfer is computed in a different way.
	mix_down :
	flux(epi.water, hyp.water, [m 3, day-1], "Mixing down") {
		0.5*area * z_e * epi.ind * 1[day-1] ->>
	} @no_carry { heat }
	
	mix_up : 
	flux(hyp.water, epi.water, [m 3, day-1], "Mixing up") {
		0.5*epi.area * epi.z_e * epi.ind * 1[day-1] ->>
	} @no_carry { heat }
}