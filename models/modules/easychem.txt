module("EasyChem", version(0, 0, 3),
	air    : compartment,
	epi    : compartment,
	hyp    : compartment,
	
	water  : quantity,
	oc     : quantity,
	phyt   : quantity,
	o2     : quantity,
	din    : quantity,
	phos   : quantity,
	on     : quantity,
	ice    : quantity,
	sed    : quantity,
	
	temp   : property,
	precip : property,
	sw     : property,
	wind   : property,
	indicator : property,
	tp     : property,
	tn     : property,
	toc    : property,
	
	area   : property
) {
"""
This is a simple lake biogeochemical model for CNP and O₂ made to fit with EasyLake

Many of the equations are taken from SelmaProtBas, but with simplifications https://github.com/jorritmesman/selmaprotbas/tree/main
"""

	load("stdlib/basic_math.txt", library("Response"))
	load("stdlib/seawater.txt", library("Sea oxygen"))
	load("stdlib/physiochemistry.txt", library("Chemistry"))
	
	par_group("Lake specific chemistry", epi) {
		init_O2      : par_real("Initial O₂ saturation", [], 1, 0, 1)
		init_c       : par_real("Initial lake DOC concentration", [m g, l-1], 10, 0, 1000)
		init_in      : par_real("Initial lake DIN concentration", [m g, l-1], 0, 0, 1000)
		init_on      : par_real("Initial lake DON concentration", [m g, l-1], 0, 0, 1000)
		init_p       : par_real("Initial lake TDP concentration", [m g, l-1], 0, 0, 1000)
		init_phyt    : par_real("Initial phytoplankton concentration", [m g, l-1], 0.5, 0.01, 1)
		din_dep      : par_real("Direct lake DIN deposition", [k g, ha-1, year-1], 0, 0, 100)
	}
	
	par_group("Oxygen", epi) {
		pvel_scaler  : par_real("Piston velocity scaler for O₂", [], 1, 0.5, 1.5) #TODO: Remove this.
		sod          : par_real("Background sediment O₂ demand", [g, m-2, day-1], 0.5, 0.1, 4)
	}
	
	par_group("Microbes") {
		K_OM         : par_real("Respiration rate", [year-1], 1, 0, 10) #TODO: Call it respiration rate at 20 deg_c
		respQ10      : par_real("Respiration Q10", [], 1.58, 0.25, 4, "Adjustment of rate with 10°C change in temperature")
		COS_resp     : par_real("Carbon Oxidation State adjustment coefficient", [], 3, 1, 10)
		Km_o2        : par_real("Half-saturation concentration O₂", [m mol, m-3], 1.23e-2, 0, 1e-1)
		COS_autoch   : par_real("Carbon Oxidation State autoch DOC", [],  0.5,  0, 1)
	}
	
	#TODO: Could some of these be constants and not adjustable parameters? Otherwise there is a lot of covariance in the parameter set when calibrating N and P concs.
	par_group("Phytoplankton") {
		phyt_eq_20    : par_real("Chl-a of phyto at equilibrium", [m g, l-1], 0.01, 0, 5, "Assuming 20°C and no nutrient or light limitations.")
		phyt_q10      : par_real("Q10 of Phyto equilibrium", [], 2, 1, 4)
		phyt_turnover : par_real("Phytoplankton turnover rate", [day-1], 0.2, 0.05, 0.4)
		
		iopt       : par_real("Optimal PAR intensity", [W, m-2], 100, 50, 250)
		alpha      : par_real("Half-saturation for nutrient uptake", [m mol, m-3], 1.65625, 1, 10)
		phyt_nc    : par_real("N/C ratio in Phytoplankton", [], 0.1509, 0.1, 0.2)
		phyt_pc    : par_real("P/C ratio in Phytoplankton", [], 0.009434, 0.009, 0.01)
		chl_a_f    : par_real("Chl-a fraction", [perc], 2, 1.5, 3.7, "How large a fraction of the phytoplankton mass is chlorophyll a")
	}
	
	par_group("Lake specific phytoplankton", epi) {
		phyt_a : par_real("Phytoplankton amenability", [], 1, 0.5, 1.5, "Adjustment factor to account for shallow lakes being better for plankton, after taking nutrients and light into consideration")
		#phyt_b : par_real("Phytoplankton amenability - depth factor", [], 0, 0, 10)
	}
	
	# These should be passed in so that they are the same entity as in NIVAFjord.
	p_vel     : property("O₂ piston velocity")
	light_lim : property("Light limitation")
	N_lim     : property("Nitrogen limitation")
	P_lim     : property("Phosphorus limitation")
	chl_a     : property("Chlorophyll-a")
	
	f_par     : constant("Fraction of PAR in SW radiation", [], 0.45)  # Photosynthetically available radiation
	
	var(epi.water.o2, [k g], [m g, l-1], "Epilimnion O₂")  @initial_conc { o2_saturation(temp, 0)*init_O2*o2_mol_mass->> }
	var(hyp.water.o2, [k g], [m g, l-1], "Hypolimnion O₂") @initial_conc { o2_saturation(temp, 0)*init_O2*o2_mol_mass->> }  
	
	var(epi.water.oc, [k g], [m g, l-1], "Epilimnion DOC")  @initial_conc { init_c }
	var(hyp.water.oc, [k g], [m g, l-1], "Hypolimnion DOC") @initial_conc { init_c }
	
	#TODO (MNO): We should probably have a correct unit for these: At least document what they mean since they are not a real mass variable.
	var(epi.water.oc.o2, [k g], [], "Epilimnion DOC-O₂ content")  @initial_conc { 1 }
	var(hyp.water.oc.o2, [k g], [], "Hypolimnion DOC-O₂ content") @initial_conc { 1 }
	
	var(epi.water.din, [k g], [m g, l-1], "Epilimnion DIN")  @initial_conc { init_in }
	var(hyp.water.din, [k g], [m g, l-1], "Hypolimnion DIN") @initial_conc { init_in }
	
	var(epi.water.phos, [k g], [m g, l-1], "Epilimnion TDP")  @initial_conc { init_p }
	var(hyp.water.phos, [k g], [m g, l-1], "Hypolimnion TDP") @initial_conc { init_p }
	
	var(epi.water.phyt, [k g], [m g, l-1], "Epilimnion Phytoplankton")  @initial_conc { init_phyt }
	var(hyp.water.phyt, [k g], [m g, l-1], "Hypolimnion Phytoplankton") @initial_conc { init_phyt }
	
	
	var(epi.water.p_vel, [c m, hr-1]) {
		pvel_scaler * o2_piston_velocity(air.wind, temp)
	}
	
	o2sat : property("O₂ saturation concentration")
	var(epi.water.o2sat, [m g, l-1]) {
		o2_saturation(temp, 0)*o2_mol_mass -> [m g, l-1]
	}
	
	flux(out, epi.water.o2, [k g, day-1], "Precipitation O₂") {
		conc := 0.9*o2_saturation(air.temp, 0)*o2_mol_mass -> [m g, l-1],  #Not sure what the fraction should be..
		air.precip*area*conc->>
	}
	
	flux(out, epi.water.o2, [k g, day-1], "O₂ gas exchange at surface") {
		(!ice.indicator) * p_vel*(o2sat - conc(o2))*area ->>
	}
	
	o2rate : property("Sediment O₂ consumption rate")
	
	var(epi.o2rate, [k g, m-2, day-1]) {
		q10 := 2,  #Parametrize?
		rate20 := sod*min(1, 1 - (0.05[m g, l-1] - conc(water.o2))/0.05[m g, l-1]) ->>,
		q10_adjust(rate20, 20[deg_c], hyp.water.temp, q10) # hyp.water.temp proxy for sediment temperature ok (?)
	}

	flux(epi.water.o2, out, [k g, day-1], "O₂ sediment consumption (epi)") {
		# The interface area between sediment and epilimnion is the epi surface area minus the hyp surface area.
		epi.o2rate*(area - hyp.area) ->>
	}
	
	#TODO: Seems to work better to assume that sediment O2 consumption is low in hyp, but why?
	#flux(hyp.water.o2, out, [k g, day-1], "O₂ sediment consumption (hypo)") {
	#	epi.o2rate*area ->>
	#}	
	
	flux(out, epi.water.din, [k g, day-1], "Lake N deposition") { area*din_dep/365.25[day, year-1] ->> }
	
	nosc : property("Carbon Oxidation State") {
		(conc(oc.o2) - 1)*4    # TODO: Where does the number come from?
	}
	
	var(epi.water.oc.nosc, [], "Epilimnion NOSC")
	var(hyp.water.oc.nosc, [], "Hypolimnion NOSC")
	
	resp : property("Bacterial respiration") {
		# Bacterial respiration is adjusted for Temp, O2 concentration and COS of the DOC
		rate := (K_OM / 365.25[day, year-1]) * COS_resp^oc.nosc,
		halfsat := Km_o2*o2_mol_mass->[m g, l-1],
		o2_adj := conc(o2) / (halfsat + conc(o2)),
		q10_adjust(rate*o2_adj, 20[deg_c], temp, respQ10)
	}
	
	var(epi.water.resp, [day-1], "Bacterial mineralization (epi)")
	var(hyp.water.resp, [day-1], "Bacterial mineralization (hypo)")
	
	flux(hyp.water.oc, out, [k g, day-1], "DOC bacterial mineralization (hypo)") { resp * oc }
	flux(epi.water.oc, out, [k g, day-1], "DOC bacterial mineralization (epi)")  { resp * oc }
	
	# note also that DOC to O2 ratio changes with COS of DOC, this is why we have "(2-(4+nosc)/4)"
	
	# TODO (MNO): from the formula for nosc, we have (2 - (4 + nosc)/4) = 2 - conc(oc.o2)  . Is there a reason not just to use that directly? Then you would not need nosc as a separate variable, it could just be computed for the use inside resp.
	flux(hyp.water.o2, out, [k g, day-1], "O₂ bacterial consumption (hypo)") { resp*oc*(o2_mol_mass/c_mol_mass)*(2 - (4 + oc.nosc)/4) }
	flux(epi.water.o2, out, [k g, day-1], "O₂ bacterial consumption (epi)")  { resp*oc*(o2_mol_mass/c_mol_mass)*(2 - (4 + oc.nosc)/4) } 
	
	var(epi.water.chl_a, [m g, l-1]) {
		conc(phyt)*chl_a_f->>
	}
	
	var(epi.water.phyt.light_lim, []) {
		# TODO: There should be some kind of self-shading where TOC and phyto remove shortwave.
		par_sw := sw*(1 - f_par),
		f := par_sw/max(0.5*par_sw, iopt),
		f*exp(1 - f)
	}
	
	var(epi.water.phyt.N_lim, []) {
		#NOTE: Use N molar mass instead of NO3 since that is what we track in the model (e.g. DIN is modeled as mg(N)/l)
		cmol := conc(water.din)/n_mol_mass->[m mol, m-3],
		ntemp := cmol^2,
		ntemp / ((alpha*phyt_nc)^2 + ntemp)
	}
	
	var(epi.water.phyt.P_lim, []) {
		#NOTE: Use P molar mass instead of PO4 since that is what we track in the model
		cmol := conc(water.phos)/p_mol_mass->[m mol, m-3],
		ptemp := cmol^2,
		ptemp / ((alpha*phyt_pc)^2 + ptemp)
	}
	
	equi : property("Equilibrium concentration")
	
	var(epi.water.phyt.equi, [m g, l-1], "Phytoplankton equilibrium concentration") {
		phyt_eq := q10_adjust(phyt_eq_20, 20[deg_c], temp, phyt_q10) / (chl_a_f->[]),
		
		#phyt_a := 1-phyt_b*ln(depth+1)
		
		phyt_eq*phyt_a*min(light_lim, min(N_lim, P_lim))
	}
	
	fix : property("Photosynthetic C fixation")
	var(epi.water.phyt.fix, [k g, day-1]) {
		phyt_turnover*epi.water.phyt.equi*water ->>
	}
	
	flux(out, epi.water.phyt, [k g, day-1], "Epilimnion photosynthetic C fixation") {   fix   }
	
	phyt_death_anox : constant("Phytoplankton increased death rate from anoxicity", [], 10)
	anox_threshold  : constant("Anoxicity threshold", [m g, l-1], 2)
	
	death : property("Phytoplankton death") {
		o2_factor := s_response(conc(o2), anox_threshold*0.9, anox_threshold*1.1, phyt_death_anox, 1),
		phyt_turnover*phyt*o2_factor
	}
	var(epi.water.phyt.death, [k g, day-1], "Phytoplankton death rate (epi)")
	var(hyp.water.phyt.death, [k g, day-1], "Phytoplankton death rate (epi)")
	
	flux(epi.water.phyt, epi.water.oc, [k g, day-1], "Phytoplankton death DOC release (epi)")  { phyt.death }
	flux(out, epi.water.oc.o2,         [k g, day-1], "Phytoplankton death O₂ release (epi)")   { phyt.death*(4 + COS_autoch)/4	}
	flux(hyp.water.phyt, hyp.water.oc, [k g, day-1], "Phytoplankton death DOC release (hypo)") { phyt.death	}
	flux(out, hyp.water.oc.o2,         [k g, day-1], "Phytoplankton death O₂ release (hypo)")  { phyt.death*(4 + COS_autoch)/4	}
	
	flux(out, epi.water.o2, [k g, day-1], "Epilimnion O₂ photosynthesis") {   phyt.fix*o2_mol_mass/c_mol_mass   }
	
	flux(epi.water.din, out, [k g, day-1], "Phytoplankton N uptake") {   phyt.fix  * nc_molar_to_mass_ratio(phyt_nc)   } # *(1 - n_fix_frac)  }
	
	flux(epi.water.phos, out, [k g, day-1], "Phytoplankton P uptake") {   phyt.fix * pc_molar_to_mass_ratio(phyt_pc)   }
	#flux(out, epi.water.sed.phos, [k g, day-1], "Pytoplankton death P release (epi)") { phyt.death * pc_molar_to_mass_ratio(phyt_pc) }
	#flux(out, hyp.water.sed.phos, [k g, day-1], "Pytoplankton death P release (hyp)") { phyt.death * pc_molar_to_mass_ratio(phyt_pc) }
	
	flux(out, epi.water.phos, [k g, day-1], "Pytoplankton death P release (epi)") { phyt.death * pc_molar_to_mass_ratio(phyt_pc) }
	flux(out, hyp.water.phos, [k g, day-1], "Pytoplankton death P release (hyp)") { phyt.death * pc_molar_to_mass_ratio(phyt_pc) }
	
	
	tdpphyt : property("TDP + phyto P")
	
	var(epi.water.tdpphyt, [m g, l-1]) {
		conc(phos) + conc(phyt)*pc_molar_to_mass_ratio(phyt_pc)
	}
	
	var(epi.water.tp, [m g, l-1], "Epilimnion total phosphorous") {
		 conc(sed)*conc(sed.phos) + conc(phos) + conc(phyt)*pc_molar_to_mass_ratio(phyt_pc)
	}
	
	var(epi.water.on, [k g], [m g, l-1], "Epilimnion DON")  @initial_conc { init_on }
	var(hyp.water.on, [k g], [m g, l-1], "Hypolimnion DON") @initial_conc { init_on }
	
	# Releasing N just doesn't give the right N balance in the data in Vansjø
	#flux(out, epi.water.on, [k g, day-1], "Phytoplankton death N release (epi)") { phyt.death * nc_molar_to_mass_ratio(phyt_nc) }
	#flux(out, hyp.water.on, [k g, day-1], "Phytoplankton death N release (hyp)") { phyt.death * nc_molar_to_mass_ratio(phyt_nc) }
	
	# TODO: DON mineralization (?). Difficult to parametrize maybe.
	# Denitrification (?)
	
	# Mostly need phyt sinking/sedimentation (accounts for loss of TN)
	
	var(epi.water.tn, [m g, l-1], "Epilimnion TN") {  conc(on) + conc(din)  }
	
	var(epi.water.sed.oc, [k g], "Epilimnion POC") @show_conc(epi.water, [m g, l-1])
	
	var(hyp.water.sed.oc, [k g], "Hypolimnion POC") @show_conc(hyp.water, [m g, l-1])
	
	var(epi.water.toc, [m g, l-1], "Epilimnion TOC") {   conc(oc)  + conc(phyt) + conc(sed.oc)*conc(sed)   }
	
	var(epi.water.sed.phos, [k g], "Epilimnion PP") @show_conc(epi.water, [m g, l-1])
	var(hyp.water.sed.phos, [k g], "Hypolimnion PP") @show_conc(hyp.water, [m g, l-1])
}


module("EasyChem-Particulate", version(0, 0, 3),
	air : compartment,
	epi : compartment,
	hyp : compartment,
	water : quantity,
	sed   : quantity,
	wind  : property,
	area  : property,
	downstream : connection,
	sett_target : loc
) {
"""
Particle transport and settling for EasyChem.
"""
	
	par_group("Particles") {
		sett_vel : par_real("Sediment settling velocity", [m, day-1], 1, 0, 100, "The net settling velocity after taking into account mixing whithin (but not between) each compartment.")
		resusp_f  : par_real("Resuspension factor", [], 0, 0, 1e-7, "Wind-proportional resuspension in epilimnion-sediment interface.")
		#sed_z    : par_real("Bottom sediment thickness", [m], 0.2, 0, 5, "Thickness of sediment layer participating in P exchange")
	}

	var(epi.water.sed, [k g], [m g, l-1], "Epilimnion suspended sediments")
	var(hyp.water.sed, [k g], [m g, l-1], "Hypolimnion suspended sediments")
	
	flux(epi.water.sed, sett_target, [k g, day-1], "Epilimnion sediment settling") {
		(max(0[m, day-1], sett_vel - air.wind*resusp_f->[m, day-1])) * conc(sed) * (area - hyp.area) ->>
	}
	flux(epi.water.sed, hyp.water.sed, [k g, day-1], "Epilimnion-hypolimnion settling") {
		sett_vel * conc(sed) * hyp.area ->>
	}
	flux(hyp.water.sed, sett_target, [k g, day-1], "Hypolimnion sediment settling") {
		sett_vel * conc(sed) * area ->>
	}
	
	#load("stdlib/basic_math.txt", library("Response"))
	
	
	/* # This is tricky without a 3d model...
	# The idea is that heavier sediments that are prevalent during high flow settle more quickly once the water slows down near the inlet.
	flux(epi.water.sed, out, [k g, day-1], "Epilimnion SS inlet settling") {
		in_s := in_flux(downstream, epi.water.sed),
		in_q := in_flux(downstream, epi.water),
		in_conc := in_s/in_q -> [m g, l-1],
		#in_s * s_response(in_conc, 5.[m g, l-1], 10.[m g, l-1], 0., 0.5)
		#in_s * min(1, (max(in_conc/5[m g, l-1], 1)^2 - 1))
		#0=>>
		in_s * min(1, (max(conc(sed)/6[m g, l-1], 1)^2 - 1))
	}
	*/
	
	
}


module("SuperEasyC", version(0, 0, 1),
	epi : compartment,
	hyp : compartment,
	water : quantity,
	oc : quantity,
	sed : quantity,
	temp : property,
	toc : property
) {	
"""
A very simplified lake carbon module. Mainly for use with EasyTox if one doesn't want to run the full EasyChem.
"""
	
	load("stdlib/basic_math.txt", library("Response"))
	
	par_group("Lake C", epi) {
		init_doc : par_real("Initial lake DOC concentration", [m g, l-1], 0, 0, 1000)

		lake_doc_hl  : par_real("Lake DOC half life at 20°C", [day], 200, 1, 10000, "Half-life of net loss to mineralization")
		lake_doc_q10 : par_real("Lake DOC retention Q10", [], 1, 1, 5)
		hyp_ret : par_real("Hypolimnion relative retention", [], 0, 0, 1, "Factor used to reduce retention rates in the hypolimnion relatively to the epilimnion.")
	}
	
	var(epi.water.oc, [k g], [m g, l-1], "Epilimnion DOC")  @initial_conc { init_doc }
	var(hyp.water.oc, [k g], [m g, l-1], "Hypolimnion DOC") @initial_conc { init_doc }
	
	var(epi.water.sed.oc, [k g], "Epilimnion POC") @show_conc(epi.water, [m g, l-1])
	var(hyp.water.sed.oc, [k g], "Hypolimnion POC") @show_conc(hyp.water, [m g, l-1])
	
	var(epi.water.toc, [m g, l-1], "Epilimnion TOC") {   conc(oc) + conc(sed.oc)*conc(sed)   }
	
	flux(epi.water.oc, out, [k g, day-1], "Epilimnion DOC net loss") {
		ret := q10_adjust(hl_to_rate(lake_doc_hl), 20.0[deg_c], temp, lake_doc_q10),
		oc * ret
	} @no_carry  # So that it doesn't make C-bound contaminants disappear.
	
	flux(hyp.water.oc, out, [k g, day-1], "Hypolimnion DOC net loss") {
		ret := q10_adjust(hl_to_rate(lake_doc_hl), 20.0[deg_c], temp, lake_doc_q10),
		oc * ret * hyp_ret
	} @no_carry # So that it doesn't make C-bound contaminants disappear.
}

preamble("SuperEasyC-Sediments dimensions", version(0, 0, 1),
	lake_sed : compartment
) {
	par_group("Lake sediments") {
		th : par_real("Lake bed porosity", [], 0.6)
		dz : par_real("Lake bed active layer thickness", [m], 0.1)
	}
}

module("SuperEasyC-Sediments", version(0, 0, 1),
	lake_sed : compartment,
	water : quantity,
	sed : quantity,
	oc : quantity,
	sedpars : preamble
) {
	
	par_group("Lake sediment C", lake_sed) {
		init_oc : par_real("Initial lake bed oc concentration", [g, k g-1], 0.1) #TODO: Instead just use the conc from the TOC module?
		bed_doc : par_real("Pore water DOC concentration", [m g, l-1], 5)
	}
	
	sed_dens : constant("Sediment density", [k g, m-3], 2600)

	var(lake_sed.sed, [k g, m-2], "Lake bed sediment mass") @initial { dz*(1 - th)*sed_dens }
	
	var(lake_sed.sed.oc, [k g, m-2], "Lake bed POC") @initial_conc { init_oc ->> }
	
	var(lake_sed.water, [m m], "Lake bed pore water") @override{ th*dz->> }
	var(lake_sed.water.oc, [k g, m-2], [m g, l-1], "Lake bed pore water DOC") @override_conc { bed_doc }
	
	flux(lake_sed.sed, out, [k g, m-2, day-1], "Sediment burial") {
		in_flux(sed)->>
	}
}




/*
#TODO: Try to get P exchange between lake bed and lake to work again.
	par_group("Particles lake-specific", epi) {
		init_sed_p : par_real("Initial bottom sediment P concentration", [m g, g-1], 0)
		sed_p_release : par_real("Sediments P release", [m-2, day-1], 0)
	}
	
	var(bot.phos, [k g], "Lake bottom sediment phosphorous") @initial { epi.area * sed_z * sed_dens * init_sed_p ->> }
	
	flux(epi.water.sed.phos, bot.phos, [k g, day-1], "Epilimnion-sediment P exchange") {
		(epi.area - hyp.area)*(sett_vel*conc(sed)*conc(sed.phos)->[k g, m-2, day-1] - bot.phos*sed_p_release)
	}
	flux(hyp.water.sed.phos, bot.phos, [k g, day-1], "Hypolimnion-sediment P exchange") {
		hyp.area*(sett_vel*conc(sed)*conc(sed.phos)->[k g, m-2, day-1])
	}
	
	p_dens : property("P density")
	var(bot.p_dens, [m g, g-1], "Sediment P density") {
		#Shouldn't use epi area since it fluctuates. A_surf maybe.
		bot.phos / (sed_dens * sed_z * epi.area) ->>
	}

*/