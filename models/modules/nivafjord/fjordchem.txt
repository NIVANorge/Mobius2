

preamble("NIVAFjord chemistry rates", version(0, 0, 0)) {
	
	par_group("Oxygen") {
		bubble   : par_real("Bubble formation coefficient", [day-1], 0, 0, 1)
		ox_th    : par_real("Oxicity threshold", [m g, l-1], 2, 0, 5)
	}
	
	par_group("Microbes") {
		decompQ10      : par_real("Decomposition Q10", [], 1.2, 1, 4, "Adjustment of rate with 10°C change in temperature")
		maxdecomp_20   : par_real("Maximal decomposition rate at 20°C", [day-1], 0.01, 0, 1)
		maxdenitr_20   : par_real("Maximal denitrification rate at 20°C", [day-1], 0.01, 0, 1)
		#halfsat_o2_mic : par_real("Microbial half-saturation concentration O₂", [m mol, m-3], 1.23e-2, 0, 1e-1)
		O2toC          : par_real("Molar O₂/C ratio in respiration", [], 1, 0.5, 1)
		
		n_min          : par_real("N mineralization and nitrification rate modifier", [], 1, 0, 10)
		p_min          : par_real("P mineralization modifier", [], 1, 0, 10)
		
		n_denit_th     : par_real("NO3 threshold for denitrification", [m g, l-1], 0.1, 0, 1) #TODO: Better default values.
		
		# This one isn't necessarily microbial, but it is just convenient to have it in this group.
		diss_r   : par_real("POM dissolution rate", [day-1], 0.001, 0, 1)
	}
	
	par_group("P desorption / adsorption") {
		k_sorp         : par_real("PO4 sorption coefficient", [l, m g-1], 1e-4, 0, 0.1)
		r_sorp         : par_real("PO4 sorption rate", [day-1], 0.01, 0, 1)
	}
	
	ox_fac    : property("Oxicity factor")
	temp_fac  : property("Temperature factor")
	denit_rat : property("Denitrification rate")
	min_rat   : property("Mineralization rate")
}


module("NIVAFjord chemistry", version(0, 0, 5),
	air   : compartment,
	basin : compartment,
	layer : compartment,
	sediment : compartment,
	water : quantity,
	heat  : quantity,
	o2    : quantity,
	ice   : quantity,
	oc    : quantity,
	din   : quantity,
	on    : quantity,
	phos  : quantity,
	op    : quantity,
	sed   : quantity,
	phyt  : quantity,
	zoo   : quantity,
	temp  : property,
	salin : property,
	wind  : property,
	z     : property,
	dz    : property,
	indicator : property,
	attn  : property,
	precip : property,
	area   : property,
	A     : par_real,
	vert  : connection,
	sw_vert : connection,
	chem_par : preamble
) {
	#TODO: Would be nice to unify easychem and fjordchem a bit more, maybe some shared code.
	
	par_group("Initial chem", layer) {
		init_O2  : par_real("Initial O₂ saturation", [], 1, 0, 1)
		init_DOC : par_real("Initial DOC concentration", [m g, l-1], 0, 0, 100)
	}
	
	par_group("Light") {
		attn0    : par_real("Diffuse attenuation coefficent (clear water)", [m -1], 0.2, 0.01, 1)
		shade_f  : par_real("Shading factor", [m-1, l, m g-1], 0.02, 0.01, 0.1, "Shading provided by suspended particles and DOM")
	}
	
	par_group("Suspended particles") {
		sett_vel : par_real("Settling velocity", [m, day-1], 2, 0, 1)
	}
	
	par_group("Phytoplankton") {
		phyt_eq_20    : par_real("Chl-a of phyto at equilibrium", [m g, l-1], 0.01, 0, 5, "Assuming 20°C and no nutrient or light limitations.")
		phyt_q10      : par_real("Q10 of Phyto equilibrium", [], 2, 1, 4, "Adjustment of rate with 10°C change in temperature")
		phyt_turnover : par_real("Phytoplankton turnover rate", [day-1], 0.2, 0.05, 0.4)
		
		iopt       : par_real("Optimal PAR intensity", [W, m-2], 100, 50, 250)
		alpha      : par_real("Half-saturation for nutrient uptake", [m mol, m-3], 1.65625, 1, 10)
		phyt_cn    : par_real("Molar C/N ratio in Phytoplankton", [], 6.625, 1, 100, "The default is the Redfield ratio")
		phyt_cp    : par_real("Molar C/P ratio in Phytoplankton", [], 106, 50, 200, "The default is the Redfield ratio")
		excr       : par_real("Phytoplankton excretion rate", [day-1], 0.01, 0, 0.1)
		
		chl_a_f    : par_real("Chl-a fraction", [perc], 2, 1.5, 3.7, "How large a fraction of the phytoplankton mass is chlorophyll a")
	}
	
	
	load("stdlib/basic_math.txt", library("Response"))
	load("stdlib/seawater.txt", library("Sea oxygen"))
	load("stdlib/physiochemistry.txt", library("Chemistry"))
	
	# TODO: Initial states for all these:
	# Main variables:
	var(layer.water.o2, [k g], [m g, l-1], "Layer O₂") @initial_conc { o2_saturation(temp, salin)*init_O2*o2_mol_mass->> }
	
	var(layer.water.oc, [k g], [m g, l-1], "Layer DOC") @initial_conc { init_DOC }
	
	var(layer.water.din, [k g], [m g, l-1], "Layer DIN")
	
	var(layer.water.on, [k g], [m g, l-1], "Layer DON")
	
	var(layer.water.phos, [k g], [m g, l-1], "Layer DIP")
	
	var(layer.water.op, [k g], [m g, l-1], "Layer DOP")
	
	var(layer.water.sed, [k g], [m g, l-1], "Layer suspended sediments")
	
	var(layer.water.sed.oc, [k g], [g, k g-1], "Layer POC") @show_conc(layer.water, [m g, l-1])
	
	var(layer.water.sed.phos, [k g], [g, k g-1], "Layer PIP") @show_conc(layer.water, [m g, l-1])
	
	var(layer.water.sed.op, [k g], [g, k g-1], "Layer POP") @show_conc(layer.water, [m g, l-1])
	
	var(layer.water.sed.on, [k g], [g, k g-1], "Layer PON") @show_conc(layer.water, [m g, l-1])
	
	p_vel     : property("O₂ piston velocity")
	o2satconc : property("O₂ saturation concentration")
	o2sat     : property("O₂ saturation")
	
	var(basin.p_vel, [c m, hr-1]) {
		o2_piston_velocity(air.wind, layer.water.temp[vert.top])
	}
	
	var(layer.water.o2satconc, [m g, l-1]) {
		o2_saturation(temp, salin)*o2_mol_mass -> [m g, l-1]
	} @no_store

	var(layer.water.o2sat, []) {
		conc(layer.water.o2) / layer.water.o2satconc
	}
	
	flux(out, layer.water.o2[vert.top], [k g, day-1], "Precipitation O₂") {
		precip_saturation := 0.9, # Probably ok estimate? Not extremely important in any case.
		conc := precip_saturation*o2_saturation(air.temp, 0)*o2_mol_mass,
		air.precip*A[vert.top]*conc->>
	}

	flux(layer.water.o2[vert.top], out,  [k g, day-1], "O₂ gas exchange at surface") {
		(!basin.ice.indicator) * basin.p_vel*(conc(o2[vert.top]) - o2satconc[vert.top])*A[vert.top] ->>
	}
	
	flux(layer.water.o2, out, [k g, day-1], "O₂ bubble formation") {
		pressure_corr := (1 + 0.476[m-1]*z[vert.above]),
		satconc := o2satconc*pressure_corr,
		max(0, bubble*(conc(o2) - satconc)*water) ->>
	}
	
	
	# In NIVAFjord, particles settle faster when deeper because they have aggregated into larger particles. We could add that.
	flux(layer.water.sed, vert, [k g, day-1], "Layer particle settling") {
		sett_vel * conc(sed) * A[vert.below] ->>
	}
	
	flux(layer.water.sed, sediment.sed, [k g, day-1], "Layer particle settling to bottom") {
		sett_vel * conc(sed) * sediment.area ->>
	}
	
	flux(layer.water.sed.oc, layer.water.oc, [k g, day-1], "Layer POC dissolution") {
		diss_r * sed.oc
	}
	
	flux(layer.water.sed.on, layer.water.on, [k g, day-1], "Layer PON dissolution") {
		diss_r * sed.on
	}
	
	var(layer.water.attn, [], "Layer attenuation") {
		# TODO: Maybe DOC has a smaller shading effect than particles?
		att_c := attn0 + (conc(sed) + conc(phyt) + conc(oc))*shade_f,
		1 - exp(-att_c*dz)
	}
	
	f_par : constant("Fraction of PAR in SW radiation", [], 0.45)  # Photosynthetically available radiation
	
	light_lim : property("Light limitation")
	N_lim     : property("Nitrogen limitation")
	P_lim     : property("Phosphorus limitation")
	
	var(layer.water.phyt,    [k g], [m g, l-1], "Layer phytoplankton")
	var(layer.water.phyt.oc, [k g], "Phytoplankton C") @override_conc { 1 } # Phyto is measured in C equivalents here.
	var(layer.water.phyt.on, [k g], "Phytoplankton N") @override_conc { 1/cn_molar_to_mass_ratio(phyt_cn) }
	var(layer.water.phyt.op, [k g], "Phytoplankton P") @override_conc { 1/cp_molar_to_mass_ratio(phyt_cp) }
	
	
	var(layer.water.phyt.light_lim, []) {
		par_sw := in_flux(sw_vert, layer.water.heat)*(1 - f_par)/A -> [W, m-2],
		f := par_sw/max(0.5*par_sw, iopt),
		f*exp(1 - f)
	} @no_store
	
	var(layer.water.phyt.N_lim, []) {
		#NOTE: Use N molar mass instead of NO3 since that is what we track in the model (e.g. DIN is modeled as mg(N)/l)
		cmol := phyt_cn*conc(water.din)/n_mol_mass->[m mol, m-3],
		cmol^2 / ((alpha/phyt_cn)^2 + cmol^2)
	} @no_store
	
	var(layer.water.phyt.P_lim, []) {
		#NOTE: Use P molar mass instead of PO4 since that is what we track in the model
		cmol := conc(water.phos)/p_mol_mass->[m mol, m-3],
		cmol^2 / ((alpha/phyt_cp)^2 + cmol^2)
	} @no_store
	
	equi : property("Equilibrium concentration")
	
	var(layer.water.phyt.equi, [m g, l-1], "Phytoplankton equilibrium concentration") {
		phyt_eq := q10_adjust(phyt_eq_20, 20[deg_c], temp, phyt_q10) / (chl_a_f->[]),
		phyt_eq*min(light_lim, min(N_lim, P_lim))
	} @no_store
	
	fix : property("Photosynthetic C fixation")
	chl_a : property("Chlorophyll-a")
	resp : property("Bacterial respiration")
	
	var(layer.water.phyt.fix, [k g, day-1]) {
		phyt_turnover*equi*water ->>
	}
	
	flux(out, layer.water.phyt, [k g, day-1], "Phytoplankton growth") {   fix   }
	flux(layer.water.din, layer.water.phyt.on, [k g, day-1], "Phytoplankton growth N uptake") {   phyt.fix/cn_molar_to_mass_ratio(phyt_cn)   }
	flux(layer.water.phos, layer.water.phyt.op, [k g, day-1], "Phytoplankton growth P uptake") {   phyt.fix/cp_molar_to_mass_ratio(phyt_cp)   }
	
	flux(layer.water.phyt,    layer.water.oc, [k g, day-1], "Phytoplankton C excretion") { excr*phyt }
	flux(layer.water.phyt.on, layer.water.on, [k g, day-1], "Phytoplankton N excretion") { excr*phyt.on }
	flux(layer.water.phyt.op, layer.water.op, [k g, day-1], "Phytoplankton P excretion") { excr*phyt.op }
	
	phyt_death_anox : constant("Phytoplankton increased death rate from anoxicity", [], 10) # Parametrize?
	
	flux(layer.water.phyt, layer.water.sed, [k g, day-1], "Phytoplankton death")  {
		wd := 0.5,
		o2_factor := s_response(conc(o2), (1-wd)*ox_th, (1+wd)*ox_th, phyt_death_anox, 1),
		phyt_turnover*phyt*o2_factor
	}
	
	flux(out, layer.water.o2, [k g, day-1], "Layer O₂ photosynthesis") {   phyt.fix*O2toC*o2_mol_mass/c_mol_mass   }
	
	var(layer.water.chl_a, [m g, l-1], "Layer chl-a") {   conc(phyt)*chl_a_f->>   }
	
	sed_vel : property("Sedimentation velocity")
	
	var(layer.water.phyt.sed_vel, [m, day-1], "Phytoplankton sinking velocity") {
		c_max := 0.4[m g, l-1], #Parametrize
		min_sett := 0.1, #Parametrize
		
		nut_lim := min(N_lim, P_lim),
		conc_lim := max(0, (c_max - conc(phyt))/c_max),
		totlim := 1-min(nut_lim, conc_lim),
		
		sett_vel*s_response(totlim, 0, 1, min_sett, 1)->>
	}
	
	flux(layer.water.phyt, vert, [k g, day-1], "Phytoplankton sinking") {
		conc(phyt)*sed_vel*A[vert.below]->>
	}
	
	flux(layer.water.phyt, sediment.sed, [k g, day-1], "Phytoplankton settling to sediments") {
		conc(phyt)*sed_vel*sediment.area ->>
	}
	
	
	
	# TODO: Direct deposition of DIN to surface(?)
	
	
	var(layer.water.ox_fac, []) {
		#0.5*(1 + tanh((conc(o2) - ox_th)=>[]))
		
		wd := 1,
		s_response(conc(o2), (1-wd)*ox_th, (1+wd)*ox_th, 0, 1)
	} @no_store
	
	
	var(layer.water.temp_fac, []) {
		q10_adjust(1, 20[deg_c], temp, decompQ10)
	} @no_store
	
	var(layer.water.min_rat, [day-1], "OM mineralization rate") {
		ox_fac*temp_fac*maxdecomp_20
	} @no_store
	
	flux(layer.water.oc, out, [k g, day-1], "DOC mineralization") {
		oc*min_rat
	}
	
	flux(layer.water.sed.oc, out, [k g, day-1], "POC mineralization") {
		sed.oc*min_rat
	}
	
	flux(layer.water.on, layer.water.din, [k g, day-1], "DON mineralization and nitrification") {
		on*min_rat*n_min
	}
	
	flux(layer.water.sed.on, layer.water.din, [k g, day-1], "PON mineralization and nitrification") {
		sed.on*min_rat*n_min
	}
	
	# TODO: Should we assume PO4 formation is O2 limited?
	flux(layer.water.op, layer.water.phos, [k g, day-1], "DOP mineralization") {
		op*temp_fac*maxdecomp_20*p_min
	}
	
	flux(layer.water.sed.op, layer.water.phos, [k g, day-1], "POP mineralization") {
		sed.op*temp_fac*maxdecomp_20*p_min
	}
	
	# TODO: Finish oxygen budget. Has to take into account all decay processes (including N, P).
	# How take into account existing oxygen content of DOM?
	flux(layer.water.o2, out, [k g, day-1], "O₂ microbial consumption") {
		  (oc + sed.oc)*min_rat*(o2_mol_mass/c_mol_mass)*O2toC    
		+ (on + sed.on)*min_rat*n_min*(o2_mol_mass/n_mol_mass)*1.5    # ON -> NH4 -> NO3   #TODO: Should the 1.5 be parametrizable?
	}
	
	var(layer.water.denit_rat, [day-1], "Denitrification rate") {
		wd := 0.5,
		n_fac := s_response(conc(din)/n_denit_th, (1-wd), (1+wd), 0, 1),
		(1-ox_fac)*temp_fac*maxdenitr_20*n_fac
	} @no_store

	
	flux(layer.water.oc, out, [k g, day-1], "DOC mineralization by denitrification") {
		water.oc*denit_rat
	}
	
	flux(layer.water.sed.oc, out, [k g, day-1], "POC mineralization by denitrification") {
		water.sed.oc*denit_rat
	}
	
	flux(layer.water.din, out, [k g, day-1], "NO3 denitrification consumption") {
		bo2 := (water.oc + water.sed.oc)*denit_rat*O2toC*o2_mol_mass/c_mol_mass,  # Bacterial O2 demand in nitrification
		bo2*(3./2.)*n_mol_mass/o2_mol_mass
	}
	
	flux(layer.water.phos, layer.water.sed.phos, [k g, day-1], "PO4 desorption / adsorption to particles") {
		epc0 := ox_fac*conc(sed.phos)/k_sorp -> [m g, l-1],
		epc0_ := min(epc0, 0[m g, l-1]), # We get numeric instability if we don't put the 'min(.., 0)' there.
		r_sorp*(conc(water.phos) - epc0_)*water ->>
	}
	
	
	# Processes:
	
	# Should probably have them in a separate module so that it could be reused for sediments.
	
	# Oxic:
	#  OC, O2  -> CO2  Mineralization
	#  ON, O2  -> NH4 -> NO3  Mineralization, nitrification.
	#  OP, O2  -> PO4
	#  NH4, O2 ->  NO3     Nitrification
	
	# Anoxic, with NO3:
	#  OC, NO3 -> CO2, N2   Denitrification
	
	# Anoxic without NO3:
	#  Sulfate (and Mn) reduction. (In NIVAFjord).
	
	# PO4 release from / adsorption to particles
	
	# TODO:
		# sulfate reduction, maybe zooplankton.
}



