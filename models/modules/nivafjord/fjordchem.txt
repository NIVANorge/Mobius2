

preamble("NIVAFjord chemistry rates", version(0, 0, 0)) {
	
	par_group("Oxygen") {
		bubble         : par_real("Bubble formation coefficient", [day-1], 0, 0, 1)
		ox_th          : par_real("Oxicity threshold", [m g, l-1], 2, 0, 5) # This should maybe be in "Microbes"
	}
	
	par_group("Microbes") {
		decompQ10      : par_real("Decomposition Q10", [], 1.2, 1, 4, "Adjustment of rate with 10°C change in temperature")
		maxdecomp_20   : par_real("Maximal decomposition rate at 20°C", [day-1], 0.01, 0, 1)
		maxdenitr_20   : par_real("Maximal denitrification rate at 20°C", [day-1], 0.01, 0, 1)
		#halfsat_o2_mic : par_real("Microbial half-saturation concentration O₂", [m mol, m-3], 1.23e-2, 0, 1e-1)
		O2toC          : par_real("Molar O₂/C ratio in respiration", [], 1, 0.5, 1)
		
		n_min          : par_real("N mineralization and nitrification rate modifier", [], 1, 0, 10)
		p_min          : par_real("P mineralization modifier", [], 1, 0, 10)
		
		n_denit_th     : par_real("NO3 threshold for denitrification", [m g, l-1], 0.1, 0, 1) #TODO: Better default values.
		
		# This one isn't necessarily microbial, but it is just convenient to have it in this group.
		diss_r         : par_real("POM dissolution rate", [day-1], 0.001, 0, 1)
	}
	
	par_group("P desorption / adsorption") {
		k_sorp         : par_real("PO4 sorption coefficient", [l, m g-1], 1e-4, 0, 0.1)
		r_sorp         : par_real("PO4 sorption rate", [day-1], 0.01, 0, 1)
	}
	
	ox_fac    : property("Oxicity factor")
	temp_fac  : property("Temperature factor")
	denit_rat : property("Denitrification rate")
	min_rat   : property("Mineralization rate")
}


module("NIVAFjord chemistry", version(0, 0, 5),
	air   : compartment,
	#basin : compartment,
	layer : compartment,
	sediment : compartment,
	water : quantity,
	o2    : quantity,
	co2   : quantity,
	ch4   : quantity,
	oc    : quantity,
	din   : quantity,
	on    : quantity,
	phos  : quantity,
	op    : quantity,
	sed   : quantity,
	phyt  : quantity,
	chl_a : property,
	tn    : property,
	tp    : property,
	temp  : property,
	salin : property,
	z     : property,
	dz    : property,
	attn  : property,
	area   : property,
	cos_z : property,
	sw    : property,
	o2satconc : property,
	vert  : connection,
	chem_par : preamble,
	dims     : preamble,
	
	compute_dic : par_bool,
) {
	#TODO: Would be nice to unify easychem and fjordchem a bit more, maybe some shared code.
	# Esp. for surface O2 exchange and maybe microbes and phyto (into separate modules).
	
	par_group("Initial chem", layer) {
		init_O2  : par_real("Initial O₂ saturation", [], 1, 0, 1)
		init_DOC : par_real("Initial DOC concentration", [m g, l-1], 0, 0, 100)
		init_ss  : par_real("Initial suspended sediment concentration", [m g, l-1], 0, 0, 100)
		init_foc : par_real("Initial particle organic carbon content", [g, k g-1], 0, 0, 1000)
		#init_zoo : par_real("Initial zooplankton concentration", [m g, l-1], 0.0001, 0, 0.1)
	}
	
	par_group("Light") {
		attn0    : par_real("Diffuse attenuation coefficent (clear water)", [m -1], 0.2, 0.01, 1)
		shade_f  : par_real("Shading factor", [m-1, l, m g-1], 0.02, 0.01, 0.1, "Shading provided by suspended particles and DOM")
	}
	
	par_group("Suspended particles") {
		sett_vel : par_real("Settling velocity", [m, day-1], 2, 0, 1)
	}
	
	
	load("stdlib/basic_math.txt", library("Basic"), library("Response"))
	load("stdlib/seawater.txt", library("Sea oxygen"))
	load("stdlib/physiochemistry.txt", library("Chemistry"), library("Water utils"))
	load("stdlib/atmospheric.txt", library("Radiation"))
	
	# TODO: Initial states for all these:
	# Main variables:
	var(layer.water.o2, [k g], [m g, l-1], "Layer O₂") @initial_conc { o2_saturation_concentration(temp, salin)*init_O2*o2_mol_mass->> }
	
	var(layer.water.oc, [k g], [m g, l-1], "Layer DOC") @initial_conc { init_DOC }
	
	option(compute_dic) {
		var(layer.water.co2, [k g], [m g, l-1], "Layer CO₂")
		
		var(layer.water.ch4, [k g], [m g, l-1], "Layer CH₄")
	}
	
	var(layer.water.din, [k g], [m g, l-1], "Layer DIN")
	
	var(layer.water.on, [k g], [m g, l-1], "Layer DON")
	
	var(layer.water.phos, [k g], [m g, l-1], "Layer DIP")
	
	var(layer.water.op, [k g], [m g, l-1], "Layer DOP")
	
	var(layer.water.sed, [k g], [m g, l-1], "Layer suspended sediments") @initial_conc { init_ss }
	
	var(layer.water.sed.oc, [k g], [g, k g-1], "Layer POC") @show_conc(layer.water, [m g, l-1]) @ initial_conc { init_foc }
	
	var(layer.water.sed.phos, [k g], [g, k g-1], "Layer PIP") @show_conc(layer.water, [m g, l-1])
	
	var(layer.water.sed.op, [k g], [g, k g-1], "Layer POP") @show_conc(layer.water, [m g, l-1])
	
	var(layer.water.sed.on, [k g], [g, k g-1], "Layer PON") @show_conc(layer.water, [m g, l-1])
	
	var(layer.water.tn, [m g, l-1], "Layer TN") {
		conc(din) + conc(on) + conc(sed)*conc(sed.on)->>
	}
	
	var(layer.water.tp, [m g, l-1], "Layer TP") {
		conc(phos) + conc(op) + conc(sed)*(conc(sed.op) + conc(sed.phos))->>
	}

	o2sat     : property("O₂ saturation")
	
	var(layer.water.o2satconc, [m g, l-1]) {
		o2_saturation_concentration(temp, salin)*o2_mol_mass ->>
	} #@no_store
	
	var(layer.water.o2sat, []) {
		conc(layer.water.o2) / layer.water.o2satconc
	}
	
	flux(layer.water.o2, out, [k g, day-1], "O₂ bubble formation") {
		pressure_corr := (1 + 0.476[m-1]*z[vert.above]),
		satconc := o2satconc*pressure_corr,
		max(0, bubble*(conc(o2) - satconc)*water) ->>
	}
	
	
	# In the original NIVAFjord, particles settle faster when deeper because they have aggregated into larger particles. We could add that.
	flux(layer.water.sed, vert, [k g, day-1], "Layer particle settling") {
		sett_vel * conc(sed) * A[vert.below] ->>
	}
	
	flux(layer.water.sed, sediment.sed, [k g, day-1], "Layer particle settling to bottom") {
		sett_vel * conc(sed) * sediment.area ->>
	}
	
	flux(layer.water.sed.oc, layer.water.oc, [k g, day-1], "Layer POC dissolution") {
		diss_r * sed.oc
	}
	
	flux(layer.water.sed.on, layer.water.on, [k g, day-1], "Layer PON dissolution") {
		diss_r * sed.on
	}
	
	var(layer.water.attn, [], "Layer attenuation") {
		# TODO: Maybe DOC has a smaller shading effect than particles?
		# Also phyto type should have separate shading values.
		att_c := attn0 + (conc(sed) + aggregate(conc(phyt)) + conc(oc))*shade_f,
		cz := max(0.01, refract(air.cos_z, refraction_index_water)),
		#cz := max(0.01, air.cos_z),
		th := dz / cz, # Length traveled through the layer by a sun beam taking zenith angle into account.
		#th := dz,
		1 - exp(-att_c*th)
	}

	# TODO: Direct deposition of DIN to surface(?)
	
	var(layer.water.ox_fac, []) {
		#0.5*(1 + tanh((conc(o2) - ox_th)=>[]))
		
		wd := 1,
		s_response(conc(o2), (1-wd)*ox_th, (1+wd)*ox_th, 0, 1)
	} #@no_store
	
	var(layer.water.temp_fac, []) {
		q10_adjust(1, 20[deg_c], temp, decompQ10)
	} @no_store
	
	var(layer.water.min_rat, [day-1], "OM mineralization rate") {
		ox_fac*temp_fac*maxdecomp_20
	} @no_store
	
	flux(layer.water.oc, out, [k g, day-1], "DOC mineralization") {
		oc*min_rat
	} @no_carry # In case we use the tox module, the mineralization should not destroy the contaminant.
	
	flux(layer.water.sed.oc, out, [k g, day-1], "POC mineralization") {
		sed.oc*min_rat
	} @no_carry # In case we use the tox module, the mineralization should not destroy the contaminant.
	
	flux(layer.water.on, layer.water.din, [k g, day-1], "DON mineralization and nitrification") {
		on*min_rat*n_min
	}
	
	flux(layer.water.sed.on, layer.water.din, [k g, day-1], "PON mineralization and nitrification") {
		sed.on*min_rat*n_min
	}
	
	# TODO: Should we assume PO4 formation is O2 limited?
	flux(layer.water.op, layer.water.phos, [k g, day-1], "DOP mineralization") {
		op*temp_fac*maxdecomp_20*p_min
	}
	
	flux(layer.water.sed.op, layer.water.phos, [k g, day-1], "POP mineralization") {
		sed.op*temp_fac*maxdecomp_20*p_min
	}

	flux(layer.water.o2, out, [k g, day-1], "O₂ microbial consumption") {
		  (oc + sed.oc)*min_rat*(o2_mol_mass/c_mol_mass)*O2toC   
		+ (on + sed.on)*min_rat*n_min*(o2_mol_mass/n_mol_mass)*1.5    # ON -> NH4 -> NO3   #TODO: Should the 1.5 be parametrizable?
	}
	
	option(compute_dic) {
		flux(out, layer.water.co2, [k g, day-1], "Microbial CO2 production") {
			(oc + sed.oc)*(min_rat+denit_rat) # NOTE: CO2 is in kg(C)
		}
	}
	
	var(layer.water.denit_rat, [day-1], "Denitrification rate") {
		wd := 0.5,
		n_fac := s_response(conc(din)/n_denit_th, (1-wd), (1+wd), 0, 1),
		(1-ox_fac)*temp_fac*maxdenitr_20*n_fac
	} @no_store

	
	flux(layer.water.oc, out, [k g, day-1], "DOC mineralization by denitrification") {
		water.oc*denit_rat
	} @no_carry
	
	flux(layer.water.sed.oc, out, [k g, day-1], "POC mineralization by denitrification") {
		water.sed.oc*denit_rat
	} @no_carry
	
	flux(layer.water.din, out, [k g, day-1], "NO3 denitrification consumption") {
		bo2 := (water.oc + water.sed.oc)*denit_rat*O2toC*o2_mol_mass/c_mol_mass,  # Bacterial O2 demand in nitrification
		bo2*1.5*n_mol_mass/o2_mol_mass
	}
	
	flux(layer.water.phos, layer.water.sed.phos, [k g, day-1], "PO4 adsorption / desorption to particles") {
		epc0 := conc(sed.phos)/k_sorp -> [m g, l-1],
		epc0_ := min(epc0, 0[m g, l-1]), # We get numeric instability if we don't put the 'min(.., 0)' there.
		
		# If there is high oxicity, use regular partitioning. With low oxicity, PO4 leeches out. (TODO: should maybe be a different rate)
		r_sorp*(ox_fac*(conc(water.phos) - epc0_)*water->[k g] - (1-ox_fac)*sed.phos)
	}
	
	
	# Processes:
	
	# Oxic:
	#  OC, O2  -> CO2  Mineralization
	#  ON, O2  -> NH4 -> NO3  Mineralization, nitrification.
	#  OP, O2  -> PO4
	#  NH4, O2 ->  NO3     Nitrification
	
	# Anoxic, with NO3:
	#  OC, NO3 -> CO2, N2   Denitrification
	
	# Anoxic without NO3:
	#  Sulfate (and Mn) reduction. (In NIVAFjord).
	
	# PO4 release from / adsorption to particles
	
	# TODO:
		# sulfate reduction, maybe zooplankton.
}



