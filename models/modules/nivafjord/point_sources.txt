
module("NIVAFjord point sources", version(0, 0, 0),
	layer : compartment,
	water : quantity,
	din   : quantity,
	on    : quantity,
	phos  : quantity,
	sed   : quantity,
	oc    : quantity,
	o2    : quantity,
	heat  : quantity,
	temp  : property,
) {
"""
This is a module for point source inputs to NIVAFjord.
"""

	par_group("Point sources", layer) {
		eff_q  : par_real("Water point source", [m 3, year-1], 0)
		eff_in : par_real("DIN point source", [ton, year-1], 0) 
		eff_on : par_real("DON point source", [ton, year-1], 0)
		eff_p  : par_real("DIP point source", [ton, year-1], 0)
		eff_ss : par_real("SS point source", [ton, year-1], 0)
		ss_c   : par_real("SS point source C fraction", [g, k g-1], 0)
		o2sat  : par_real("Point source water O2 saturation", [], 1)
	}
	
	load("stdlib/seawater.txt", library("Sea oxygen"))
	load("stdlib/physiochemistry.txt", library("Chemistry"))
	
	flux(out, layer.water, [m 3, day-1], "Point source water to layer") {  eff_q/time.days_this_year  }
	
	flux(out, layer.water.heat, [J, day-1], "Point source heat to layer") {
		conc(layer.water.heat)*eff_q/time.days_this_year  # Assume same temperature in effluent and bay. TODO: This is not always the case.
	}
	
	flux(out, layer.water.o2, [k g, day-1], "Point source O2 to layer") {
		eff_temp := layer.water.temp,
		eff_salin := 0,
		o2c := o2sat*o2_mol_mass*o2_saturation_concentration(eff_temp, eff_salin),
		o2c*eff_q/time.days_this_year->>
	}

	# TODO: CO2, CH4 content of effluent water?
	
	flux(out, layer.water.din, [k g, day-1], "Point source DIN to layer") {  eff_in/time.days_this_year->>  }
	
	flux(out, layer.water.on, [k g, day-1], "Point source DON to layer") {  eff_on/time.days_this_year->>  }
	
	flux(out, layer.water.phos, [k g, day-1], "Point source DIP to layer") {  eff_p/time.days_this_year->>  }
	
	flux(out, layer.water.sed, [k g, day-1], "Point source suspended solids to layer") {  eff_ss/time.days_this_year->>  }
	
	flux(out, layer.water.sed.oc, [k g, day-1], "Point source POC to layer") {  eff_ss*ss_c/time.days_this_year->> }
	
	# TODO: What about carbon content of the effluent suspended solids
}

module("NIVAFjord dynamic point sources", version(0, 0, 1),
	air   : compartment,
	ps    : compartment,
	layer : compartment,
	water : quantity,
	din   : quantity,
	on    : quantity,
	op    : quantity,
	phos  : quantity,
	sed   : quantity,
	oc    : quantity,
	o2    : quantity,
	heat  : quantity,
	temp  : property,
	psc   : connection,
) {

	load("stdlib/physiochemistry.txt", library("Water utils"), library("Chemistry"))
	load("stdlib/seawater.txt", library("Sea oxygen"))

	eff_q_series : property("Water point source input")
	eff_in_conc  : property("DIN point source concentration")
	eff_on_conc  : property("DON point source concentration")
	eff_oc_conc  : property("DOC point source concentration")
	eff_p_conc   : property("DIP point source concentration")
	eff_op_conc  : property("DOP point source concentration")
	eff_ss_conc  : property("SS point source concentration")
	
	par_group("Point sources", ps) {
		ss_c   : par_real("SS point source C fraction", [g, k g-1], 0)
		o2sat  : par_real("Point source water O2 saturation", [], 1)
		is_on  : par_bool("This point source is active", true)
	}
	
	var(ps.water, [m 3], "Point source water") @override { 1[m 3] }
	
	# This can be overridden if desired.
	var(ps.water.temp, [deg_c], "Point source temperature") {
		max(0.5[deg_c], air.temp)
	}
	
	var(ps.eff_q_series, [m 3, s-1])
	var(ps.eff_in_conc, [m g, l-1])
	var(ps.eff_on_conc, [m g, l-1])
	var(ps.eff_oc_conc, [m g, l-1])
	var(ps.eff_p_conc, [m g, l-1])
	var(ps.eff_op_conc, [m g, l-1])
	var(ps.eff_ss_conc, [m g, l-1])
	
	flux(ps.water, psc, [m 3, s-1], "Point source water") {
		is_on * eff_q_series
	}
	
	var(ps.water.heat, [J], [J, m-3], "Point source heat") @override_conc { water_temp_to_heat(water, temp)/water }
	
	var(ps.water.o2, [k g], [m g, l-1], "Point source O₂") @override_conc { 
		eff_salin := 0,
		o2sat*o2_mol_mass*o2_saturation_concentration(temp, eff_salin)->>
	}
	
	var(ps.water.din, [k g], [m g, l-1], "Point source DIN") @override_conc { eff_in_conc }
	
	var(ps.water.on, [k g], [m g, l-1], "Point source DON") @override_conc { eff_on_conc }
	
	var(ps.water.oc, [k g], [m g, l-1], "Point source DOC") @override_conc { eff_oc_conc }
	
	var(ps.water.phos, [k g], [m g, l-1], "Point source DIP") @override_conc { eff_p_conc }
	
	var(ps.water.op, [k g], [m g, l-1], "Point source DOP") @override_conc { eff_op_conc }
	
	var(ps.water.sed, [k g], [m g, l-1], "Point source SS") @override_conc { eff_ss_conc }
	
	var(ps.water.sed.oc, [k g], "Point source POC") @override_conc { ss_c->> }
}


module("NIVAFjord jet point source", version(0, 0, 1),
	air   : compartment,
	ps    : compartment,
	layer : compartment,
	water : quantity,
	#din   : quantity,
	#on    : quantity,
	#phos  : quantity,
	#sed   : quantity,
	#oc    : quantity,
	o2    : quantity,
	heat  : quantity,
	temp  : property,
	rho   : property,
	z     : property,
	#psc   : connection,
	vert  : connection,
	dims  : preamble,
) {
	#TODO: This one could maybe eventually be unified with "NIVAFjord dynamic point sources"
	
	load("stdlib/physiochemistry.txt", library("Water utils"), library("Chemistry"))
	load("stdlib/seawater.txt", library("Seawater"), library("Sea oxygen"))

	eff_q_series : property("Jet point source input")
	
	par_group("Point sources", ps) {
		jet_diam : par_real("Initial jet diameter", [m], 1, 0, 10)
		n_holes  : par_int("Number of outlet holes", [], 1, 1, 10)
		out_z    : par_real("Outlet depth", [m], 0.5, 0, 500)
		#ss_c   : par_real("SS point source C fraction", [g, k g-1], 0)
		o2sat  : par_real("Point source water O2 saturation", [], 1)
	}
	
	var(ps.water, [m 3], "Point source water") @override { 1[m 3] }
	
	# This can be overridden if desired.
	var(ps.water.temp, [deg_c], "Point source temperature") {
		max(0.5[deg_c], air.temp)
	}
	
	var(ps.water.rho, [k g, m-3], "Point source water potential density") {
		salin := 0,
		seawater_pot_dens(temp, salin)
	}
	
	var(ps.eff_q_series, [m 3, s-1])
	
	# TODO: Allow accessing input series in external_computation!
	effq2 : property("Point source 2")
	var(ps.effq2, [m 3, s-1]) { eff_q_series } @no_store
	
	ps_target : property("Point source target")
	var(ps.ps_target, [])
	q_transp : property("Jet mixing flux")
	var(layer.q_transp, [m 3, s-1])
	
	norm_z : property("Normal depth")
	var(layer.norm_z, [m]) {
		norm_z[vert.above] + dz0
	} @no_store
	
	# NOTE: The normal depth is used to position the outlet so that it doesn't bounce up and down 
	# when the water level changes. If in a later implementation we allow deeper layers to change in thickness
	# significantly, we need to do something else.
	
	external_computation("Jet mixing computation", "nivafjord_compute_jet_mixing", ps) {
		result(layer.q_transp)
		result(ps.ps_target)
		layer.norm_z
		layer.water.rho
		out_z
		ps.effq2
		ps.water.rho
		jet_diam
		n_holes
	}
	
	flux(ps.water, layer.water[vert.specific], [m 3, s-1], "Point source water") {
		eff_q_series
	} @specific {
		ps_target
	}
	
	flux(layer.water, layer.water[vert.specific], [m 3, s-1], "Jet turbulent mixing") {
		q_transp
	} @specific {
		ps.ps_target
	}
	
	var(ps.water.heat, [J], [J, m-3], "Point source heat") @override_conc { water_temp_to_heat(water, temp)/water }
	
	var(ps.water.o2, [k g], [m g, l-1], "Point source O₂") @override_conc { 
		#TODO: Could maybe be different
		eff_salin := 0,
		o2sat*o2_mol_mass*o2_saturation_concentration(temp, eff_salin)->>
	}
}


module("NIVAFjord extraction", version(0, 0, 1),
	layer : compartment,
	water : quantity
) {

	par_group("Extraction", layer) {
		ext : par_real("Extraction rate", [m 3, day-1], 0, 0, 10000)
	}
	
	flux(layer.water, out, [m 3, day-1], "Layer extraction") {
		ext
	}
}