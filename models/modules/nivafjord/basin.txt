
module("NIVAFjord basin", version(0, 0, 1),
	air       : compartment,
	basin     : compartment,
	layer     : compartment,
	sed       : compartment,
	water     : quantity,
	salt      : quantity,
	heat      : quantity,
	temp      : property,
	salinity  : property,
	precip    : property,
	pressure  : property,
	wind      : property,
	g_rad     : property,
	rho       : property,
	attn      : property,
	z         : property,
	dz        : property,
	freeze_temp : property,
	vert      : connection,
	sw_vert   : connection,
	A         : par_real,
	dz0       : par_real
) {

	load("stdlib/basic_math.txt", library("Basic"))
	load("stdlib/physiochemistry.txt", library("Water utils"), library("Basic constants"))
	load("stdlib/seawater.txt", library("Seawater"))

	var(air.temp,  [deg_c], "Air temperature")
	var(air.precip, [m m, day-1])      # TODO: Use this for something.
	var(air.wind,  [m, s-1])
	var(air.g_rad, [W, m-2])

	par_group("Mixing parameters", basin) {
		attn0  : par_real("Diffuse attenuation coefficent (clear water)", [m -1], 0.2, 0.01, 1)
		
		N0     : par_real("Brunt-Väisälä frequency reference", [s-1], 0.8e-2)
		Nmin   : par_real("Minimum B-V frequency", [s-1], 1e-4, 1e-10, 0.1)
		K0     : par_real("Mixing factor reference", [m 2, s-1], 0.5e-4, "Mixing factor at the B-V frequency reference")
		alpha  : par_real("Mixing non-linear coefficient", [], 1.4)
		
		# TODO: Find correct defaults:
		Es0    : par_real("Surface additional mixing energy", [m 2, s-3], 0)
		zshalf : par_real("Halving depth of additional mixing energy", [m], 3)
		hsfact : par_real("Diminishing rate of additional mixing energy", [m], 4)
	}
	
	# TODO: There should be a sediment compartment per layer instead..
	par_group("Sediment parameters", sed) {
		T_sed  : par_real("Deep sediment temperature", [deg_c], 4)
		dz_sed : par_real("Depth of thermally active sediment layer", [m], 10)
		k_sed  : par_real("Sediment thermal conductivity", [W, m-1, K-1], 1.3)
		C_sed  : par_real("Sediment specific heat capacity", [J, k g-1, K-1], 4000)
		rho_sed : par_real("Sediment density", [k g, m-3], 2600)
		#TODO: porosity
	}
	
	var(basin.freeze_temp, [deg_c]) { ice_formation_temperature(layer.water.salinity[vert.top])	}
	
	var(layer.dz, [m], "Layer thickness") {
		water / (A*rho_water)
	} @initial {    dz0   }
	
	var(layer.z, [m], "Depth (to bottom of layer)") {
		z[vert.above] + dz[vert.above]
	}
	
	var(layer.water, [k g], "Layer water") @initial { A*dz0*rho_water }
	
	var(layer.water.salt, [k g], [g, k g-1], "Layer salt")
		#TODO: Initial conc
		@initial_conc { salinity=>> }
	
	var(layer.water.heat, [J], "Layer thermal energy") 
		#TODO: C_water should at least be salinity dependent
		@initial_conc { C_water * (temp -> [K]) }

	var(layer.water.temp, [deg_c], "Layer temperature") {
		heat / (water*C_water) -> [deg_c]      #TODO: C_water should at least be salinity dependent
	} @initial {
		#TODO: Initial temp
		5=>>
	}
	
	var(layer.water.salinity, [], "Layer salinity") {
		conc(salt)=>>
	} @initial {
		# TODO: Initial salinity setup
		25
	}
	
	var(layer.water.rho, [k g, m-3], "Potential density") {
		seawater_pot_dens(temp, salinity)
	}
	
	ddens          : property("d(dens)")
	Nfreq          : property("Brunt-Väisälä frequency")
	Kt             : property("Tide wave mixing coefficient")
	Ks             : property("Additional mixing coefficient")
	Kw             : property("Wind mixing coefficient")
	wmix           : property("Water mixing")
	
	var(layer.water.pressure, [Pa]) {
		pressure[vert.above] + rho*grav*dz
	}
	
	var(layer.water.ddens, [k g, m-3]) {
		(rho[vert.below]-rho)
	}
	
	var(layer.water.Nfreq, [s-1]) {
		mdz := 0.5*(dz + dz[vert.below]),
		N2 := grav * ddens / (mdz*rho),
		sqrt(max(Nmin^2, N2))
	}
	
	var(layer.water.Kt, [m 2, s-1]) {
		safe_divide(K0, (Nfreq/N0)^alpha)
	}
	
	var(layer.water.Ks, [m 2, s-1]) {
		eta := exp(-(z - zshalf)/hsfact),
		Es  := Es0*eta/(1+eta),
		Es / Nfreq^2
	}
	
	var(layer.water.wmix, [k g, day-1]) {
		K := Kt + Ks + Kw,#+Kd,              # Maybe make the sum of the mixing coefficients a separate state variable.
		rho * A * K / dz ->>
	}
	
	stress         : property("Wind stress")
	emix           : property("Wind mixing energy")
	sumV           : property("Sum V above")
	potmix         : property("Potential energy needed for wind mixing")
	summix         : property("Sum used wind mixing energy")
	
	# TODO: wind stress could be moved to airsea module.
	var(basin.stress, [N, m-2]) {
		u := air.wind,
		c_stress := 1e-3*(0.8 + 0.9*u^8/(u^8 + 1e8[m 8, s-8])),
		air.rho*c_stress*u^2
	}
	
	#TODO: need to take into account of B_s in the fjord model document (?)
	var(basin.emix, [J], "Total wind mixing energy") {
		A[vert.top]*sqrt(stress^3/layer.water.rho[vert.top])*time.step_length_in_seconds
	}
	
	var(layer.water.sumV, [m 3]) {
		sumV[vert.above] + A[vert.above]*dz[vert.above]
	}
	
	var(layer.water.potmix, [J]) {
		max(0, grav*ddens*(sumV*A*dz/(sumV + A*dz))*((z+0.5*dz)/2))
	}
	
	var(layer.water.emix, [J]) {
		rem := max(0, basin.emix - summix),
		min(rem, potmix)
	}
	
	var(layer.water.summix, [J]) {
		emix[vert.above] + summix[vert.above]
	}
	
	var(layer.water.Kw, [m 2, s-1]) {
		
		rem := max(0, basin.emix - summix),
		# This one is a bit iffy..
		mixspeed := 1[m, day-1],
		
		mixspeed*dz->>                                                    if rem > 0 & potmix < 1e-20[J],
		mixspeed*dz*safe_divide(emix[vert.below], potmix[vert.below])->>  otherwise
		#mixspeed*dz->>                                                    otherwise
	}
	
	flux(layer.water, vert, [k g, day-1], "Water mixing down") { wmix }
	flux(layer.water, vert, [k g, day-1], "Water mixing up")   { -wmix }
	
	var(layer.water.attn, []) {
		coeff := attn0,  #TODO: Correct for chl-a or things like that. Probably needs to be in separate module.
		1-exp(-coeff*dz)
	}
	
	flux(layer.water.heat, sw_vert, [J, day-1], "Shortwave shine-through") {
		(in_flux(sw_vert, layer.water.heat)->[J, day-1]) * (1-attn) * A[vert.below] / A
	}
	
	var(sed.heat, [J], "Sediment heat") @initial {
		mass := A[vert.bottom]*dz_sed*rho_sed,
		C_sed * mass * (T_sed->[K])
	}
	
	var(sed.temp, [deg_c], "Sediment surface temperature") {
		mass := A[vert.bottom]*dz_sed*rho_sed,
		1*(2*heat / (mass*C_sed) - T_sed->[K]) -> [deg_c]
	}
	
	# Water-Sediment heat transfer
	
	flux(layer.water.heat[vert.bottom], sed.heat, [J, day-1], "Water-sediment heat transfer") {
		dz := dz_sed*0.2,  # Just the scaling factor for the transfer TODO: get a better estimate
		A[bottom]*(temp[bottom]->[K] - sed.temp->[K])*k_sed/dz ->>
	}
}