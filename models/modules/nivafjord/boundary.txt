
module("NIFAFjord boundary", version(0, 0, 1)) {

	/*
	z1       : property("Epilimnion thickness")
	z2diff   : property("log10(Metalimnion thickness)")
	temp_top : property("Temperature top")
	temp_bot : property("Temperature bottom")
	sal_top  : property("Salinity top")
	sal_bot  : property("Salinity bottom")
	trac_top : property("Tracer top")
	trac_bot : property("Tracer bot")
	
	var(bnd.z1, [m])
	var(bnd.z2diff, [])
	var(bnd.temp_top, [deg_c])
	var(bnd.temp_bot, [deg_c])
	var(bnd.sal_top, [])
	var(bnd.sal_bot, [])
	
	var(bnd.trac_top, [])
	var(bnd.trac_bot, [])
	
	var(bnd_layer.z, [m]) {
		z[bnd_vert.above] + dz
	}
	
	prof : property("Boundary profile")
	
	var(bnd_layer.prof, []) {
		z1 := bnd.z1,
		z2 := (10^bnd.z2diff)=>[m] + z1,
		a := {
			((z2-z)/(z2-z1))^2   if z < z2,
			0                    otherwise
		},
		b := {
			0                    if z < z1,
			((z-z1)/z1)^1.5      otherwise
		},
		g := a / (z/z1 + a^4)^(1/4.),
		h := b / sqrt(1 + b^2),
		(1 - g + h)/2
	}
	
	var(bnd_layer.water, [k g], "Boundary layer water") @override { 1[k g] }   # This is just so that it can have a concentration of various things, for automatic flux generation to work.
	
	var(bnd_layer.water.temp, [deg_c], "Boundary layer temperature") {  lerp(prof, 0, 1, bnd.temp_top, bnd.temp_bot)  }
	
	var(bnd_layer.water.salinity, [], "Boundary layer salinity") {  lerp(prof, 0, 1, bnd.sal_top, bnd.sal_bot)  }
	
	var(bnd_layer.water.heat, [J], "Boundary layer heat") @override_conc {
		(temp->[K]) * C_water
	}
	
	var(bnd_layer.water.salt, [k g], [g, k g-1], "Boundary layer salt") @override_conc {
		salinity =>> #TODO: proper conversion from PSU
	}
	
	var(bnd_layer.water.dens, [k g, m-3], "Boundary layer density")
	
	# NOTE: see earlier use of above_p
	var(bnd_layer.water.above_p, [Pa]) {    accum_pressure[bnd_vert.above]   }
	
	var(bnd_layer.water.accum_pressure, [Pa]) {
		above_p + dens*grav*dz
	}
	
	barocline_bnd_u : property("Barocline boundary flux")
	
	var(layer.water.barocline_bnd_u, [k g, s-1]) {
		dP := accum_pressure[vert.below] - bnd_layer.water.accum_pressure[vert.below],
		
		u := copysign(sqrt(2*alpha_u*abs(dP)/rho_water), dP),
		u * w_bnd * dz * rho_water
	}
	
	sealevel_component : function(amp : [c m], phase : [deg], per : [hr], t : [hr]) {
		amp * cos( (pi/180[deg])*(t*360[deg]/per - phase) )
	}
	
	sealevel : function(t : [hr]) {
		# TODO: Parametrize. This in particular is for Oscarsborg.
		  sealevel_component(11.2[c m], 282[deg], 365.24*24[hr], t)
		+ sealevel_component(13.4[c m], 152[deg], 12.42[hr], t)
		+ sealevel_component( 3.4[c m], 101[deg], 12.00[hr], t)
		+ sealevel_component( 3.3[c m], 101[deg], 12.66[hr], t)
		+ sealevel_component( 0.9[c m],  76[deg], 11.97[hr], t)
		+ sealevel_component( 0.5[c m], 172[deg], 23.93[hr], t)
		+ sealevel_component( 2.1[c m], 299[deg], 15.82[hr], t)
	}
	
	var(bnd.h, [m]) @override {
		sec := time.second_of_day + time.step_length_in_seconds * time.fractional_step,
		sealevel(sec->[hr])->[m]              
	}
	
	#TODO: The barotropic flow must probably be limited to the max pressure-induced flow. In that case the value for h must be updated according to that.
	#	Only relevant in very narrow passages though.
	
	w_bnd_ : property("Width to boundary")
	A_bnd : property("Total area to boundary")
	tot_barotropic_u : property("Total barotropic boundary flux")
	barotropic_bnd_u : property("Barotropic boundary flux")
	horz_target : property("Target of horizontal flux")
	
	var(layer.w_bnd_, [m]) { w_bnd	} # Since we cant aggregate() a parameter yet.
	
	var(oair.A_bnd, [m 2]) { aggregate(layer.w_bnd_)*dz }
	
	var(oair.h, [m]) @override { bnd.h } #+ (in_flux(downstream, water)/A_bnd)^2/(2*alpha_u*grav) }# TODO: different with river inflow.
	
	var(oair.tot_barotropic_u, [m 3, s-1]) {
		-(h - last(h))*A[vert.top]/time.step_length_in_seconds
	}
	
	var(layer.water.barotropic_bnd_u, [k g, s-1]) {
		#0[m 3, s-1] #TODO.
		oair.tot_barotropic_u * w_bnd * dz * rho_water / oair.A_bnd
	}
	
	var(layer.water.horz_target, [])
	
	special_computation("Place horizontal fluxes from bnd", "nivafjord_place_horizontal_fluxes", layer.water.horz_target) {
		bnd_layer.water.dens
		layer.water.dens
		w_bnd
	}
	
	#vert2 : connection("Vert 2", grid1d) { layer* }
	#bndvert2 : connection("Boundary vert 2", grid1d) { bnd_layer* }

	flux(bnd_layer.water, layer.water[vert2.specific], [k g, day-1], "Flow from boundary") {
		bcl := -(layer.water.barocline_bnd_u + layer.water.barotropic_bnd_u)->>,
		bcl    if bcl > 0,
		0      otherwise
	} @specific {
		layer.water.horz_target
	}
	
	var(bnd_layer.water.horz_target, [])
	
	special_computation("Place horizontal fluxes to bnd", "nivafjord_place_horizontal_fluxes", bnd_layer.water.horz_target) {
		layer.water.dens
		bnd_layer.water.dens
		w_bnd
	}
	
	flux(layer.water, bnd_layer.water[bndvert2.specific], [k g, day-1], "Flow to boundary") {
		bcl := (layer.water.barocline_bnd_u + layer.water.barotropic_bnd_u)->>,
		bcl    if bcl > 0,
		0      otherwise
	} @specific {
		bnd_layer.water.horz_target
	}
	
	flux(layer.water, out, [k g, day-1], "Flow from boundary equivalent removal") {
		in_flux(vert2, water) - (layer.water.barocline_bnd_u + layer.water.barotropic_bnd_u)->>
	}
	

	*/
}