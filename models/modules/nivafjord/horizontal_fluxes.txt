

module("NIVAFjord river inputs", version(0, 0, 0),
	river : compartment,
	layer : compartment,
	water : quantity,
	salt : quantity,
	temp : property,
	salin : property,
	rho : property,
	flow : property,
	horz : connection,
	vert : connection,
) {
	load("stdlib/seawater.txt", library("Seawater"))
	load("stdlib/physiochemistry.txt", library("Water utils"))
	
	par_group("River to fjord") {
		river_max : par_real("River max discharge layer", [], 10)
	}
	
	vert_target : property("Vertical exchange target")
	
	var(river.vert_target, [], "Outlet vertical target")
	
	external_computation("Place river horizontal fluxes", "nivafjord_place_river_flux", river) {
		result(river.vert_target)
		river.water.rho
		river_max
		last(river.water.rho[horz.below]) # This must be 'last' because layer.water.rho must be solved after this instruction.
	} @allow_connection(river, horz)
	
	flux(river.water, layer.water[horz.below, vert.specific], [m 3, s-1], "River discharge to fjord") {
		flow->>
	} @specific { river.vert_target }

	# TODO: Could have a SimplyCl module
	var(river.water.salin, [], "River salinity") {  0  } @no_store
	
	var(river.water.salt, [k g], [k g, m-3]) @override_conc {   1e-3*salin*rho_water   }
	
	var(river.water.rho, [k g, m-3]) {
		seawater_pot_dens(temp, salin)
	}
}

module("NIVAFjord simplified river inputs", version(0, 0, 0),
	river : compartment,
	layer : compartment,
	water : quantity,
	flow : property,
	horz : connection,
	vert : connection
) {
	# We could maybe get rid of this module.

	flux(river.water, layer.water[horz.below, vert.top], [m 3, s-1], "River discharge to lake") {
		river.water.flow
	}
}


module("NIVAFjord horizontal fluxes", version(0, 0, 2),
	basin  : compartment,
	bnd_basin : compartment,
	layer  : compartment,
	bnd_layer : compartment,

	edge   : compartment,
	edge_layer : compartment,
	
	edge2  : compartment,
	edge_layer2 : compartment,
	
	water  : quantity,
	salt   : quantity,
	temp   : property,
	salin  : property,
	rho    : property,
	pressure : property,
	dz     : property,
	h      : property,
	
	horz   : connection,
	horz2  : connection,
	
	vert   : connection,
	dims   : preamble
) {
"""
This one is for if there is a boundary compartment and river inputs
"""

	load("stdlib/seawater.txt", library("Seawater"))
	load("stdlib/physiochemistry.txt", library("Water utils"))
	
	# Should we index this one over basin or connection?
	par_group("Horizontal exchange") {
		alpha_u : par_real("Pressure difference flow coefficient", [], 0.5, 0.1, 1)
	}
	
	par_group("Fjord horizontal boundary", edge_layer) {
		w_bnd  : par_real("Boundary width", [m], 0, 0, 10000)
	}
	
	# TODO: This is should not be necessary. But right now we don't have functionality for reverse edges..
	par_group("Fjord horizontal boundary 2", edge_layer2) {
		w_bnd2  : par_real("Boundary width", [m], 0, 0, 10000)
	}
	
	
	vert_target : property("Vertical exchange target")
	dP : property("Pressure difference")
	horz_flow_vel : property("Horizontal flow velocity")
	
	var(edge_layer.vert_target, [], "Fjord layer horizontal exchange vertical target") @no_store
	
	external_computation("Place horizontal fluxes", "nivafjord_place_horizontal_fluxes", edge) {
		result(edge_layer.vert_target)
		layer.water.rho
		layer.water.rho[horz.below]
		layer.water.pressure
		layer.water.pressure[horz.below]
		w_bnd
	} @allow_connection(layer, horz)
	
	var(edge_layer.dP, [Pa]) @no_store
	
	
	var(edge_layer2.vert_target, [], "Fjord boundary layer horizontal exchange vertical target") @no_store
	
	external_computation("Place boundary horizontal fluxes", "nivafjord_place_horizontal_fluxes", edge2) {
		result(edge_layer2.vert_target)
		bnd_layer.water.rho
		bnd_layer.water.rho[horz2.below]
		bnd_layer.water.pressure
		bnd_layer.water.pressure[horz2.below]
		w_bnd2
	} @allow_connection(bnd_layer, horz2)
	
	var(edge_layer2.dP, [Pa]) @no_store
	
	
	#{
	#	layer.water.pressure - layer.water.pressure[horz.below]
	#}
	
	# Note: The only reason we don't just pass the h-value directly to the external comp is that we can't get h[horz.below] since basin is not on the connection.
	#    This is annoying and should be possible to do somehow.
	# Maybe need sub-compartments, and then only put the parent compartment on the connection, which would also be good for EasyReservoir.
	
	align_z : property("Aligned depth")
	
	var(layer.align_z, [m], "Aligned depth of layer bottom") {
		dz - basin.h                        if is_at[vert.top],
		layer.align_z[vert.above] + dz      otherwise
	} @no_store
	
	var(bnd_layer.align_z, [m], "Aligned depth of boundary layer bottom") {
		dz - bnd_basin.h                    if is_at[vert.top],
		bnd_layer.align_z[vert.above] + dz  otherwise
	} @no_store
	
	
	
	
	external_computation("Compute pressure difference", "nivafjord_compute_pressure_difference", edge2) {
		result(edge_layer2.dP)
		bnd_layer.align_z
		bnd_layer.align_z[horz2.below]
		bnd_layer.dz
		bnd_layer.dz[horz2.below]
		bnd_layer.water.pressure
		bnd_layer.water.pressure[horz2.below]
	} @allow_connection(bnd_layer, horz2)
	
	var(edge_layer.horz_flow_vel, [m, s-1], "Layer horizontal flow velocity") {
		#copysign(sqrt(2*alpha_u*abs(dP)/rho_water), dP)->>
		sqrt(2*alpha_u*abs(dP)/rho_water)   if dP > 0 & w_bnd > 0,
		0                                   otherwise
	}
	
	flux(layer.water, layer.water[horz.below, vert.specific], [m 3, day-1], "Layer horizontal outflow flux") {
		w := 0.5*(w_bnd + w_bnd[vert.below]),
		edge_layer.horz_flow_vel*w*layer.dz->>
	} @specific {
		edge_layer.vert_target
	}
	
	
	
	external_computation("Compute pressure boundary difference", "nivafjord_compute_pressure_difference", edge) {
		result(edge_layer.dP)
		layer.align_z
		layer.align_z[horz.below]
		layer.dz
		layer.dz[horz.below]
		layer.water.pressure
		layer.water.pressure[horz.below]
	} @allow_connection(layer, horz)
	
	var(edge_layer2.horz_flow_vel, [m, s-1], "Layer horizontal flow velocity") {
		#copysign(sqrt(2*alpha_u*abs(dP)/rho_water), dP)->>
		sqrt(2*alpha_u*abs(dP)/rho_water)   if dP > 0 & w_bnd2 > 0,
		0                                   otherwise
	}
	
	flux(bnd_layer.water, bnd_layer.water[horz2.below, vert.specific], [m 3, day-1], "Boundary layer horizontal outflow flux") {
		w := 0.5*(w_bnd2 + w_bnd2[vert.below]),
		edge_layer2.horz_flow_vel*w*bnd_layer.dz->>
	} @specific {
		edge_layer2.vert_target
	}
	
	
	
	
	
	horz_flow_frac : property("Horizontal balance fraction")
	var(layer.horz_flow_frac, [day-1]) {
		(out_flux(horz, water) - in_flux(horz, water)) / water ->>
	}
}

module("NIVAFjord simple realignment", version(0, 0, 1),
	basin : compartment,
	layer : compartment,
	water : quantity,
	dz : property,
	vert : connection,
	dims : preamble
) {
"""
This module realigns layers so that they stay at the same thickness, and only the top one varies.
"""
	par_group("Layer realignment") {
		align_rate : par_real("Vertical realignment rate", [], 50, 0, 100)
	}

	external_computation("Layer vertical realignment computation", "nivafjord_vertical_realignment_slow", basin) {
		result(layer.water.align)
		layer.dz
		dz0
		A
		align_rate
	}
	
	align : property("Vertical realignment")
	var(layer.water.align, [m 3, day-1]) @no_store
	
	flux(layer.water, vert, [m 3, day-1], "Vertical realignment flux") {
		align
	} @bidirectional
	
	align_frac : property("Alignment fraction")
	var(layer.align_frac, [day-1]) {
		water.align/water
	}
}

