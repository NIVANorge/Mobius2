
module("NIVAFjord horizontal fluxes", version(0, 0, 1),
	basin  : compartment,
	layer  : compartment,
	river  : compartment,
	edge   : compartment,
	edge_layer : compartment,
	water  : quantity,
	salt   : quantity,
	temp   : property,
	salin  : property,
	flow   : property,
	rho    : property,
	pressure : property,
	dz     : property,
	
	horz   : connection,
	vert   : connection,
	w_bnd  : par_real
) {

	load("stdlib/seawater.txt", library("Seawater"))
	load("stdlib/physiochemistry.txt", library("Water utils"))
	
	# Should we index this one over basin or connection?
	par_group("Horizontal exchange") {
		alpha_u : par_real("Pressure difference flow coefficient", [], 0.5, 0.1, 1)
	}

	vert_target : property("Vertical exchange target")
	
	var(river.vert_target, [], "Outlet vertical target")
	
	#TODO: We have to conditionalize the computation of this one in codegen based on the existence of horz.below.
	external_computation("Place river horizontal fluxes", "nivafjord_place_river_flux", river) {
		result(river.vert_target)
		river.water.rho
		river.water.rho[horz.below]
	} @allow_connection(river, horz)
	
	flux(river.water, layer.water[horz.below, vert.specific], [m 3, day-1], "River discharge to fjord") {
		flow->>
	} @specific { river.vert_target }
	

	# TODO: Could have a SimplyCl module
	var(river.water.salt, [k g], [k g, m-3]) @override_conc { 0[k g, m-3] }
	
	var(river.water.salin, []) {
		(conc(salt)/rho_water)->>
	}
	
	var(river.water.rho, [k g, m-3]) {
		seawater_pot_dens(temp, salin)
	}
	
	var(edge_layer.vert_target, [], "Fjord layer horizontal exchange vertical target")
	
	# How would the framework know that this one is only for the edge layers, not below that (?)
	# Or maybe it doesn't need to, and it just does a 'break' when w_bnd becomes 0.
	# That is simpler, but wastes some time series storage space.
	external_computation("Place horizontal fluxes", "nivafjord_place_horizontal_fluxes", edge) {
		result(edge_layer.vert_target)
		layer.water.rho
		layer.water.rho[horz.below]
		layer.water.pressure
		layer.water.pressure[horz.below]
		w_bnd
	} @allow_connection(layer, horz)
	
	dP : property("Pressure differential")
	var(edge_layer.dP, [Pa]) {
		layer.water.pressure - layer.water.pressure[horz.below]
	}
	
	horz_flow : property("Horizontal flow")
	var(edge_layer.horz_flow, [m 3, day-1], "Layer horizontal outflow") {
		#NOTE: This could go in both directions
		#dP := layer.water.pressure - layer.water.pressure[vert.below],
	
		copysign(sqrt(2*alpha_u*abs(dP)/rho_water), dP) * w_bnd * layer.dz ->>
	}
	
	flux(layer.water, layer.water[horz.below, vert.specific], [m 3, day-1], "Layer horizontal outflow flux") {
		edge_layer.horz_flow
	} @specific {
		edge_layer.vert_target
	} @bidirectional
	
	horz_bal : property("Horizontal water balance")
	var(layer.water.horz_bal, [m 3, day-1]) {
		#TODO: If we implement out_flux, we don't need the separate horz_flow variable.
		
		aggregate(edge_layer.horz_flow) - in_flux(horz, water)->>
	}
	
	align : property("Vertical realignment")
	var(layer.water.align, [m 3, day-1])
	
	# NOTE: Needs to be external computation since it would otherwise require reverse iteration (could be implemented later maybe)
	external_computation("Layer vertical realignment computation", "nivafjord_vertical_realignment", basin) {
		result(layer.water.align)
		layer.water.horz_bal
	}
	
	flux(layer.water, vert, [m 3, day-1], "Vertical realignment flux") {
		align
	}
}