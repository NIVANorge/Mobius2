
module("EasyAirSea", version(0, 1, 0),
	air  : compartment,
	surf : compartment,
	
	ice        : quantity,
	
	evap_mm    : property,
	
	A_surf    : par_real,   # Ooops, for NIVAFjord, this must be A[vert.top], but we don't have a way of passing that for the moment.
	
	top_water : loc, 
	top_water_heat : loc, # TODO: System for composing locs also? E.g. top_water.heat
	top_water_heat_sw : loc, # Needed since it could be on a separate connection e.g. in NIVAFjord. This is a bit awkward though..
	top_water_temp : loc,
) {
"""
Air-lake heat fluxes are based off of
[Air-Sea bulk transfer coefficients in diabatic conditions, Junsei Kondo, 1975, Boundary-Layer Meteorology 9(1), 91-112](https://link.springer.com/article/10.1007/BF00232256)
The implementation is influenced by the implementation in [GOTM](https://github.com/gotm-model).
The ice module is influenced by the one in MyLake.
"""
	
	load("stdlib/seawater.txt", library("Air-sea"))
	
	rho_ice    : constant("Ice density", [k g, m-3], 917)
	l_freeze   : constant("Latent heat of freezing", [J, k g-1], 333500)
	lambda_ice : constant("Ice heat conduction coefficient", [W, m-1, K-1], 2.1)
	water_alb  : constant("Water albedo", [], 0.045)  # Could be a module parameter
	
	par_group("Ice", surf) {
		init_ice  : par_real("Initial ice thickness", [m], 0, 0, 10)
		ice_alb   : par_real("Ice albedo", [], 0.4, 0, 1)
		th_frazil : par_real("Frazil threshold", [m], 0.05, 1e-5, 0.1)
		ice_temp  : par_real("Ice formation temperature", [deg_c], 0, -2, 2)
	}
	
	wind : property("Wind")
	stab : property("Stability")
	ced : property("Transfer coefficient for latent heat flux")
	chd : property("Transfer coefficent for sensible heat flux")
	s_hum : property("Saturation specific humidity")
	lwu : property("Emitted longwave radiation")
	sw : property("Shortwave radiation") # TODO: Should have a better name for it.
	albedo : property("Albedo")
	
	energy : property("Freeze energy")
	indicator : property("Ice indicator")
	attn : property("Attenuation coefficent")
	
	var(air.wind, [m, s-1], "Wind speed")
	
	# TODO: In many cases the water temp must be replaced since we can't assume the temp is of the 'surf' compartment.
	# But then we must also make it 
	
	var(surf.stab, []) {   surface_stability(air.wind, top_water_temp, air.temp)   }
	
	var(surf.ced, [])  {   tc_latent_heat(air.wind, stab)   }
	
	var(surf.chd, [])  {   tc_sensible_heat(air.wind, stab)   }
	
	var(surf.s_hum, []) {
		svap := saturation_vapor_pressure(water.temp),
		specific_humidity_from_pressure(air.pressure, svap)
	}
	
	var(surf.lwu, [W, m-2]) {
		emissivity := 0.98,
		emissivity * black_body_radiation(water.temp->[K])
	}
	
	var(surf.albedo, []) {
		ice_alb        if ice.indicator,
		water_alb      otherwise
	}
	
	#TODO should be attn in epi also, and remainder to hyp
	var(surf.sw, [W, m-2]) {   (1 - albedo) * (1 - ice.attn) * air.g_rad   }
	
	flux(nowhere, top_water_heat_sw, [J, day-1], "Net shortwave") {   A_surf * sw ->>   }
	
	flux(nowhere, top_water_heat,    [J, day-1], "Net longwave") {
		net_rad := (1 - water_alb)*air.lwd - lwu,    # W/m2
		0                              if surf.ice.indicator,
		A_surf * net_rad ->>           otherwise
	}
	
	flux(nowhere, top_water_heat, [J, day-1], "Freeze heating") {  A_surf * ice.energy ->>  }    # Energy used to melt ice instead of heating the water body (or other way around with freezing)
	
	flux(nowhere, top_water_heat, [J, day-1], "Latent heat flux") {
		l_vap := latent_heat_of_vaporization(temp),
		0                                                                          if surf.ice.indicator,
		A_surf * (ced * l_vap * air.rho * air.wind * (air.a_hum - s_hum)) ->>      otherwise
	}
	
	flux(nowhere, top_water_heat, [J, day-1], "Sensible heat flux") {
		0                                                                             if surf.ice.indicator,
		A_surf * (chd * C_air * air.rho * air.wind * (air.temp->[K] - temp->[K])) ->> otherwise
	}
	
	#evap_mm : property("Evaporation per area")
	
	var(surf.evap_mm, [m m, day-1]) {
		rho_ref := 1025 [k g, m-3],
		0                                                                          if surf.ice.indicator,
		-(air.rho / rho_ref) * chd * air.wind * (air.a_hum - s_hum) ->>            otherwise
	}
	
	flux(nowhere, top_water_heat, [J, day-1], "Precipitation heat") {
		#precip_t := max(0.4[deg_c], air.temp),
		precip_t := air.temp,
		V := A_surf*air.precip -> [m 3, day-1],   
		water_temp_to_heat(V => [m 3], precip_t) => [J, day-1] # TODO: Not sure how to best express this. It is a bit annoying that the 1/day doesn't "pass through" the function
	}
	
	var(surf.ice, [m], "Ice thickness") @initial { init_ice }
	
	var(surf.ice.energy, [W, m-2]) {
		z_surf := 1[m],   #  Thickness of water layer that ice formation can draw energy from. #TODO: Should probably be module parameter?
		K_ice := 200[W, m-3, deg_c-1],   # freezing/melting heat transfer coefficient ... should not affect magnitude of temperature or ice cover, only how fast they "converge"
		e := (ice_temp - water.temp)*z_surf*K_ice,
		
		0        if (ice < 1e-6[m]) & (e < 0),    # No melting when there is no ice
		e        otherwise
	}
	
	var(surf.ice.indicator, [], "Ice indicator") {   ice > th_frazil   }
	
	var(surf.ice.attn, []) {
		0                       if !indicator,
		1 - exp(-5[m -1] * ice) otherwise    #TODO: the 5 should be configurable?
	}
	
	flux(nowhere, surf.ice, [m, day-1], "Ice change") {
		(energy + {
			{
				#NOTE: Stefan's law in ODE form:
				#d(ice)/dt = lambda_ice*(ice_temp - ice_t)/ice
				factor := 1[m] / (10[m] + ice),
				ice_t := (factor * ice_temp + air.temp) / (1 + factor),   # Approximation of ice temperature. TODO: separate state var?
				lambda_ice * (ice_temp->[K] - ice_t->[K]) / ice
			}                                             if (air.temp <= ice_temp) & indicator,
			-(1-albedo)*air.g_rad*attn                    if indicator,  
			0                                             otherwise
		}) / (rho_ice * l_freeze) ->[m, day-1]
		+ {
			air.precip   if indicator & (air.temp <= ice_temp),     # if there is ice, and temperature is below freezing, precipitation is added as ice
			0            otherwise
		}->[m, day-1]
	}
}