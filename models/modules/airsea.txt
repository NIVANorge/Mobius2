
module("AirSea", version(0, 1, 1),
	air       : compartment,
	surf      : compartment,
	
	ice       : quantity,
	heat      : quantity,
	
	temp      : property,
	precip    : property,
	wind      : property,
	g_rad     : property,
	pressure  : property,
	rho       : property,
	a_hum     : property,
	lwd       : property,
	sw        : property,
	attn      : property,
	freeze_temp : property,
	indicator : property,
	evap      : property,
	
	A_surf            : loc,
	top_water         : loc,
	top_water_heat_sw : loc # Needed since it could be on a separate connection e.g. in NIVAFjord. This is a bit awkward though..
) {
"""
Air-sea/lake heat fluxes are based off of
[Air-Sea bulk transfer coefficients in diabatic conditions, Junsei Kondo, 1975, Boundary-Layer Meteorology 9(1), 91-112](https://link.springer.com/article/10.1007/BF00232256)
The implementation used here is influenced by the implementation in [GOTM](https://github.com/gotm-model).

The ice module is influenced by the ice module in MyLake, and uses Stefan's law for ice accumulation.
"""
	
	load("stdlib/seawater.txt", library("Air-sea"))
	load("stdlib/atmospheric.txt", library("Meteorology"))
	load("stdlib/physiochemistry.txt", library("Thermodynamics"), library("Water utils"))
	
	rho_ice    : constant("Ice density", [k g, m-3], 917)
	l_freeze   : constant("Latent heat of freezing", [J, k g-1], 333500)
	lambda_ice : constant("Ice heat conduction coefficient", [W, m-1, K-1], 2.1)
	water_alb  : constant("Water albedo", [], 0.045)  # Could be a module parameter
	
	par_group("Ice", surf) {
		init_ice  : par_real("Initial ice thickness", [m], 0, 0, 10)
		ice_alb   : par_real("Ice albedo", [], 0.4, 0, 1)
		ice_att_c : par_real("Ice attenuation coefficient", [m-1], 5)
		th_frazil : par_real("Frazil threshold", [m], 0.05, 1e-5, 0.1)
	}
	
	stab   : property("Stability")
	ced    : property("Transfer coefficient for latent heat flux")
	chd    : property("Transfer coefficent for sensible heat flux")
	s_hum  : property("Saturation specific humidity")
	lwu    : property("Emitted longwave radiation")
	albedo : property("Albedo")
	
	energy    : property("Freeze energy")
	
	var(air.wind, [m, s-1], "Wind speed")
	
	var(surf.stab, []) {   surface_stability(air.wind, top_water.temp, air.temp)   }
	
	var(surf.ced, [])  {   tc_latent_heat(air.wind, stab)   }
	
	var(surf.chd, [])  {   tc_sensible_heat(air.wind, stab)   }
	
	var(surf.s_hum, []) {
		svap := saturation_vapor_pressure(top_water.temp),
		specific_humidity_from_pressure(air.pressure, svap)
	}
	
	var(surf.lwu, [W, m-2]) {
		emissivity := 0.98,
		emissivity * black_body_radiation(top_water.temp->[K])
	}
	
	var(surf.albedo, []) {
		ice_alb        if ice.indicator,
		water_alb      otherwise
	}
	
	var(surf.sw, [W, m-2]) {   (1 - albedo) * (1 - ice.attn) * air.g_rad   }
	
	flux(out, top_water_heat_sw, [J, day-1], "Net shortwave") {  A_surf * surf.sw ->>  }
	
	flux(out, top_water.heat,    [J, day-1], "Net longwave") {
		net_rad := (1 - surf.albedo)*air.lwd - surf.lwu,    # W/m2       # TODO: Should really albedo be detracted from longwave?
		(!surf.ice.indicator) *	A_surf * net_rad ->>
	}
	
	flux(out, top_water.heat, [J, day-1], "Freeze heating") {  A_surf * surf.ice.energy ->>  }    # Energy used to melt ice instead of heating the water body (or other way around with freezing)
	
	flux(out, top_water.heat, [J, day-1], "Latent heat flux") {
		l_vap := latent_heat_of_vaporization(top_water.temp),
		(!surf.ice.indicator) * A_surf * (surf.ced * l_vap * air.rho * air.wind * (air.a_hum - surf.s_hum)) ->>
	}
	
	flux(out, top_water.heat, [J, day-1], "Sensible heat flux") {
		(!surf.ice.indicator) * A_surf * (surf.chd * C_air * air.rho * air.wind * (air.temp->[K] - top_water.temp->[K])) ->>
	}
	
	var(surf.evap, [m m, day-1]) {
		rho_ref := 1025 [k g, m-3],
		(!surf.ice.indicator) * (air.rho / rho_ref) * chd * air.wind * (s_hum - air.a_hum) ->>
	}
	
	flux(top_water, out, [m 3, day-1], "Evaporation") {  surf.evap * A_surf ->>  } @no_carry
	
	flux(out, top_water, [m 3, day-1], "Precipitation to surface") {   air.precip * A_surf ->>   }
	
	flux(out, top_water.heat, [J, day-1], "Precipitation heat") {
		precip_t := max(0[deg_c], air.temp),
		V := A_surf*air.precip -> [m 3, day-1],   
		water_temp_to_heat(V => [m 3], precip_t) => [J, day-1] # TODO: Not sure how to best express this. It is a bit annoying that the 1/day doesn't "pass through" the function.
	}
	
	var(surf.ice, [m], "Ice thickness") @initial { init_ice }
	
	var(surf.ice.energy, [W, m-2]) {
		z_surf := 1[m],   #  Thickness of water layer that ice formation can draw energy from. #TODO: Should probably be module parameter?
		K_ice := 200[W, m-3, deg_c-1],   # freezing/melting heat transfer coefficient ... should not affect magnitude of temperature or ice cover, only how fast they "converge"
		e := (freeze_temp - top_water.temp)*z_surf*K_ice,
		
		0        if (ice < 1e-6[m]) & (e < 0),    # No melting when there is no ice
		e        otherwise
	}
	
	var(surf.ice.indicator, [], "Ice indicator") {  ice > th_frazil  }
	
	var(surf.ice.attn, []) {
		0                         if !indicator,
		1 - exp(-ice_att_c * ice) otherwise
	}
	
	var(surf.ice.temp, [deg_c], "Ice surface temperature") {
		alpha := 1 / (10[m-1] * ice),
		(alpha * freeze_temp + air.temp) / (1 + alpha)   if indicator,
		0                                                otherwise
	}
	
	flux(out, surf.ice, [m, day-1], "Ice change") {
		#NOTE: Stefan's law in ODE form:
		#d(h_ice)/dt = lambda_ice*(ice_bottom_temperature - ice_surface_temperature)/(h_ice*rho_ice*l_freeze)
		(energy + {
			lambda_ice * (freeze_temp->[K] - temp->[K]) / ice  if (temp <= freeze_temp) & indicator,  # TODO: Should the condition be on air.temp or ice.temp being less than freeze_temp?
			-(1-albedo)*air.g_rad*attn                         if indicator,  # Hmm, MyLake includes all fluxes here, not just shortwave. Not sure if it matters since the thawing is so fast.
			0                                                  otherwise
		}) / (rho_ice * l_freeze) ->>
		+ {
			air.precip   if indicator & (air.temp <= freeze_temp),     # if there is ice, and temperature is below freezing, precipitation is added as ice
			0            otherwise
		} ->>
	}
}