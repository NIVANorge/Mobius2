
module("Microplastic soil column", version(0, 0, 1),
	air   : compartment,
	layer : compartment,
	water : quantity,
	mp : quantity,
	vert : connection,
) {
"""
This is a module for transport of microplastic in a single *experimentally controlled* soil column. It can't be directly upscaled, but will be used for informing construction of upscaled models.
"""
	
	par_group("Layer properties", layer) {
		dz     : par_real("Thickness", [m m], 10, 0, 100)
		theta0 : par_real("Initial porosity", [], 0.5, 0, 1)
		temp : par_real("Layer temperature", [deg_c], 20, 10, 30)
		
		sph : par_real("Soil grain sphericity", [], 1, 0, 1)
		dp  : par_real("Soil grain diameter", [m m], 0.5, 0.001, 10)
		
		grad : par_real("Hydraulic gradient", [], 0.05, 0, 1, "When the box is full") #TODO: Do this differently
		
		roots : par_bool("Roots are present", false) #TODO: May also need the fraction of volume this takes up?
	}
	
	par_group("General soil properties") {
		fcs  : par_real("Field capacity saturation", [], 0.2, 0.1, 0.4, "0.1=sand, 0.4=clay")
		pwps : par_real("Permanent wilting point saturation", [], 0.09, 0.04, 0.22, "0.04=sand, 0.22=clay")
		
		# Tabular values:
		# https://extension.okstate.edu/fact-sheets/understanding-soil-water-content-and-thresholds-for-irrigation-management.html
	}
	
	par_group("General transport") {
		transp_f_base : par_real("Base transport factor", [], 1e-5, 0, 1)
		bio_down : par_real("Bioturbation down rate", [day-1], 0.01, 0, 1)
		bio_up   : par_real("Bioturbation up rate", [day-1], 0.001, 0, 1)
	}
	
	par_group("MP characteristics", mp) {
		eff_diam : par_real("Effective diameter", [mu m], 1, 0.0001, 10)
	}
	
	par_group("Initial MP", layer, mp) {
		init_mp : par_real("Initial mp amount", [m g], 0, 0, 1000)
	}
	
	load("stdlib/physiochemistry.txt", library("Water utils"), library("Basic constants"))
	load("stdlib/basic_math.txt", library("Response"), library("Basic"))
	
	precip : property("Precipitation")
	pet    : property("Potential evapotranspiration")
	theta  : property("Porosity")
	perm   : property("Soil permeability")
	cond   : property("Soil hydraulic conductivity")
	etp    : property("Evapotranspiration")
	etp_above : property("Evapotranspiration above")
	
	var(air.precip, [m m, day-1])
	
	var(air.pet, [m m, day-1])
	
	# TODO: May not be that realistic that etp works from top down since roots will always take some??
	var(layer.etp, [m m, day-1]) {
		can_etp := is_at[vert.top] | roots,
		{
			maxcap := dz*theta,
			pot := max(0, air.pet-etp_above), # Remaining unsatisfied pet
			s_response(water, maxcap*pwps, maxcap*fcs, 0, pot)  # Turn ET off as saturation goes below field capacity and approaches PWP.
		} if can_etp,
		0 otherwise
	}
	
	############# Hydrology part
	
	var(layer.etp_above, [m m, day-1]) {
		etp[vert.above] + etp_above[vert.above]
	} @no_store
	
	flux(layer.water, out, [m m, day-1], "Evapotranspiration flux") { etp } @no_store
	
	var(layer.theta, [], "Layer porosity") { theta0 } # Eventually allow change over time
	
	var(layer.perm, [m m 2], "Layer permeability") {
		# Kozeny-Carman equation
		sph^2 * (theta*dp)^2 / (180*(1-theta)^2)
	}
	
	var(layer.cond, [m, s-1], "Layer hydraulic conductivity") {
		kinvis := kinematic_viscosity_water(temp->[K]),
		grav * perm / kinvis ->>
	}
	
	side : property("Lateral flow")
	perc : property("Percolation")
	
	# Hmm this is done a bit awkward..
	water_tot : property("Water above") #Not actually above, but above including this.
	var(layer.water_tot, [m m]) { max(0, water - dz*theta*fcs) + water_tot[vert.above] } @no_store
	z : property("Effective depth")
	var(layer.z, [m m]) { dz*theta + z[vert.above] } @no_store
	
	
	sat_lim : property("Saturation limiter")
	var(layer.sat_lim, []) {
		maxcap := dz * theta,
		mincap := maxcap*fcs,
		s_response(water, mincap, min(1.1*mincap, maxcap), 0, 1)
	} @no_store
	
	var(layer.water.side, [m m, day-1]) {
		# TODO: This is wrong... Should compute gradient based on z and, z of outside and distance.
		agrad := grad*(water_tot/z),
		sat_lim*agrad*cond->>
	}
	
	var(layer.water.perc, [m m, day-1]) {
		maxcap_b := dz[vert.below] * theta[vert.below],
		maxrate := cond->>,
		
		# Cut percolation off when water saturation goes below field capacity.
		maxperc := sat_lim*maxrate,
		# Cut percolation off when water saturation below fills up
		s_response(water[vert.below], 0.9*maxcap_b, maxcap_b, maxperc, 0)
		
		# TODO: Capillary action when water below is above fc and this layer is below fc?
		# We could also compute forces on the water, but probably not necessary
		# https://onlinelibrary.wiley.com/doi/epdf/10.1155/2020/6671479
	}
	
	var(layer.water, [m m], "Soil layer pore water") @initial { dz*theta*fcs } 
	
	flux(out, layer.water[vert.top], [m m, day-1], "Precipitation to soil") {  air.precip  }
	
	flux(layer.water, out, [m m, day-1], "Layer water lateral flow") { side }
	
	flux(layer.water, vert, [m m, day-1], "Layer water percolation") { perc }
	
	flux(layer.water, vert, [m m, day-1], "Layer capillary flow") {
		satcap := dz*theta*fcs,
		speed := 0.01[day-1], #TODO: Parametrize, or formula based on porosity?
		diff := water[below] - water,
		dryness := (satcap - water)/satcap,
		desired := -speed*max(0, diff*dryness),   # Negative since this moves water in the opposite direction (up)
		# Cut off if no water available below
		satcap_b := dz[vert.below] * theta[vert.below] * fcs,
		s_response(water[below], satcap_b, 1.1*satcap_b, 0, desired)
	}

	####### Microplastic part
	
	
	transp_f : property("Transport size factor")
	var(layer.mp.transp_f, []) {
		transp_f_base #TODO: Some formula depending on size, pore size, hydrophobicity.
	}
	
	bio_f : property("Bioturbation size factor")
	
	var(layer.mp.bio_f, []) {
		1 #TODO: Some formula depending on size
	}
	
	var(layer.mp, [m g], "Layer microplastics") @initial { init_mp }
	
	flux(layer.mp, out, [m g, day-1], "MP lateral transport") {
		safe_divide(water.side, water)*mp*transp_f
	}
	
	flux(layer.mp, vert, [m g, day-1], "MP percolation") {
		safe_divide(water.perc, water)*mp*transp_f
	}
	
	flux(layer.mp, vert, [m g, day-1], "Bioturbation net transport") {
		mp*bio_down*bio_f - mp[vert.below]*bio_up[vert.below]*bio_f[vert.below]
	}
	
}