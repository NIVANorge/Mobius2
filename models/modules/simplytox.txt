


module("SimplyTox", 0, 0, 1) {
"""
Testing functionality for now.
"""
	load("../../stdlib/physiochemistry.txt", library("Thermodynamics"))

	air   : compartment("Atmosphere")
	soil  : compartment("Soil")
	dsoil : compartment("Slow-accessible soil")
	gw    : compartment("Groundwater")
	river : compartment("River")
	
	water : quantity("Water")
	oc    : quantity("Organic carbon")
	tox   : quantity("Toxin")
	
	temp  : property("Temperature")
	
	tox.par_group("Physiochemistry") {
		molmass     : par_real("Contaminant molar mass", [g, mol-1], 50, 0, 1000)
		molvol      : par_real("Contaminant molar volume", [c m 3, mol-1], 20, 0, 1000)
		dUaw        : par_real("Enthalpy of phase transfer between air and water", [k J, mol-1], 0, -100, 100)
		dUow        : par_real("Enthalpy of phase transfer between octanol and water", [k J, mol-1], 0, -100, 100)
		dUoa        : par_real("Enthalpy of phase transfer between octanol and air", [k J, mol-1], 0, -100, 100)
		kH25        : par_real("Henry's constant at 25°C", [Pa, m 3, mol-1], 0, 0, 100)  #TODO: better default?
		log10Kow25  : par_real("log10 Octanol-water partitioning coefficient at 25°C", [], 0, -10, 10)
		log10Koa25  : par_real("log10 Octanol-air partitioning coefficient at 25°C", [], 0, -10, 10)
		rwoc        : par_real("Water-OC rate coefficient", [m, day-1],  0.5, 0, 3)
		rfs         : par_real("Fast-Slow rate coefficient", [k g, m-2, day-1], 0.05, 0, 3)
	}
	
	soil.par_group("Soil carbon") {
		mocf        : par_real("Soil organic carbon, fast accessible", [k g, m-2], 30, 0, 300)
		mocs        : par_real("Soil organic carbon, slow accessible", [k g, m-2], 3, 0, 300)
	}
	
	#TODO: actually have to be able to do something like this:
	#  soil.tox.par_group()
	# but that syntax could be confusing since soil.tox is not a valid location.
	
	# TODO: Production / resorption of soil carbon should maybe not exchange toxins. (Especially not like now where it goes to 'nowhere')
	
	soil.has(oc, [k g, m-2])  .initial { mocf }
	dsoil.has(oc, [k g, m-2]) .initial { mocs }
	
	soil.water.has(tox, [n g, m-2], [n g, l-1], "Soil water toxin")
	soil.oc.has(tox, [n g, m-2], [n g, k g-1], "Fast-accessible SOC toxin")
	dsoil.oc.has(tox, [n g, m-2], [n g, k g-1], "Slow-accessible SOC toxin")
	soil.water.oc.has(tox, [n g, m-2], [n g, k g-1], "Soil DOC toxin")
	
	air.has(prconc : property("Contaminant conc in precip"), [n g, m-3])
	precip : property("Precipitation")
	
	flux(nowhere, soil.water.tox, [n g, m-2, day-1], "Contaminant wet deposition") {
		air.precip * air.prconc ->>
	}
	
	Kow   : property("Octanol-water partitioning coefficient") {
		log10Kow := enthalpy_adjust_log10(log10Kow25, 25[deg_c]->[K], temp->[K], dUow)
		10^log10Kow
	}
	
	Koc   : property("SOC-water partitioning coefficient") {
		rhoSOC := 1900.0[k g, m-3]
		rOC    := 0.41   # Empirical constant.
		Kow * rOC / rhoSOC
	}
	
	Kdoc  : property("DOC-water partitioning coefficient") {
		rhoDOC := 1100.0[k g, m-3]
		(Kow - 0.45)^0.93 / rhoDOC
	}
	
	soil.water.tox.has(Kow, [])
	soil.water.tox.has(Koc, [m 3, k g-1])
	soil.water.tox.has(Kdoc, [m 3, k g-1])
	
	flux(soil.water.tox, soil.oc.tox, [n g, m-2, day-1], "Water-SOC contaminant exchange") {
		rwoc*((conc(water.tox)->[n g, m-3]) - conc(soil.oc.tox)/Koc)
	}
	
	flux(soil.water.tox, soil.water.oc.tox, [n g, m-2, day-1], "Water-DOC contaminant exchange") {
		rwoc*((conc(water.tox)->[n g, m-3]) - conc(water.oc.tox)/Kdoc)
	}
	
	flux(soil.oc.tox, dsoil.oc.tox, [n g, m-2, day-1], "Fast-Slow contaminant exchange") {
		rfs*(conc(soil.oc.tox) - conc(dsoil.oc.tox))
	}
	
	gw.water.has(tox, [n g, m-2], [n g, l-1])

	river.water.has(tox, [n g], [n g, l-1])
	river.water.oc.has(tox, [n g], [n g, k g-1])

	river.water.tox.has(Kow, [])
	river.water.tox.has(Koc, [m 3, k g-1])
	river.water.tox.has(Kdoc, [m 3, k g-1])
}



