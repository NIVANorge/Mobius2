
module("MAGIC core test", version(0, 0, 1),
	comp : compartment
) {
"""
This module is for now just for testing calling the MAGIC core from Mobius2. Will be turned into a full MAGIC model eventually.
"""
	
	par_group("Compartment parameters", comp) {
		depth     : par_real("Depth", [m], 1, 0, 100)
		porosity  : par_real("Porosity", [], 0.5, 0, 1)
		bd        : par_real("Bulk density", [k g, m-3], 600, 0, 2000)
		cec       : par_real("Cation exchange capacity", [m eq, k g-1], 100, 0, 500)
		#TODO: One of these has the wrong unit. Figure out which.
		so4_hs    : par_real("Soil sulfate adsorption capacity, half saturation", [m eq, m-3], 0, 0, 1000)
		so4_max   : par_real("Soil sulfate adsorption max capacity", [m eq, k g-1], 0, 0, 1)
		k_al      : par_real("(log10) Al(OH)3 dissociation equilibrium constant", [], 0, -10, 10)
		s_al      : par_real("Al(OH)3 dissociation equation exponent", [], 3, 1, 5)
		pk1_doc   : par_real("(-log10) pK 1st equilibrium constant for triprotic organic acid", [], 0, -10, 10)
		pk2_doc   : par_real("(-log10) pK 2nd equilibrium constant for triprotic organic acid", [], 0, -10, 10)
		pk3_doc   : par_real("(-log10) pK 3rd equilibrium constant for triprotic organic acid", [], 0, -10, 10)
		pk1_aldoc : par_real("(-log10) pK Al(A) equilibrium constant for [(Al3+)(A3-)]", [], 0, -10, 10)
		pk2_aldoc : par_real("(-log10) pK Al(HA)+ equilibrium constant for [(Al3+)(HA2-)+]", [], 0, -10, 10)
		init_eca  : par_real("Initial exchangeable Ca on soil as % of CEC", [perc], 0, 0, 100)
		init_emg  : par_real("Initial exchangeable Mg on soil as % of CEC", [perc], 0, 0, 100)
		init_ena  : par_real("Initial exchangeable Na on soil as % of CEC", [perc], 0, 0, 100)
		init_ek   : par_real("Initial exchangeable K on soil as % of CEC", [perc], 0, 0, 100)
	}
	
	par_group("Climate parameters", comp) {
		temp : par_real("Temperature", [deg_c], 10, -5, 20)
		pco2 : par_real("CO2 partial pressure", [perc], 0.3, 0.1, 2.0)
		conc_oa : par_real("Organic acid concentration", [m mol, m-3], 0, 0, 200)
	}
	
	par_group("Test parameters", comp) {
		tot_Ca : par_real("Total Ca", [m eq, m-2], 0)
		tot_Mg : par_real("Total Mg", [m eq, m-2], 0)
		tot_Na : par_real("Total Na", [m eq, m-2], 0)
		tot_K  : par_real("Total K", [m eq, m-2], 0)
		tot_NH4 : par_real("Total NH4", [m eq, m-2], 0)
		tot_SO4 : par_real("Total SO4", [m eq, m-2], 0)
		tot_Cl : par_real("Total Cl", [m eq, m-2], 0)
		tot_NO3 : par_real("Total NO3", [m eq, m-2], 0)
		tot_F : par_real("Total F", [m eq, m-2], 0)
		tot_PO4 : par_real("Total PO4", [m eq, m-2], 0)
		
		s_al_ca : par_real("Al-Ca selectivity coefficient", [], 0, -6, 6)
		s_al_mg : par_real("Al-Mg selectivity coefficient", [], 0, -6, 6)
		s_al_na : par_real("Al-Na selectivity coefficient", [], 0, -6, 6)
		s_al_k  : par_real("Al-K selectivity coefficient", [], 0, -6, 6)
	}
	
	conc_ca : property("Ca(2+) ionic concentration")
	conc_mg : property("Mg(2+) ionic concentration")
	conc_na : property("Na(+) ionic concentration")
	conc_k : property("K(+) ionic concentration")
	conc_nh4 : property("NH4(+) ionic concentration")
	conc_so4 : property("SO4(2-) ionic concentration")
	conc_cl  : property("Cl(-) ionic concentration")
	conc_no3 : property("NO3(-) ionic concentration")
	conc_f : property("F(-) ionic concentration")
	conc_po4 : property("PO4(3-) ionic concentration")
	
	conc_all_so4 : property("Total sulfate in solution (ionic + Al complexes)")
	conc_all_f   : property("Total fluoride in solution (ionic + Al complexes)")
	
	var(comp.conc_ca, [m mol, m-3])
	var(comp.conc_mg, [m mol, m-3])
	var(comp.conc_na, [m mol, m-3])
	var(comp.conc_k,  [m mol, m-3])
	var(comp.conc_nh4, [m mol, m-3])
	var(comp.conc_so4, [m mol, m-3])
	var(comp.conc_cl, [m mol, m-3])
	var(comp.conc_no3, [m mol, m-3])
	var(comp.conc_f, [m mol, m-3])
	var(comp.conc_po4, [m mol, m-3])
	
	var(comp.conc_all_so4, [m mol, m-3])
	var(comp.conc_all_f, [m mol, m-3])
	
	ph : property("pH")
	exch_ca : property("Exchangeable Ca on soil as % of CEC")
	exch_mg : property("Exchangeable Mg on soil as % of CEC")
	exch_na : property("Exchangeable Na on soil as % of CEC")
	exch_k  : property("Exchangeable K on soil as % of CEC")
	
	conc_hco3 : property("HCO3 (bicarbonate) ionic concentration")
	conc_co3  : property("CO3 (carbonate) ionic concentration")
	all_dic   : property("Total anionic charge from inorganic carbon in solution (HCO3, CO3)")
	all_doc   : property("Total anionic charge from DOC (triprotic acid) in solution (H2AM, HA2M, A3M)")
	
	conc_h    : property("H(+) ionic concentration")
	ionic_str : property("Ionic strength")
	
	var(comp.ph, [])
	var(comp.exch_ca, [perc])
	var(comp.exch_mg, [perc])
	var(comp.exch_na, [perc])
	var(comp.exch_k, [perc])
	var(comp.conc_hco3, [m mol, m-3])
	var(comp.conc_co3, [m mol, m-3])
	var(comp.all_dic, [m eq, m-3])
	var(comp.all_doc, [m eq, m-3])
	
	#TODO: Fix so that something with initial_code can still be a result().
	
	var(comp.conc_h, [m mol, m-3]) 
	#@initial {
	#	ph_guess := 6,
	#	1 / pow10(ph_guess - 6)
	#}
	
	var(comp.ionic_str, []) #@initial { 0 }

	external_computation("MAGIC Core", "magic_core", comp) {
		result(comp.conc_ca)
		result(comp.conc_mg)
		result(comp.conc_na)
		result(comp.conc_k)
		result(comp.conc_nh4)
		result(comp.conc_so4)
		result(comp.conc_cl)
		result(comp.conc_no3)
		result(comp.conc_f)
		result(comp.conc_po4)
		result(comp.conc_all_so4)
		result(comp.conc_all_f)
		result(comp.ph)
		result(comp.exch_ca)
		result(comp.exch_mg)
		result(comp.exch_na)
		result(comp.exch_k)
		result(comp.conc_hco3)
		result(comp.conc_co3)
		result(comp.all_doc)
		result(comp.all_dic)
		result(comp.conc_h)
		result(comp.ionic_str)
		tot_Ca
		tot_Mg
		tot_Na
		tot_K
		tot_NH4
		tot_SO4
		tot_Cl
		tot_NO3
		tot_F
		tot_PO4
		depth
		temp
		pco2
		conc_oa
		k_al
		s_al
		pk1_doc
		pk2_doc
		pk3_doc
		pk1_aldoc
		pk2_aldoc
		porosity
		bd
		cec
		so4_hs
		so4_max
		s_al_ca
		s_al_mg
		s_al_na
		s_al_k
	}
}