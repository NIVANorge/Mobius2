
module("AirSeaGas", version(0, 0, 0),
	air : compartment,
	layer : compartment,
	basin : compartment,
	water : quantity,
	ice : quantity,
	o2 : quantity,
	co2 : quantity,
	ch4 : quantity,
	temp : property,
	wind : property,
	precip : property,
	o2satconc : property,
	ice_ind : loc,
	vert : connection,
	dims : preamble
) {

	load("stdlib/seawater.txt", library("Sea oxygen"))
	load("stdlib/physiochemistry.txt", library("Chemistry"))
	
	p_vel     : property("O₂ piston velocity")
	pco2_vel  : property("CO₂ piston velocity")
	pch4_vel  : property("CH4 piston velocity")
	
	var(basin.p_vel, [c m, hr-1]) {
		o2_piston_velocity(air.wind, layer.water.temp[vert.top])
	}
	
	## TO DO: decide whether to add this in the stdlib together with p_vel for O2.
	var(basin.pco2_vel, [c m, hr-1]) {
		wnd := air.wind => [],
		k_600 := 2.07 + 0.215* (wnd^1.7) => [],
		t := layer.water.temp[vert.top] =>[],
		schmidt := 1923.6-125.06*t +4.3773*t^2 -0.085681*t^3+0.00070284*t^4,
		k_600* min(2.5,(schmidt/600)^(-0.666)) => [c m, hr-1]
	}
	
	## TO DO: decide whether to add this in the stdlib together with p_vel for O2.
	var(basin.pch4_vel, [c m, hr-1]) {
		wnd := air.wind => [],
		k_600 := 2.07 + 0.215* (wnd^1.7) => [],
		t := layer.water.temp[vert.top] =>[],
		schmidt := 1909.4-120.78*t +4.1555*t^2 -0.080578*t^3+0.00065777*t^4,
		k_600* min(2.5,(schmidt/600)^(-0.666)) => [c m, hr-1]
	}
	
	flux(out, layer.water.o2[vert.top], [k g, day-1], "Precipitation O₂") {
		precip_saturation := 0.9, # Probably ok estimate? Not extremely important in any case.
		cnc := precip_saturation*o2_saturation(air.temp, 0)*o2_mol_mass,
		air.precip*A[vert.top]*cnc->>
	}
	
	flux(layer.water.o2[vert.top], out,  [k g, day-1], "O₂ gas exchange at surface") {
		(!ice_ind) * basin.p_vel*(conc(o2[vert.top]) - o2satconc[vert.top])*A[vert.top] ->>
	}
	
	
	#	flux(layer.water.co2[vert.top], out,  [k g, day-1], "CO₂ gas exchange at surface") {
	#		(!basin.ice.indicator) * basin.pco2_vel*(conc(co2[vert.top]) - co2satconc[vert.top])*A[vert.top] ->>
	#	}
	
	flux(layer.water.ch4[vert.top], out, [k g, day-1], "CH4 gas exchange at surface") {
		top_t := (layer.water.temp[vert.top]->[K]) =>[],
		
		Kh := exp( (-365.183 + 18103.7/top_t + 49.7554*ln(top_t) - 0.000285033*top_t)/1.9872)/55.556,

		#ch4_eq := 2.3 / 1000000 * Kh, ## pch4 in ppm : 2.3 ppm, ch4_eq in M	
		#(!ice_ind) * 0.01[m, c m-1]* 24[hr, day-1] * basin.pch4_vel * (conc(layer.water.ch4[vert.top]) - (ch4_eq * 16000[m g, l-1])) *A[vert.top] / 1000000[m g, k g-1] * 1000[l, m-3]
		
		ch4_eq := 16000[m g, l-1] * Kh * 2.3 / 1000000,
		(!ice_ind) * basin.pch4_vel * (conc(layer.water.ch4[vert.top]) - ch4_eq) * A[vert.top] ->>
	}
}

module("AirSeaGas FPV", version(0, 0, 0),
	air : compartment,
	layer : compartment,
	basin : compartment,
	water : quantity,
	ice : quantity,
	o2 : quantity,
	co2 : quantity,
	ch4 : quantity,
	temp : property,
	wind : property,
	precip : property,
	o2satconc : property,
	ice_ind : loc,
	vert : connection,
	cov : par_real,
	FPV_gas : par_real,
	dims : preamble
) {

	load("stdlib/seawater.txt", library("Sea oxygen"))
	load("stdlib/physiochemistry.txt", library("Chemistry"))
	
	p_vel     : property("O₂ piston velocity")
	pco2_vel  : property("CO₂ piston velocity")
	pch4_vel  : property("CH4 piston velocity")
	
	var(basin.p_vel, [c m, hr-1]) {
		o2_piston_velocity(air.wind, layer.water.temp[vert.top])
	}
	
	## TO DO: decide whether to add this in the stdlib together with p_vel for O2.
	var(basin.pco2_vel, [c m, hr-1]) {
		wnd := air.wind => [],
		k_600 := 2.07 + 0.215* (wnd^1.7) => [],
		t := layer.water.temp[vert.top] =>[],
		schmidt := 1923.6-125.06*t +4.3773*t^2 -0.085681*t^3+0.00070284*t^4,
		k_600* min(2.5,(schmidt/600)^(-0.666)) => [c m, hr-1]
	}
	
	## TO DO: decide whether to add this in the stdlib together with p_vel for O2.
	var(basin.pch4_vel, [c m, hr-1]) {
		wnd := air.wind => [],
		k_600 := 2.07 + 0.215* (wnd^1.7) => [],
		t := layer.water.temp[vert.top] =>[],
		schmidt := 1909.4-120.78*t +4.1555*t^2 -0.080578*t^3+0.00065777*t^4,
		k_600* min(2.5,(schmidt/600)^(-0.666)) => [c m, hr-1]
	}
	
	flux(out, layer.water.o2[vert.top], [k g, day-1], "Precipitation O₂") {
		precip_saturation := 0.9, # Probably ok estimate? Not extremely important in any case.
		cnc := precip_saturation*o2_saturation(air.temp, 0)*o2_mol_mass,
		air.precip*A[vert.top]*cnc->>
	}
	
	flux(layer.water.o2[vert.top], out,  [k g, day-1], "O₂ gas exchange at surface") {
		(!ice_ind) * basin.p_vel*(conc(o2[vert.top]) - o2satconc[vert.top])*A[vert.top] ->>
	}
	
	
	#	flux(layer.water.co2[vert.top], out,  [k g, day-1], "CO₂ gas exchange at surface") {
	#		(!basin.ice.indicator) * basin.pco2_vel*(conc(co2[vert.top]) - co2satconc[vert.top])*A[vert.top] ->>
	#	}
	
	flux(layer.water.ch4[vert.top], out, [k g, day-1], "CH4 gas exchange at surface") {
		top_t := (layer.water.temp[vert.top]->[K]) =>[],
		
		Kh := exp( (-365.183 + 18103.7/top_t + 49.7554*ln(top_t) - 0.000285033*top_t)/1.9872)/55.556,

		#ch4_eq := 2.3 / 1000000 * Kh, ## pch4 in ppm : 2.3 ppm, ch4_eq in M	
		#(!ice_ind) * 0.01[m, c m-1]* 24[hr, day-1] * basin.pch4_vel * (conc(layer.water.ch4[vert.top]) - (ch4_eq * 16000[m g, l-1])) *A[vert.top] / 1000000[m g, k g-1] * 1000[l, m-3]
		
		ch4_eq := 16000[m g, l-1] * Kh * 2.3 / 1000000,
		(!ice_ind) * (1 - FPV_gas) * basin.pch4_vel * (conc(layer.water.ch4[vert.top]) - ch4_eq) * A[vert.top] ->>
	}
}