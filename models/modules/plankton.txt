
preamble("Phytoplankton parameters", version(0, 0, 0),
	basin : compartment,
	phyt : quantity,
) {
	par_group("Phytoplankton", phyt) {
		phyt_eq_20    : par_real("Chl-a of phyto at equilibrium", [m g, l-1], 0.01, 0, 5, "Assuming 20°C and no nutrient or light limitations.")
		phyt_q10      : par_real("Q10 of Phyto equilibrium", [], 2, 1, 4, "Adjustment of rate with 10°C change in temperature")
		phyt_turnover : par_real("Phytoplankton turnover rate", [day-1], 0.2, 0.05, 0.4)
		
		iopt          : par_real("Optimal PAR intensity", [W, m-2], 100, 50, 250)
		alpha         : par_real("Half-saturation for nutrient uptake", [m mol, m-3], 1.65625, 1, 10)
		phyt_cn       : par_real("Molar C/N ratio in Phytoplankton", [], 6.625, 1, 100, "The default is the Redfield ratio")
		phyt_cp       : par_real("Molar C/P ratio in Phytoplankton", [], 106, 50, 200, "The default is the Redfield ratio")
		excr          : par_real("Phytoplankton excretion rate", [day-1], 0.01, 0, 0.1)
		
		chl_a_f       : par_real("Chl-a fraction", [perc], 2, 0.2, 2.2, "How large a fraction of the phytoplankton mass is chlorophyll a")
	}
	
	par_group("Basin specific phytoplankton", basin) {
		phyt_a : par_real("Phytoplankton amenability", [], 1, 0.5, 1.5, "Adjustment factor to account for shallow lakes being better for plankton, after taking nutrients and light into consideration")
	}
	
	# Parametrize these?
	f_par           : constant("Fraction of PAR in SW radiation", [], 0.45)  # Photosynthetically available radiation
	phyt_ox_th      : constant("Phytoplankton oxicity threshold", [m g, l-1], 2)
	phyt_death_anox : constant("Phytoplankton increased death rate from anoxicity", [], 10) 
}


module("Phytoplankton", version(0, 0, 0),
	layer : compartment,
	water : quantity,
	phyt  : quantity,
	oc    : quantity,
	on    : quantity,
	op    : quantity,
	o2    : quantity,
	din   : quantity,
	phos  : quantity,
	sed   : quantity,
	chl_a : property,
	sw    : property,
	temp  : property,
	phyt_par : preamble,
) {
"""
A phytoplankton module that is based on non-exponential growth. This is more stable and easier to calibrate, but can some times miss growth peaks.

Authors: Magnus Dahler Norling, François Clayer
"""

	load("stdlib/physiochemistry.txt", library("Chemistry"))
	load("stdlib/basic_math.txt", library("Response"))
	
	light_lim : property("Light limitation")
	N_lim     : property("Nitrogen limitation")
	P_lim     : property("Phosphorus limitation")
	
	equi : property("Equilibrium concentration")
	fix : property("Photosynthetic C fixation")
	
	var(layer.water.phyt,    [k g], [m g, l-1], "Layer phytoplankton")
	var(layer.water.phyt.oc, [k g], "Phytoplankton C") @override_conc { 1 } # Phyto is measured in C equivalents here.
	var(layer.water.phyt.on, [k g], "Phytoplankton N") @override_conc { 1/cn_molar_to_mass_ratio(phyt_cn) }
	var(layer.water.phyt.op, [k g], "Phytoplankton P") @override_conc { 1/cp_molar_to_mass_ratio(phyt_cp) }
	
	var(layer.water.phyt.light_lim, []) {
		par_sw := sw*f_par,
		f := par_sw/max(0.5*par_sw, iopt),
		f*exp(1 - f)
	} @no_store
	
	var(layer.water.phyt.N_lim, []) {
		#NOTE: Use N molar mass instead of NO3 since that is what we track in the model (e.g. DIN is modeled as mg(N)/l)
		cmol := phyt_cn*conc(water.din)/n_mol_mass->[m mol, m-3],
		cmol^2 / ((alpha/phyt_cn)^2 + cmol^2)
	} @no_store
	
	var(layer.water.phyt.P_lim, []) {
		#NOTE: Use P molar mass instead of PO4 since that is what we track in the model
		cmol := conc(water.phos)/p_mol_mass->[m mol, m-3],
		cmol^2 / ((alpha/phyt_cp)^2 + cmol^2)
	} @no_store
	
	var(layer.water.phyt.equi, [m g, l-1], "Phytoplankton equilibrium concentration") {
		phyt_eq := phyt_a*q10_adjust(phyt_eq_20, 20[deg_c], temp, phyt_q10) / (chl_a_f->[]),
		phyt_eq*min(light_lim, min(N_lim, P_lim))
	} @no_store
	
	var(layer.water.phyt.fix, [k g, day-1]) {
		phyt_turnover*equi*water ->>
	} @no_store
	
	flux(out, layer.water.phyt, [k g, day-1], "Phytoplankton growth") {   fix   }
	# A bit awkward, had to make these negative in opposite direction in order to get aggregation.. (when they are distributed over multiple phyt types)
	flux(layer.water.phyt.on, layer.water.din, [k g, day-1], "Phytoplankton growth N uptake") {   -phyt.fix/cn_molar_to_mass_ratio(phyt_cn)   } @no_store
	flux(layer.water.phyt.op, layer.water.phos, [k g, day-1], "Phytoplankton growth P uptake") {   -phyt.fix/cp_molar_to_mass_ratio(phyt_cp)   } @no_store
	
	flux(layer.water.phyt,    layer.water.oc, [k g, day-1], "Phytoplankton C excretion") { excr*phyt } @no_store
	flux(layer.water.phyt.on, layer.water.on, [k g, day-1], "Phytoplankton N excretion") { excr*phyt.on } @no_store
	flux(layer.water.phyt.op, layer.water.op, [k g, day-1], "Phytoplankton P excretion") { excr*phyt.op } @no_store
	
	flux(layer.water.phyt, layer.water.sed, [k g, day-1], "Phytoplankton death")  {
		wd := 0.5,
		o2_factor := s_response(conc(o2), (1-wd)*phyt_ox_th, (1+wd)*phyt_ox_th, phyt_death_anox, 1),
		phyt_turnover*phyt*o2_factor
	}
	
	flux(out, layer.water.o2, [k g, day-1], "Layer O₂ photosynthesis") {   aggregate(phyt.fix)*o2_mol_mass/c_mol_mass   }  # *O2toC?
	
	var(layer.water.phyt.chl_a, [m g, l-1], "Phyto chl-a") {   conc(phyt)*chl_a_f->>   }
	
	var(layer.water.chl_a, [m g, l-1], "Layer chl-a") {   aggregate(phyt.chl_a)   } # Hmm, only relevant if we have many species of phyto.
	
}


preamble("Phytoplankton parameters 2", version(0, 0, 1),
	basin : compartment,
	phyt : quantity,
) {
	par_group("Phytoplankton", phyt) {
		
		phyt_q10      : par_real("Q10 of Phyto growth", [], 2, 1, 4, "Adjustment of rate with 10°C change in temperature")
		phyt_grow     : par_real("Phyto max growth rate", [day-1], 0.2, 0.05, 1, "At 20°C")
		phyt_death    : par_real("Phyto death rate", [day-1], 0.15, 0.05, 0.4)
			@formerly("Phyto respiration rate")
		iopt          : par_real("Optimal PAR intensity", [W, m-2], 100, 50, 250)
		alpha         : par_real("Half-saturation for nutrient uptake", [], 0.1, 0.01, 10)
		phyt_cn       : par_real("Molar C/N ratio in Phytoplankton", [], 6.625, 1, 100, "The default is the Redfield ratio")
		phyt_cp       : par_real("Molar C/P ratio in Phytoplankton", [], 106, 50, 200, "The default is the Redfield ratio")
		excr          : par_real("Phytoplankton excretion rate", [day-1], 0.01, 0, 0.1)
		chl_a_f       : par_real("Chl-a fraction", [perc], 2, 0.2, 2.2, "How large a fraction of the phytoplankton mass is chlorophyll a")
	}
	
	# Parametrize these?
	f_par           : constant("Fraction of PAR in SW radiation", [], 0.45)  # Photosynthetically available radiation
	phyt_ox_th      : constant("Phytoplankton oxicity threshold", [m g, l-1], 2)
	phyt_death_anox : constant("Phytoplankton increased death rate from anoxicity", [], 10) 
}


module("Phytoplankton 2", version(0, 0, 0),
	layer : compartment,
	water : quantity,
	phyt  : quantity,
	oc    : quantity,
	on    : quantity,
	op    : quantity,
	o2    : quantity,
	din   : quantity,
	phos  : quantity,
	sed   : quantity,
	chl_a : property,
	sw    : property,
	temp  : property,
	phyt_par : preamble,
) {
"""
A phytoplankton module that is based on non-exponential growth. This is more stable and easier to calibrate, but can some times miss growth peaks.

Authors: Magnus Dahler Norling, François Clayer
"""

	load("stdlib/physiochemistry.txt", library("Chemistry"))
	load("stdlib/basic_math.txt", library("Response"))
	
	
	par_group("Initial phytoplankton", layer, phyt) {
		init_chla : par_real("Initial chl-a concentration", [mu g, l-1], 0, 0, 100)
	}
	
	light_lim : property("Light limitation")
	N_lim     : property("Nitrogen limitation")
	P_lim     : property("Phosphorus limitation")
	
	fix : property("Photosynthetic C fixation")
	
	var(layer.water.phyt,    [k g], [m g, l-1], "Layer phytoplankton") @initial_conc {
		init_chla/chl_a_f ->>
	}
	var(layer.water.phyt.oc, [k g], "Phytoplankton C") @override_conc { 1 } # Phyto is measured in C equivalents here.
	var(layer.water.phyt.on, [k g], "Phytoplankton N") @override_conc { 1/cn_molar_to_mass_ratio(phyt_cn) }
	var(layer.water.phyt.op, [k g], "Phytoplankton P") @override_conc { 1/cp_molar_to_mass_ratio(phyt_cp) }
	
	var(layer.water.phyt.light_lim, []) {
		par_sw := sw*f_par,
		f := par_sw/max(0.5*par_sw, iopt),
		f*exp(1 - f)
	} @no_store
	
	minphyt : constant("Min phyto saturation", [m g, l-1], 0.01)
	
	var(layer.water.phyt.N_lim, []) {
		#NOTE: Use N molar mass instead of NO3 since that is what we track in the model (e.g. DIN is modeled as mg(N)/l)
		p := min(conc(phyt), minphyt)*water,
		phyt_mol_n := p/(phyt_cn*c_mol_mass)->[mol],
		nut_mol_n := water.din/n_mol_mass->[mol],
		ratio2 := (nut_mol_n / phyt_mol_n)^2,
		ratio2/(ratio2 + alpha)
	} @no_store
	
	var(layer.water.phyt.P_lim, []) {
		#NOTE: Use P molar mass instead of PO4 since that is what we track in the model
		p := min(conc(phyt), minphyt)*water,
		phyt_mol_p := p/(phyt_cp*c_mol_mass)->[mol],
		nut_mol_p := water.phos/p_mol_mass->[mol],
		ratio2 := (nut_mol_p / phyt_mol_p)^2,
		ratio2/(ratio2 + alpha)
	} @no_store
	
	var(layer.water.phyt.fix, [k g, day-1]) {
		lim := min(light_lim, min(N_lim, P_lim)),
		maxrate := q10_adjust(phyt_grow, 20[deg_c], temp, phyt_q10),
		maxrate*lim*phyt->>
	} @no_store
	
	flux(out, layer.water.phyt, [k g, day-1], "Phytoplankton growth") {   fix   }
	# A bit awkward, had to make these negative in opposite direction in order to get aggregation.. (when they are distributed over multiple phyt types)
	flux(layer.water.phyt.on, layer.water.din, [k g, day-1], "Phytoplankton growth N uptake") {   -phyt.fix/cn_molar_to_mass_ratio(phyt_cn)   } @no_store
	flux(layer.water.phyt.op, layer.water.phos, [k g, day-1], "Phytoplankton growth P uptake") {  -phyt.fix/cp_molar_to_mass_ratio(phyt_cp)   } @no_store
	
	flux(layer.water.phyt,    layer.water.oc, [k g, day-1], "Phytoplankton C excretion") { excr*phyt } @no_store
	flux(layer.water.phyt.on, layer.water.on, [k g, day-1], "Phytoplankton N excretion") { excr*phyt.on } @no_store
	flux(layer.water.phyt.op, layer.water.op, [k g, day-1], "Phytoplankton P excretion") { excr*phyt.op } @no_store
	
	flux(layer.water.phyt, layer.water.sed, [k g, day-1], "Phytoplankton death")  {
		wd := 0.5,
		o2_factor := s_response(conc(o2), (1-wd)*phyt_ox_th, (1+wd)*phyt_ox_th, phyt_death_anox, 1),
		phyt_death*phyt*o2_factor
	}
	
	flux(out, layer.water.o2, [k g, day-1], "Layer O₂ photosynthesis") {   aggregate(phyt.fix)*o2_mol_mass/c_mol_mass   }  # *O2toC?
	
	var(layer.water.phyt.chl_a, [m g, l-1], "Phyto chl-a") {   conc(phyt)*chl_a_f->>   }
	
	var(layer.water.chl_a, [m g, l-1], "Layer chl-a") {   aggregate(phyt.chl_a)   } # Hmm, only relevant if we have many species of phyto.
	
}