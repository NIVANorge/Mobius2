

module("HBVSnow", version(1, 0, 0)) {
"""
This is an adaption of the snow module from HBV-Nordic (SÃ¦lthun 1995)

[NVE home page](https://www.nve.no/vann-og-vassdrag/vannets-kretslop/analysemetoder-og-modeller/hbv-modellen/)

[Model description](https://www.uio.no/studier/emner/matnat/geofag/nedlagte-emner/GEO4430/v06/undervisningsmateriale/HBVMOD.PDF)
"""
	air        : compartment("Atmosphere")
	snow_box   : compartment("Snow box")
	
	snow_box.par_group("Snow") {
		ddf_melt  : par_real("Degree-day factor for snowmelt", [m m, deg_c-1, day-1], 2.74, 0, 5, "Linear correlation between rate of snow melt and air temperature")
		t_snow    : par_real("Temperature at which precip falls as snow", [deg_c], 0, -4, 4)
		t_melt    : par_real("Temperature at which snow melts", [deg_c], 0, -4, 4)
		refr_eff  : par_real("Refreeze efficiency", [], 0.5, 0, 1, "Speed of refreeze of liquid water in snow relative to speed of melt at the opposite temperature differential")
		snow_liq  : par_real("Liquid water fraction", [], 0.5, 0, 1, "How many mm liquid water one mm of snow (water equivalents) can hold before it is released")
		init_snow : par_real("Initial snow depth (water equivalents)", [m m], 0, 0, 50000)
	}
	
	snow  : quantity("Snow (water equivalents)")
	water : quantity("Water")
	
	temp : property("Temperature")
	precip : property("Precipitation")
	
	# note: We don't give a function body to compute temp and precip, and so if they are not re-declared in another module, they are assumed to be input series.
	var(air.temp, [deg_c], "Air temperature")
	var(air.precip, [m m, day-1])
	
	var(snow_box.snow,  [m m], "Snow depth") @initial { init_snow }
	var(snow_box.water, [m m], "Snow water") #@initial { 0 }             # Not necessary to declare initial here, default is 0.
	
	flux(nowhere, snow_box.snow, [m m, day-1], "Precipitation falling as snow") {
		#air.precip    if air.temp <= t_snow,
		#0             otherwise
		air.precip * (air.temp <= t_snow)  # Making use of auto-cast of boolean->real
	}
	
	p_rain :
	flux(nowhere, out, [m m, day-1], "Precipitation falling as rain") {
		#air.precip    if air.temp > t_snow,
		#0             otherwise
		air.precip * (air.temp > t_snow)
	}
	
	melt :
	flux(snow_box.snow, snow_box.water, [m m, day-1], "Melt")     {   max(0, ddf_melt*(air.temp - t_melt))   }
	
	refreeze :
	flux(snow_box.water, snow_box.snow, [m m, day-1], "Refreeze") {   max(0, refr_eff*ddf_melt*(t_melt - air.temp))  }

	melt_runoff :
	flux(snow_box.water, out, [m m, day-1], "Melt runoff")        {   max(0, water - snow*snow_liq)*1[day-1]  }
	
	discrete_order {
		#TODO: we also want to be able to specify special placement of add and sub instructions for these if necessary. But not for this model.
		melt
		refreeze
		melt_runoff
	}
}
