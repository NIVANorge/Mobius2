
module("Degree-day PET", 1, 0, 0) {
"This is a very simple potential evapotranspiration model using a linear relationship between PET and air temperature."
	
	air       : compartment("Atmosphere")
	soil      : compartment("Soil")

	soil.par_group("Potential evapotranspiration") {
		ddf_pet   : par_real("Deegree-day factor for evapotranspiration", [m m, deg_c -1, day -1], 0.12, 0.05, 0.2)
		pet_min_t : par_real("Minimal temperature for evapotranspiration", [deg_c], 0, -5, 5)
	}
	
	pet  : property("Potential evapotranspiration")
	temp : property("Temperature")
	
	soil.has(pet, [m m, day -1])                {   max(0, ddf_pet*(air.temp - pet_min_t))   }
}


module("Priestley-Taylor PET", 1, 0, 0) {
	
	load("../../stdlib/atmospheric.txt", library("Meteorology"))
	load("../../stdlib/physiochemistry.txt", library("Thermodynamics"), library("Water utils"))
	
	air       : compartment("Atmosphere")
	soil      : compartment("Soil")
	snow_box  : compartment("Snow box")
	
	snow  : quantity("Snow (water equivalents)")
	
	soil.par_group("Potential evapotranspiration") {
		apet : par_real("PET multiplication factor", [], 1.28, 0.3, 4.0)
		lalb : par_real("Land albedo", [], 0.23, 0, 1)
		salb : par_real("Snow albedo", [], 0.8,  0, 1)
	}
	
	pet      : property("Potential evapotranspiration")
	temp     : property("Temperature") #, unit(deg_c)
	pressure : property("Pressure")
	lwd      : property("Downwelling longwave radiation")
	g_rad    : property("Global radiation")
	
	soil.has(net_sw : property("Net shortwave"), [W, m-2]) {
		alb := {
			lalb     if snow_box.snow < 0.5[m m],
			salb     otherwise
		}
		air.g_rad * (1 - alb)
	}
	
	soil.has(lwu : property("Emitted longwave radiation"), [W, m-2]) {
		emissivity := 0.9 #TODO: Could maybe be made more granular.
		black_body_radiation(soil.temp->[K])
	}
	
	s_vap  : property("Saturation vapour pressure")
	
	soil.has(pet, [m m, day-1]) {                 #NOTE: we could factor some of these out as properties, which can be interesting to some for debugging
		lvap    := latent_heat_of_vaporization(air.temp)
		psy     := psychrometric_constant(air.pressure->[k Pa], lvap)
		slope   := slope_of_saturation_pressure_curve(air.temp, air.s_vap->[k Pa])
		net_rad := net_sw + air.lwd - lwu
		max(0, apet * (slope / (slope + psy)) * (net_rad / lvap)) / rho_water ->>
	}
}
