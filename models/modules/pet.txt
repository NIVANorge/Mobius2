
module("Degree-day PET", version(1, 0, 0),
	air  : compartment,
	soil : compartment,
	pet  : property,
	temp : property
) {
"This is a very simple potential evapotranspiration model using a linear relationship between PET and air temperature."
	
	par_group("Potential evapotranspiration", soil) {
		ddf_pet   : par_real("Deegree-day factor for evapotranspiration", [m m, deg_c -1, day -1], 0.12, 0.05, 0.2)
		pet_min_t : par_real("Minimal temperature for evapotranspiration", [deg_c], 0, -5, 5)
	}
	
	var(soil.pet, [m m, day -1])                {   max(0, ddf_pet*(air.temp - pet_min_t))   }
}


module("Penman-Monteith PET", version(1, 0, 0),
	air      : compartment,
	soil     : compartment,
	snow_box : compartment,
	snow     : quantity,
	temp     : property,
	pet      : property
	
) {
	# TODO: Docstring
	
	# TODO: Finish port to new module loading system.
	
	load("stdlib/atmospheric.txt", library("Meteorology"))
	load("stdlib/physiochemistry.txt", library("Thermodynamics"), library("Water utils"))
	
	par_group("Potential evapotranspiration", soil) {
		pt    : par_bool("Priestley-Taylor simplification", true, "Drops wind correction")
		apet  : par_real("PET multiplication factor", [], 1.28, 0.3, 4.0, "Only used with Priestley-Taylor")
		lalb  : par_real("Land albedo", [], 0.23, 0, 1)
		salb  : par_real("Snow albedo", [], 0.8,  0, 1)
		r_s   : par_real("Surface resistance", [s, m-1], 70, "Only used without Priestley-Taylor") #TODO: We could compute these based on other data like vegetation.
		r_a_w : par_real("Aerodynamic resistance / wind speed", [], 208, "Only used without Priestley-Taylor")
	}
	
	pressure : property("Pressure")
	lwd      : property("Downwelling longwave radiation")
	g_rad    : property("Global radiation")
	wind     : property("Wind speed")
	s_vap    : property("Saturation vapour pressure")
	a_vap    : property("Actual vapour pressure")
	
	net_sw : property("Net shortwave")
	lwu    : property("Emitted longwave radiation")
	
	var(soil.net_sw, [W, m-2]) {
		alb := {
			lalb     if snow_box.snow < 0.5[m m],
			salb     otherwise
		},
		air.g_rad * (1 - alb)
	}

	var(soil.lwu, [W, m-2]) {
		emissivity := 0.9, #TODO: Could maybe be made more granular.
		black_body_radiation(soil.temp->[K])
	}
	
	var(soil.pet, [m m, day-1]) {
		
		# Reference :  https://www.fao.org/3/x0490e/x0490e06.htm 
		
		 #NOTE: we could factor some of these out as properties, which can be interesting to some for debugging
		lvap    := latent_heat_of_vaporization(air.temp),
		psy     := psychrometric_constant(air.pressure->[k Pa], lvap),
		slope   := slope_of_saturation_pressure_curve(air.temp, air.s_vap->[k Pa]),
		net_rad := net_sw + air.lwd - lwu, # May need to substitute  with the net longwave here: https://www.fao.org/3/x0490e/x0490e07.htm because this doesn't seem to give good results.
		
		u := max(0.5[m, s-1], air.wind),
		# Modified psychrometric constant
		psy_corr := {
			psy                             if pt,
			psy * (1 + r_s*u/r_a_w)         otherwise
		},
		dp := (air.s_vap - air.a_vap) -> [k Pa],
		pressure_term := {
			0                                                                      if pt,
			(lvap*vapor_mol_to_mass/(Rdry_air*r_a_w))*u*dp/(1.01*(air.temp->[K]))  otherwise
		} -> [W, m-2],
		alpha := {
			apet         if pt,
			1            otherwise
		},
	
		# TODO: This is really for wind at 2m, and one should use daily min and max temperatures to compute some means of some of the things...
		
		et := alpha * (slope*net_rad + psy*pressure_term) / (slope + psy_corr),
		
		max(0, et/(lvap*rho_water))->>
	}
}
