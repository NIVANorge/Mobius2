

module("EasyLake", 0, 1, 0) {
"""
TODO: description
"""

	load("../../stdlib/atmospheric.txt", library("Meteorology"), library("Radiation"))
	load("../../stdlib/physiochemistry.txt", library("Thermodynamics"), library("Water utils"))
	load("../../stdlib/seawater.txt", library("Air-sea"))
	
	air  : compartment("Atmosphere")

	epi  : compartment("Epilimnion")
	hyp  : compartment("Hypolimnion")
	
	
	epi.par_group("Lake physical") {
		# TODO: copy the nice min-max values and comments from mobius 1 EasyLake
		A_surf    : par_real("Lake surface area", [m 2], 107183, 0, 1e8)
		z_outflow : par_real("Lake depth at which outflow is 0", [m], 10, 0.1, 1000)
		z_epi     : par_real("Initial epilimnion thickness", [m], 2, 0.1, 10)
		dz_epi    : par_real("Epilimnion thickening rate", [m, day-1], 0.01)
		#th_bank   : par_real("Lake shore slope", [], 0.4, 0, 4)
		rate_l    : par_real("Rating function linear component", [m 2, s-1], 10, 0, 1000)
		t_epi     : par_real("Initial epilimnion temperature", [deg_c], 15, 0, 50)
		t_bot     : par_real("Bottom temperature", [deg_c], 4, 0, 50)
		init_ice  : par_real("Initial ice thickness", [m], 0, 0, 10)
	}
	
	water  : quantity("Water")
	ice    : quantity("Ice")
	heat   : quantity("Thermal energy")
	
	temp   : property("Temperature")
	precip : property("Precipitation")
	
	air.has(temp,      [deg_c], "Air temperature")
	air.has(precip,    [m m, day-1])
	air.has(wind     : property("Wind speed"),        [m, s-1])
	air.has(r_hum    : property("Relative humidity"), [])
	air.has(pressure : property("Pressure"),          [h Pa], "Air pressure")
	air.has(cloud    : property("Cloud cover"),       [])
	air.has(g_rad    : property("Global radiation"),  [W, m-2])
	
	
	wedge_tip     : function(A : [m 2], z0 : [m], z : [m]) {
		0.5*A * z^2 / z0
	}
	
	wedge_section : function(A : [m 2], z0 : [m], z1 : [m], z2 : [m]) {
		wedge_tip(A, z0, z1) - wedge_tip(A, z0, z2)
	}
	
	
	epi.has(water, [m 3], "Epilimnion volume")  .initial {   0.5 * A_surf * z_outflow - hyp.water   }
	
	hyp.has(water, [m 3], "Hypolimnion volume") .initial {
		z := z_outflow - z_epi
		A := A_surf * (z/z_outflow)
		0.5 * A * z
	}
	
	epi.has(z_e : property("Thickness"), [m], "Epilimnion thickness") .initial { z_epi }
	{
		last(z_e) + (dz_epi)*time.step_length_in_seconds->> if !epi.indicator & water.temp > t_bot,
		z_epi                                                                   otherwise
	} 
	
	#flux(epi.water, hyp.water, "Metalimnion movement") {
		#(0.5*A_surf/z_outflow)*(z_e^2-last(z_e)^2)/time.step_length_in_seconds->>
		#-0.5*A_surf*dz_epi^2/z_outflow       if !epi.indicator & water.temp > t_bot
		#(epi.water - 0.5*A_surf*z
		#wedge_section(A_surf, z_outflow, z_e+depth-z_outflow, last(z_e)+last(depth)-z_outflow)/time.step_length_in_seconds->>
	#	wedge_section(A_surf, z_outflow, z_outflow-z_e, z_outflow-last(z_e))/time.step_length_in_seconds->>
	#}
	
	flux(nowhere, epi.water, "Precipitation to lake")           {   air.precip * A_surf ->>   }
	
	epi.has(depth : property("Lake depth"), [m])                {   sqrt(2*(epi.water + hyp.water)*z_outflow/A_surf)   }
	
	epi.water.has(outflow : property("Flow"), [m 3, s-1], "Lake outflow") {   max(0, rate_l*(depth - z_outflow))   }

	lake_out :
	flux(epi.water, out, "Lake outflow flux")                   {   outflow ->>  }
	
	# TODO: should have some way of turning this on/off depending on use case.
	#epi.has(inflow : property("Lake inflow"), [m 3, s-1])
	#flux(nowhere, epi.water, "Lake inflow flux")                {   86400 * inflow   }
	
	rho_ice    : constant("Ice density", [k g, m-3], 917)
	l_freeze   : constant("Latent heat of freezing", [J, k g-1], 333500)
	lambda_ice : constant("Ice heat conduction coefficient", [W, m-1, K-1], 2.1)
	
	# Some of these could be parameters?
	th_frazil  : constant("Frazil threshold", [m], 0.05)
	ice_temp   : constant("Ice formation temperature", [deg_c], 0)
	
	epi.water.has(heat, [J]) .initial {
		water_temp_to_heat(water, t_epi)
	}
	
	hyp.water.has(heat, [J]) .initial {
		# TODO: initial hypolimnion temperature should be lower.
		water_temp_to_heat(water, t_epi)
	}
	
	epi.has(stab : property("Stability"), []) {
		surface_stability(air.wind, water.temp, air.temp)
	}
	
	epi.has(ced : property("Transfer coefficient for latent heat flux"), []) {
		tc_latent_heat(air.wind, stab)
	}
	
	epi.has(chd : property("Transfer coefficent for sensible heat flux"), []) {
		tc_sensible_heat(air.wind, stab)
	}
	
	# TODO: put some of this stuff into atmospheric module or library?
	
	air.has(a_vap : property("Actual vapor pressure"), [h Pa]) {
		svap := saturation_vapor_pressure_lowe(air.temp)
		air.r_hum * 0.01 * svap  # 0.01 to convert percent to true dimensionless. Maybe perc should be a unit equal to [100] so that it gets proper checking?
	}
	
	epi.has(s_hum : property("Saturation specific humidity"), []) {
		svap := saturation_vapor_pressure_lowe(water.temp)
		specific_humidity_from_pressure(air.pressure, svap)
	}
	
	epi.has(a_hum : property("Actual specific humidity"), []) {
		specific_humidity_from_pressure(air.pressure, air.a_vap)
	}
	
	# TODO: Atmospheric module
	air.has(rho : property("Air density"), [k g, m-3]) {
		air_density(temp, pressure, a_vap)
	}
	
	#TODO: Move some radiation stuff into a radiation module
	air.has(lwd : property("Downwelling longwave radiation"), [W, m-2]) {
		downwelling_longwave(air.temp, a_vap, cloud)
	}
	
	epi.has(lwu : property("Emitted longwave radiation"), [W, m-2]) {
		emissivity := 0.98
		emissivity * black_body_radiation(water.temp->[K])
	}
	
	#TODO should be attn in epi also, and remainder to hyp
	epi.has(sw : property("Shortwave radiation"), [W, m-2]) {
		albedo := 0.045  # TODO adjust for ice albedo (?)
		(1 - albedo) * (1 - ice.attn) * air.g_rad	
	}
	
	flux(nowhere, epi.water.heat, "Net shortwave") {
		A_surf * sw ->>
	}
	
	flux(nowhere, epi.water.heat, "Net longwave") {
		albedo := 0.045
		net_rad := (1 - albedo)*air.lwd - lwu    # W/m2
		0                              if epi.ice.indicator,
		A_surf * net_rad ->>           otherwise
	}
	
	flux(nowhere, epi.water.heat, "Freeze heating") {  A_surf * ice.energy ->>  }    # Energy used to melt ice instead of heating the lake (or other way around with freezing)
	
	# TODO: Some of the surface fluxes should be modified for ice
	flux(nowhere, epi.water.heat, "Latent heat flux") {
		l_vap := latent_heat_of_vaporization(temp)
		0                                                                          if epi.ice.indicator,
		A_surf * (ced * l_vap * air.rho * air.wind * (a_hum - s_hum)) ->>          otherwise
	}
	
	flux(nowhere, epi.water.heat, "Sensible heat flux") {
		0                                                                          if epi.ice.indicator,
		A_surf * (chd * C_air * air.rho * air.wind * (air.temp->[K] - temp->[K])) ->> otherwise
	}
	
	epi.water.has(evap_mm : property("Evaporation per area"), [m m, day-1]) {
		rho_ref := 1025 [k g, m-3]
		0                                                                          if epi.ice.indicator,
		-(air.rho / rho_ref) * chd * air.wind * (a_hum - s_hum) ->>                otherwise
	}
	
	evap :
	flux(epi.water, nowhere, "Evaporation") {
		evap_mm*A_surf ->>
	}
	
	flux(nowhere, epi.water.heat, "Precipitation heat") {
		#precip_t := max(0.4[deg_c], air.temp)
		precip_t := air.temp
		V := A_surf*air.precip -> [m 3, day-1]   
		water_temp_to_heat(V => [m 3], precip_t) => [J, day-1] # TODO: Not sure how to best express this. It is a bit annoying that the 1/day doesn't "pass through" the function
	}
	
	flux(epi.water.heat, hyp.water.heat, "Layer heat transfer") {
		lake_heat := water.heat + hyp.water.heat
		V := water + hyp.water
		lake_t := water_heat_to_temp(V, lake_heat) => [deg_c] # Mean lake temperature.    #TODO: remove force conversion.
		epi_t_should_be := (lake_t*V - 0.5*t_bot*hyp.water) / (water + 0.5*hyp.water)
		epi_heat_should_be := water_temp_to_heat(water, epi_t_should_be)
		5[day-1]*(heat - epi_heat_should_be)   # The 5 is pretty arbitrary. Just to get a quick equilibration
	}
	
	epi.water.has(temp, [deg_c], "Epilimnion temperature") {
		water_heat_to_temp(water, water.heat)
	} .initial { t_epi }
	
	hyp.water.has(temp, [deg_c], "Hypolimnion temperature (mean)") {
		water_heat_to_temp(water, water.heat)
	}
	
	epi.has(ice, [m], "Ice thickness") .initial { init_ice }
	
	epi.ice.has(energy : property("Freeze energy"), [W, m-2]) {
		z_surf := 1[m]   #  Thickness of water layer that ice formation can draw energy from.
		K_ice := 200[W, m-3, deg_c-1]   # freezing/melting heat transfer coefficient ... should not affect magnitude of temperature or ice cover, only how fast they "converge"
		e := (ice_temp - epi.water.temp)*z_surf*K_ice
		
		0        if (ice < 1e-6[m]) & (e < 0),    # No melting when there is no ice
		e        otherwise
	}
	
	epi.ice.has(indicator : property("Indicator"), [], "Ice indicator") {   ice > th_frazil   }
	
	epi.ice.has(attn : property("Attenuation coefficent"), []) {
		0                       if !indicator,
		1 - exp(-5[m -1] * ice) otherwise    #TODO: the 5 should be configurable?
	}
	
	flux(nowhere, epi.ice, "Ice change") {
		(energy + {
			{
				#NOTE: Stefan's law, but turned into ODE equation:
				# ice_n = sqrt(ice_{n-1}^2 + Y)  with   Y = 2*lambda_ice*(ice_temp - ice_t)
				# => d(ice^2)/dt = Y
				# and d(ice^2)/dt = 2*ice*d(ice)/dt
				# => d(ice)/dt = Y / (2*ice)
				factor := 1[m] / (10[m] + ice)
				ice_t := (factor * ice_temp + air.temp) / (1 + factor)   # Approximation of ice temperature. TODO: separate state var?
				lambda_ice * (ice_temp->[K] - ice_t->[K]) / ice
			}                                             if air.temp <= ice_temp & indicator,
			{   #TODO: should just reuse computation for surface net shortwave ?
				albedo := 0.045
				#0 - ((1-albedo)*(air.lwd + air.g_rad*attn) - lake.lwu)
				0 - (1-albedo)*air.g_rad*attn
			}                                             if indicator,  
			0                                             otherwise
		}) / (rho_ice * l_freeze) ->[m, day-1]
		+ {
			air.precip   if air.temp <= ice_temp & indicator,     # if there is ice, and temperature is below freezing, precipitation is added as ice
			0            otherwise
		}->[m, day-1]
	}
	
	
	# TODO: How does mixing interact with ice (?)
	
	epi.has(indicator, [], "Mixing indicator") { abs(water.temp - hyp.water.temp) < 0.4[deg_c] }
	
	
	# NOTE: This moves an equal body of water up and down, which does not impact the wate volume, but does mix dissolved substances.
	
	mix_down :
	flux(epi.water, hyp.water, "Mixing down") {
		A_surf * depth * epi.indicator * 1[day-1]
	}
	
	mix_up : 
	flux(hyp.water, epi.water, "Mixing up") {
		A_surf * epi.depth * epi.indicator * 1[day-1]
	}
}