

module("EasyLake", version(0, 1, 0),
	epi    : compartment,
	hyp    : compartment,
	water  : quantity,
	heat   : quantity,
	temp   : property,
	th     : property,
	freeze_temp : property,
	area   : property,
	epi_target : loc
) {
"""
This is a very simple lake model for use along with cathcment models.

The physical part of the model simulates water balance and temperature.

The lake can also be equipped with an ice module (defined in the AirSea module).

The water balance part of the model is conceptually similar to VEMALA
[A National-Scale Nutrient Loading Model for Finnish Watersheds - VEMALA, Inse Huttunen et. al. 2016, Environ Model Assess 21, 83-109](https://doi.org/10.1007/s10666-015-9470-6), 
but allows for more specific parametrization of the lake shape.

The internal heat distribution is inspired by (but not as complex as) the [FLake model](http://www.flake.igb-berlin.de/).

We assume that the hypsograph of the lake follows a shape so that

$$
A(z) = A_0 * \left(\frac{z_{max}-z}{z_{max}\right)^{\theta+1)}
$$

where $$A(z)$$ is the area of the horizontal cross-section of the lake at depth $$z$$, $$z_{max}$$ is the max depth of the lake, $A_0$ is the surface area at the zero level of the outlet, and $$\theta$$ is a parameter.

We also assume that the discharge is linearly proportional to the water level at the outlet.

The lake is partitioned into an epilimnion and a hypolimnion. The epilimnion is assumed to have a temperature profile that does not depend on the depth. In the hypolimnion, the temperature profile follows

$$
T(z) = ((T_e - T_b)\left(\frac{z_{max}-z}{z_{max}\right)^2 + T_b\; z > z_e
$$

Where $$T_e$$ is current epilimnion temperature and $$T_b$$ is bottom temperature (user-defined constant parameter), and $$z_e$$ is epilimnion thickness. The total heat of the lake is then proportional to

$$
\int_0^{z_{max}} A(z)T(z)\mathrm{d}z
$$

which has an exact solution, which one can back-solve for $$T_e$$ if the total heat of the lake is known.

The total heat is computed as an ordinary differential equation, and depends mostly on surface heat exchange (computed by the AirSea module).

The epilimnion is set to have a dynamic thickness. This is not simulated, but is instead determined by user-defined empirical parameters. The epilimnion and hypolimnion mix when the difference between epilimnion temperature and mean hypolimnion temperature is less than 0.4Â°C (typically in spring and autumn).

The thickness is set to have a given winter value, then is set to an initial thickness after spring mixing, after which it increases linearly.
"""

	load("stdlib/physiochemistry.txt", library("Water utils"))
	
	par_group("Lake physical", epi) {
		A_surf    : par_real("Lake surface area", [m 2], 107183, 0, 371e9)
		z_outflow : par_real("Water level at which outflow is 0", [m], 10, 0.1, 1642.0)
		th_epi_w  : par_real("Winter epilimnion thickness", [m], 2, 0.1, 10)
		th_epi_s  : par_real("Spring epilimnion thickness", [m], 2, 0.1, 10)
		theta     : par_real("Lake bathymetry factor", [], 0, 0, 1, "The cross-section area of the lake at level z is A_0*(z/z_0)^theta")
		dz_epi    : par_real("Epilimnion thickening rate", [m, day-1], 0.01, "How fast the thickness of the epilimnion changes during summer")
		rate_l    : par_real("Rating function linear component", [m 2, s-1], 10, 0, 1000)
		t_epi     : par_real("Initial epilimnion temperature", [deg_c], 15, 0, 50)
		t_bot     : par_real("Bottom temperature", [deg_c], 4, 0, 50)
	}
	
	# The basin has a horizontal cross-section that is parametrized by A_surf (surface area when outflow is 0), z_outflow (max depth when outflow is 0) and theta (a shape factor)
	
	# The horizontal cross-section at a given level z is
	# 	A(z) = A_surf*(z/z0)^(1+theta)
	# The volume is equal to
	# 	V(z) = integral(A(z)dz, 0, z) = A_surf * z * ((z/z_0)^(theta+1)) / (theta+2)
	
	shape_cross_section_A : function(A_0 : [m 2], z_0 : [m], z : [m], theta : []) {
		A_0 * ((z/z_0)^(theta+1))
	}
	
	shape_tip_V     : function(A_0 : [m 2], z_0 : [m], z : [m], theta : []) {
		A_0 * z * ((z/z_0)^(theta+1)) / (theta+2)
	}
	
	# This is the volume of a vertical section of the basin between levels z1 and z2
	shape_section_V : function(A_0 : [m 2], z_0 : [m], z1 : [m], z2 : [m], theta : []) {
		shape_tip_V(A_0, z_0, z1, theta) - shape_tip_V(A_0, z_0, z2, theta)
	}
	
	# This is the level of the basin if it has volume V
	shape_tip_z     : function(A_0 : [m 2], z_0 : [m], V : [m 3], theta : []) {
		# The unit checker doesn't understand this case..
		zz_0 := z_0 => [],
		f := (V*(theta+2)*(zz_0^(theta+1))/A_0) => [],
		f^(1/(theta+2)) => [m]
	}
	
	# This formula is integral(A(z)*T(z)dz, 0, z_e) where T(z) is the temperature profile in the hypolimnion, set in this model to be
	#   T(z) = ((T_e - T_b)*(z/z_0)^2 + T_b
	# where T_e is epilimnion temperature and T_b is bottom temperature
	# Can be symbolically integrated e.g. in sympy:
	#	integrate((((T_e - T_b)/z_e**2)*z**2 + T_b)*((z/z_0)**(theta+1)), (z, 0, z_e))
	hypo_temperature_integral : function(A_0 : [m 2], T_e : [deg_c], T_b : [deg_c], z_e : [m], z_0 : [m], theta : []) {
		(2*T_b + (theta+2)*T_e)*A_0*((z_e^3)*(z_e/z_0)^(theta+1))/((theta^2 + 6*theta + 8)*z_e^2)
	}
	
	var(epi.freeze_temp, [deg_c], "Ice formation temperature") { 0[deg_c] }
	
	var(epi.water, [m 3], "Epilimnion volume")  @initial {   shape_section_V(A_surf, z_outflow, z_outflow, z_outflow-th, theta)  }
	
	var(hyp.water, [m 3], "Hypolimnion volume") @initial {   shape_tip_V(A_surf, z_outflow, z_outflow-epi.th, theta)   }
	
	level : property("Water level")

	# The thickness is relative to z_outflow, excess water above that is not counted in this variable,
	var(epi.th, [m], "Epilimnion thickness (relative to zero outflow)") {
		# Have to use last(ind) and last(water.temp) here so that it is not put on the solver.
		
		doy := time.day_of_year,
		
		spring_mixing := last(ind) & ((last(water.temp) > last(hyp.water.temp)) | doy < 150[day]),
		is_winter := (last(water.temp) < t_bot) & ((doy < 90[day]) | (doy > 275[day])),
		
		th_epi_s                                             if spring_mixing,
		th_epi_w                                             if is_winter,
		last(th) + (dz_epi)*time.step_length_in_seconds->>   otherwise
	} @initial { th_epi_w }
	
	flux(epi.water, hyp.water, [m 3, day-1], "Metalimnion movement") {
		hyp_vol_last := shape_tip_V(A_surf, z_outflow, z_outflow-last(th), theta),
		hyp_vol_now  := shape_tip_V(A_surf, z_outflow, z_outflow-th, theta),
		(hyp_vol_now - hyp_vol_last)/time.step_length_in_seconds->>
	} @bidirectional

	var(epi.level, [m], "Lake water level")                               {   shape_tip_z(A_surf, z_outflow, epi.water + hyp.water, theta) - z_outflow  }
	
	flux(epi.water, epi_target, [m 3, s-1], "Lake outflow flux")          {   max(0, rate_l*level)   }
	
	var(epi.area, [m 2], "Epilimnion surface area")                       {   shape_cross_section_A(A_surf, z_outflow, level+z_outflow, theta)   }
	
	var(hyp.area, [m 2], "Hypolimnion surface area")                      {	  shape_cross_section_A(A_surf, z_outflow, z_outflow-epi.th, theta)   }
	
	var(epi.water.heat, [J]) @initial                                     {   water_temp_to_heat(water, t_epi)   }
	
	var(hyp.water.heat, [J]) @initial {
		#TODO: This leads to it multiplying and dividing by water. That is unnecessary. Similar thing in transfer formula below.
		t_hyp := hypo_temperature_integral(A_surf, t_epi, t_bot, z_outflow-epi.th, z_outflow, theta)/water,
		water_temp_to_heat(water, t_hyp)
	}
	
	flux(epi.water.heat, hyp.water.heat, [J, day-1], "Layer heat transfer") {
		V := water + hyp.water,
		lake_t := water_heat_to_temp(V, heat + hyp.water.heat), # Mean lake temperature.
		hypo_temp := hypo_temperature_integral(A_surf, temp, t_bot, z_outflow-epi.th, z_outflow, theta),
		T_e_should_be := (lake_t*V - hypo_temp)/water,
		epi_heat_should_be := water_temp_to_heat(water, T_e_should_be),
		5[day-1]*(heat - epi_heat_should_be)   # The 5 is pretty arbitrary. Just to get a quick equilibration
	}
	
	var(epi.water.temp, [deg_c], "Epilimnion temperature") {
		water_heat_to_temp(water, water.heat)
	} @initial { t_epi }
	
	var(hyp.water.temp, [deg_c], "Hypolimnion temperature (mean)") {
		water_heat_to_temp(water, water.heat)
	}
	
	ind : property("Mixing indicator")
	var(epi.ind, [], "Mixing indicator") {
		abs(water.temp - hyp.water.temp) < 0.4[deg_c]
	}
	
	# NOTE: This moves an equal body of water up and down, which does not impact the water volume, but does mix dissolved substances.
	# The no_carry for heat is because we can't let the mixing flux carry heat, since the heat transfer is computed in a different way.
	# The magnitude of the rate is pretty arbitrary as long as it is big enough to "quickly" mix the entire lake.
	mix_down :
	flux(epi.water, hyp.water, [m 3, day-1], "Mixing") {
		A_surf * epi.th * epi.ind * 0.1[day-1]
	} @mixing @no_carry { heat }

}