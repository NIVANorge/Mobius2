
module("SimplyP", version(0, 5, 0)) {
"""
SimplyP is a parsimonious phosphorus model. It was originally implemented in Python and published as

[Jackson-Blake LA, Sample JE, Wade AJ, Helliwell RC, Skeffington RA. 2017. Are our dynamic water quality models too complex? A comparison of a new parsimonious phosphorus model, SimplyP, and INCA-P. Water Resources Research, 53, 5382â€“5399. doi:10.1002/2016WR020132](https://doi.org/10.1002/2016WR020132)

For news, updates and references, see [the model's github home page](https://github.com/NIVANorge/Mobius/tree/master/Applications/SimplyP)

New to version 0.5:
The model has been ported to Mobius2. Everything is solved as one large coupled ODE system.

New to version 0.4:
Landscape units are dynamic and user-specified instead of hardcoded.
Sediment and hydrology equations are factored out into separate modules (SimplyQ, SimplySed)

New to version 0.3:
More realistic hydrology.

[Detailed development log](https://github.com/NIVANorge/Mobius/blob/master/Applications/SimplyP/SimplyP_development_log.txt)

For reference, here is [the original Python implementation of SimplyP](https://github.com/LeahJB/SimplyP), which is no longer being developed.
"""	
	
	load("stdlib/basic_math.txt", library("Basic"))
	
	soil  : compartment("Soil")
	gw    : compartment("Groundwater")
	river : compartment("River")
	
	water : quantity("Water")
	tdp   : quantity("Total dissolved phosphorous")
	plab  : quantity("Labile phosphorous")
	pp    : quantity("Particulate phosphorous")
	
	flow  : property("Flow")
	
	par_group("P general") {
		dyn_epc0  : par_bool("Dynamic EPC0, TDP and soil labile P", true)
		m_soil_m2 : par_real("Soil mass per m2", [k g, m-2], 95, 0, 200)
		kf        : par_real("Phosphorous sorption coefficient", [l, m g-1], 1.13e-4, 0, 0.1)
		pp_enrich : par_real("Particulate P enrichment factor", [], 1.6, 1, 5)
	}
	
	par_group("Soil P", soil) {
		init_epc0            : par_real("Initial soil TDP concentration and EPC0", [m g, l-1], 0.1, 0, 10)
		init_soil_p_conc     : par_real("Initial total soil P content", [m g, k g-1], 1458, 0, 10000)
		inactive_soil_p_conc : par_real("Inactive soil P content", [m g, k g-1], 873, 0, 10000)
		p_input              : par_real("Net annual P input to soil", [k g, ha-1, year-1], 0, -100, 100)
	}
	
	par_group("Groundwater P", gw) {
		gw_tdp : par_real("Groundwater TDP concentration", [m g, l-1], 0, 0, 10)
	}
	
	par_group("River P", river) {
		eff_tdp   : par_real("Effluent TDP inputs", [k g, day-1], 0, 0, 10)
	}
	
	#NOTE: This creates a reference to a parameter defined in the model.
	a_catch : par_real("Catchment area", [k m 2])
	
	epc0 : property("EPC0")
	
	var(soil.epc0, [m g, l-1]) {
		m_soil := m_soil_m2->[k g, k m-2],
		
		safe_divide(last(plab), kf * m_soil)  if dyn_epc0,
		init_epc0                             otherwise
	} @initial { init_epc0 }
	
	var(soil.water.tdp, [k g, k m-2], [m g, l-1], "Soil TDP mass") @override {
		{
			days   := time.step_length_in_seconds->[day],
			pin    := p_input * days / time.days_this_year ->[k g, k m-2],
			m_soil := m_soil_m2->[k g, k m-2],
			a      := (pin + kf*m_soil*epc0),
			bV     := (kf*m_soil + last(water.flow)*days),
			b      := bV / last(water),
			a/b + (last(water.tdp) - a/b)*exp(-b)
		}                     if dyn_epc0,
		init_epc0 * water->>  otherwise
	} @initial_conc {
		init_epc0
	}
	
	var(soil.plab, [k g, k m-2], "Soil labile P mass") @override {
		{
			days   := time.step_length_in_seconds->[day],
			pin    := p_input * days / time.days_this_year ->[k g, k m-2],
			m_soil := m_soil_m2->[k g, k m-2],
			a      := (pin + kf*m_soil*epc0),
			bV     := (kf*m_soil + last(water.flow)*days),
			b      := bV / last(water),
			sorp   := (kf*m_soil)*( (1/bV)*(a + (last(water.tdp) - a/b)*(1 - exp(-b))) - epc0),
			last(plab) + sorp
		}           if dyn_epc0,
		last(plab)  otherwise
	} @initial {
		(init_soil_p_conc - inactive_soil_p_conc) * m_soil_m2
	}
	
	#NOTE: could also just have pp "dissolved in" ss, but would then need the soil to have a SS value (that is overridden to be constant), which could be confusing to model users?
	
	plabconc : property("Labile P concentration")
	#NOTE: could use the inbuilt concentration system for this, but we don't model varying soil mass, so it is a bit superfluous
	var(soil.plab.plabconc, [m g, k g-1]) {  plab / m_soil_m2  }
	
	var(gw.water.tdp, [k g, k m-2], [m g, l-1], "Groundwater TDP") @initial_conc { gw_tdp } @override_conc { gw_tdp }
	
	var(river.water.tdp, [k g], [m g, l-1], "River TDP") @initial_conc { gw_tdp }
	
	flux(nowhere, river.water.tdp, [k g, day-1], "River effluent TDP") { eff_tdp }
	
	var(river.water.pp, [k g], [m g, l-1], "River PP") 
	
	e_fact : property("Erosion factor")
	pp_fact : property("PP mobilization factor")

	var(soil.plab.pp_fact, [k g, k m-2, day-1]) {
		(plabconc + inactive_soil_p_conc) * e_fact * pp_enrich ->>
	}
	
	flux(nowhere, river.water.pp, [k g, day-1], "PP mobilization") {
		a_catch * river.e_fact * aggregate(soil.plab.pp_fact)
	}
	
	tp : property("Total phosphorous")
	
	var(river.water.tp, [m g, l-1]) {
		conc(tdp) + conc(pp)
	}
}


