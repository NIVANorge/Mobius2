
module("SimplySed", version(0, 6, 0),
	soil    : compartment,
	river   : compartment,
	water   : quantity,
	sed     : quantity,
	e_fact  : property,
	a_catch : par_real
) {
"""
This is a simple sediment transport module created as a part of SimplyP.

Erosion is computed as a product of a land erosion factor and a river erosion factor.

The land erosion factor depends on the land slope and the vegetation cover factor. The vegetation cover factor can either be be flat, or can have peaks in spring and autumn (with a user-determined proportion of the size of these peaks), representing plowing.

The erosion factor in the river follows a $$(aQ)^b$$ - type relationship, where Q is the total runoff from the catchment to the river.

version 0.6:
* First Mobius2 version.
* Dynamic vegetation cover is computed a bit differently.

New to version 0.5.1:
* Updated parameter doc strings

New to version 0.5:
* Replaced Q - SS input relationship aQ^b with (aQ)^b. Reduces strong correlation/covariance of a and b params.
* Moved reach slope to be a reach parameter.
* Remove need for “Arable” land class.
* Can have dynamic erodibility for all land classes and % spring-sown crops.

Authors: Leah A. Jackson-Blake, Magnus D. Norling
"""

	load("stdlib/basic_math.txt", library("Response"))

	par_group("Soil erodibility", soil) {
		c_cov      : par_real("Vegetation cover factor", [], 0.2, 0, 1, "Vegetation cover factor, describing ratio between long-term erosion under the land use class, compared to under bare soil of the same soil type, slope, etc. Source from (R)USLE literature and area-weight as necessary to obtain a single value for the land class.")
		doy_spring : par_int ("Day of year when soil erodibility is max for spring-grown crops", [day], 60,  30, 335)
		doy_autumn : par_int ("Day of year when soil erodibility is max for autumn-grown crops", [day], 304, 30, 335)
		p_spring   : par_real("Proportion of spring-grown crops", [], 0.65, 0, 1)
		loadred    : par_real("Reduction of load in sediment", [], 0, 0, 1)
		shp        : par_enum("Cover factor shape", flat) { flat step triangular smooth }
	}
	
	par_group("Land slope", soil) {
		land_slope : par_real("Mean slope of land", [deg], 4, 0, 90)
	}
	
	par_group("River erosion", river) {
		ksed  : par_real("Erosion scaling factor", [day, m m-1], 15, 0, 100)
		psed  : par_real("Erosion power factor", [], 2, 0.1, 5)
	}
	
	loadred_var : property("Variable reduction of load in sediments")
	
	var(soil.loadred_var, []) #input series.
	
	c_cover : property("Time dependent vegetation cover factor")
	
	var(river.water.sed, [k g], [m g, l-1], "Suspended sediments")

	cover_shape : function(doy, doy_max, len, c_cov, shp_step, shp_tri, shp_smooth) {
		step_response (doy, doy_max - len/2, doy_max + len/2, c_cov, 1, c_cov)           if shp_step,
		wedge_response(doy, doy_max - len/2, doy_max, doy_max + len/2, c_cov, 1, c_cov)  if shp_tri,
		bump_response (doy, doy_max - len/2, doy_max, doy_max + len/2, c_cov, 1, c_cov)  if shp_smooth,
		c_cov                                                                            otherwise
	}

	var(soil.c_cover, []) {
		E_risk_period := 60.0[day],
		spring := cover_shape(time.day_of_year, doy_spring, E_risk_period, c_cov, shp.step, shp.triangular, shp.smooth),
		autumn := cover_shape(time.day_of_year, doy_autumn, E_risk_period, c_cov, shp.step, shp.triangular, shp.smooth),
		spring*p_spring + autumn*(1 - p_spring)
	}
	
	var(soil.e_fact, [k g, k m-2, day-1], "Erosion factor land")          {   land_slope * c_cover * (1 - loadred) * (1 - loadred_var) =>>  }
	
	var(river.e_fact, [], "Erosion factor river")                         {   ((ksed * in_flux(water)/a_catch)->[])^psed  }

	flux(out, river.water.sed, [k g, day-1], "Sediment mobilization") {   a_catch * aggregate(soil.e_fact) * river.e_fact }
}


