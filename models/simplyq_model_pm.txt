

# NOTE: This file is outdated. It is no longer necessary when we have this as a model option in simplyq_model.

model("SimplyQ with Penman-Monteith") {

	sc       : index_set("Subcatchment")
	lu       : index_set("Landscape units")
	
	air      : compartment("Atmosphere")
	snow_box : compartment("Snow layer",  sc)
	soil     : compartment("Soil",        sc, lu)
	gw       : compartment("Groundwater", sc)
	river    : compartment("River",       sc)
	
	snow     : quantity("Snow")
	water    : quantity("Water")
	
	temp     : property("Temperature")
	precip   : property("Precipitation")
	flow     : property("Flow")
	pet      : property("Potential evapotranspiration")
	
	pressure : property("Pressure")
	lwd      : property("Downwelling longwave radiation")
	g_rad    : property("Global radiation")
	wind     : property("Wind speed")
	s_vap    : property("Saturation vapor pressure")
	a_vap    : property("Actual vapor pressure")
	cos_z    : property("Cosine of the solar zenith angle")
	dens     : property("Density")
	a_hum    : property("Actual specific humidity")
	
	par_group("Land cover", soil) {
		lu_prop  : par_real("Land use proportions", [], 1, 0, 1)
	}
	
	assert("Land use proportions must sum to 1 in each subcatchment", river.water) {
		abs(aggregate(lu_prop) - 1) < 1e-8
	}
	
	par_group("Catchment data", river) {
		a_catch  : par_real("Catchment area", [k m 2], 51.7, 1e-6, 7e6)
	}
	
	downstream : connection("Downstream")  @directed_graph { 
		river+ out
	} @no_cycles
	
	load("modules/simplysoiltemp.txt",
		module("Simply soil temperature", air, soil, snow_box, snow, temp))
	
	load("modules/atmospheric.txt",
		module("Atmospheric", air, temp, wind, g_rad, pressure, a_hum, dens, lwd, cos_z, a_vap, s_vap))
	
	load("modules/pet.txt",
		module("Penman-Monteith PET daily", air, soil, snow_box, snow, temp, pet, pressure, lwd, g_rad, wind, s_vap, a_vap))
	
	load("modules/hbv_snow.txt",
		module("HBVSnow", air, snow_box, snow, water, temp, precip, loc(soil.water)))
	
	load("modules/simplyq.txt",
		module("SimplyQ land", soil, gw, river, water, flow, pet, a_catch, loc(river.water), loc(river.water)),
		#module("SimplyQ river", river, water, flow, loc(downstream))
		module("SimplyQ river trapezoid", river, water, flow, loc(downstream))
	)	
	
	aggregation_weight(soil, gw)    { lu_prop }
	aggregation_weight(soil, river) { lu_prop }
	
	# Convert mm to m^3. The framework figures out how to use a_catch to do that.
	unit_conversion(soil.water, river.water) { a_catch }
	unit_conversion(gw.water, river.water)   { a_catch }
	
		
	###### Set ODE solvers
	
	sol : solver("Simply solver", inca_dascru, [2, hr], 1e-2)
	
	solve(sol, soil.water, gw.water, river.water, air.cos_z)
}


