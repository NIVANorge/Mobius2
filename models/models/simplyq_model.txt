
model("SimplyQ") {
"""
General model description.
"""
	
	###### Import modules
	
	#add_directory("../modules") #TODO: implement
	
	load("../modules/pet.txt",       pe : module("Degree-day PET"))
	load("../modules/hbv_snow.txt",  sn : module("HBVSnow"))
	load("../modules/simplyq.txt",   sw : module("SimplyQ land"), rw : module("SimplyQ river"))
	
	
	soil  : compartment("Soil")
	gw    : compartment("Groundwater")
	river : compartment("River")
	water : quantity("Water")
	
	#soil : identify(sw.soil, pe.soil, sn.soil)
	
	###### Distribute modules over index sets and set solvers
	
	sc : index_set("Subcatchment")
	lu : index_set("Landscape units")
	
	soil.distribute(sc, lu)
	gw.distribute(sc)
	river.distribute(sc)
	
	simply_solver : solver("Simply solver", "INCADascru", 0.1)
	
	simply_solver.solve(soil.water)
	simply_solver.solve(gw.water)
	simply_solver.solve(river.water)

	##### Link fluxes between compartments and specify aggregation between compartments that are distributed differently, and unit conversions where volumes are different

	sn.p_rain     .to(soil.water)
	sn.melt_runoff.to(soil.water)
	sw.quick_flow .to(river.water)
	sw.soil_runoff.to(river.water)
	sw.gw_runoff  .to(river.water)
	
	#downstream : connection("Downstream", directed_tree) { river }
	#rw.reach_out  .to(downstream)
	
	soil.par_group("Land cover") {         #TODO: Should maybe have syntax to enforce a dependecy of this on landscape units (?)
		lu_prop  : par_real("Land use proportions", unit(), 1, 0, 1)
	}
	
	#TODO: it would be nice if we could declare lu_prop.sums_to(lu, 1).  #This would allow for run-time checks and also sometimes compile-time optimizations.
	
	river.par_group("Catchment data") {
		a_catch  : par_real("Catchment area", unit(k m 2), 51.7)
	}
	
	aggregation_weight(soil, gw) { lu_prop }
	aggregation_weight(soil, river) { lu_prop }
	
	# convert mm to m^3
	unit_conversion(soil.water, river.water) { a_catch * 1000 }   #TODO: when we get automatic unit checking we should remove the 1000 !
	unit_conversion(gw.water, river.water)   { a_catch * 1000 }
	
}


