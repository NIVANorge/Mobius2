

#TODO: maybe make an intrinsic operator for safe_divide. Like "//".  Could also have an operator for enforced floating point division to avoid accidental integer divisions? "/."

library("Basic") {

	safe_divide : function(a, b) {
		r := a/b
		r if is_finite(r),
		0 otherwise
	}
}


library("Response") {
	
	lerp            : function(x, x0, x1, y0, y1) {
		t := (x - x0) / (x1 - x0)
		(1 - t)*y0 + t*y1
	}
	
	s_curve         : function(x, x0, x1, y0, y1) {
		t  := (x - x0) / (x1 - x0)
		tt := (3 - 2*t)*t^2
		(1 - tt)*y0 + tt*y1
	}
	
	linear_response : function(x, x0, x1, y0, y1) {
		y0                      if x <= x0,
		y1                      if x >= x1,
		lerp(x, x0, x1, y0, y1) otherwise
	}
	
	s_response      : function(x, x0, x1, y0, y1) {
		y0                         if x <= x0,
		y1                         if x >= x1,
		s_curve(x, x0, x1, y0, y1) otherwise
	}
	
	wedge_response  : function(x, x0, x1, x2, y0, y1, y2) {
		y0                      if x <= x0,
		y2                      if x >= x2,
		lerp(x, x0, x1, y0, y1) if x <= x1,
		lerp(x, x1, x2, y1, y2) otherwise
	}
	
	bump_response   : function(x, x0, x1, x2, y0, y1, y2) {
		y0                         if x <= x0,
		y2                         if x >= x2,
		s_curve(x, x0, x1, y0, y1) if x <= x1,
		s_curve(x, x1, x2, y1, y2) otherwise
	}
	
}

library("Rates") {
	
	hl_to_rate : function(hl)   {   ln(2) / hl   }
	
	rate_to_hl : function(rate) {   ln(2) / rate   }
	
}