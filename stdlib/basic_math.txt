

library("Basic") {
"""
This library provides some very common math functions.
"""

	safe_divide : function(a, b) {
		r := a/b,
		r if is_finite(r),
		0 otherwise
	}
	
	close : function(a, b, tol) {
		abs(a - b) < tol
	}
	
	clamp : function(a, mn, mx) {
		min(max(a, mn), mx)
	}
	
	radians : function(a : [deg]) {
		a * pi / 180[deg]
	}
}


library("Response") {
"""
This library provides functions that let some state respond to another state. For instance,

`q10_adjust` creates a [Q10](https://en.wikipedia.org/wiki/Q10_(temperature_coefficient)) response of a reference rate to a temperature.

The various response functions allow you to interpolate a value $$y$$ between different levels $$y_0$$, $$y_1$$, ..., depending on an input variable $$x$$ and thresholds $$x_0$$, $$x_1$$, etc.

![responses](../../img/response_functions.png)
"""
	
	hl_to_rate : function(hl)   {   ln(2) / hl   }
	
	rate_to_hl : function(rate) {   ln(2) / rate   }
	
	q10_adjust : function(ref_rate, ref_temp : [deg_c], temp : [deg_c], q10 : []) {
		ref_rate*q10^((temp - ref_temp)/10[deg_c])
	}
	
	lerp            : function(x, x0, x1, y0, y1) {
		t := (x - x0) / (x1 - x0),
		(1 - t)*y0 + t*y1
	}
	
	s_curve         : function(x, x0, x1, y0, y1) {
		t  := (x - x0) / (x1 - x0),
		tt := (3 - 2*t)*t^2,
		(1 - tt)*y0 + tt*y1
	}
	
	tanh_curve     : function(x, th) {
		0.5*(1 + tanh(x - th))
	}
	
	linear_response : function(x, x0, x1, y0, y1) {
		y0                      if x <= x0,
		y1                      if x >= x1,
		lerp(x, x0, x1, y0, y1) otherwise
	}
	
	s_response      : function(x, x0, x1, y0, y1) {
		y0                         if x <= x0,
		y1                         if x >= x1,
		s_curve(x, x0, x1, y0, y1) otherwise
	}
	
	step_response   : function(x, x0, x1, y0, y1, y2) {
		y0                      if x <= x0,
		y1                      if x <= x1,
		y2                      otherwise
	}
	
	wedge_response  : function(x, x0, x1, x2, y0, y1, y2) {
		y0                      if x <= x0,
		y2                      if x >= x2,
		lerp(x, x0, x1, y0, y1) if x <= x1,
		lerp(x, x1, x2, y1, y2) otherwise
	}
	
	bump_response   : function(x, x0, x1, x2, y0, y1, y2) {
		y0                         if x <= x0,
		y2                         if x >= x2,
		s_curve(x, x0, x1, y0, y1) if x <= x1,
		s_curve(x, x1, x2, y1, y2) otherwise
	}	
}
