

library("Basic constants") {
	grav : constant("Earth surface gravity", [m, s-2], 9.81)
}


library("Thermodynamics") {
	
	ideal_gas        : constant("Ideal gas constant",        [J, K -1, mol -1], 8.31446261815324)
	boltzmann        : constant("Boltzmann constant",        [J, K -1],         1.380649e-23)
	stefan_boltzmann : constant("Stefan-Boltzmann constant", [W, m -2, K -4],   5.670373e-8)
	
	black_body_radiation : function(T_kelvin) {   stefan_boltzmann * T_kelvin^4   }
	
	enthalpy_adjust_log10 : function(log10ref : [], ref_T : [K], T : [K], dU : [k J, mol-1]) {
		du := dU->[J, mol-1],
		log10ref - (du/(ideal_gas*ln(10))) * (1/T - 1/ref_T)
	}
	
}

library("Water utils") {

	#load(library("Thermodynamics"))
	#load("basic_math.txt", library("Response"))
	
	rho_water  : constant("Water density",                   [k g, m-3],     999.98)
	C_water    : constant("Specific heat capacity of water", [J, k g-1, K-1], 4186)
	k_water    : constant("Thermal conductivity of water",   [W, m-1, K-1], 0.6)
	
	water_temp_to_heat : function(V : [m 3], T : [deg_c]) {  # We don't want to use dynamic water density here because of the use case.
		V*(T->[K])*rho_water*C_water
	}
	
	water_heat_to_temp : function(V : [m 3], heat : [J]) {       # We don't want to use dynamic water density here because of the use case.
		heat / (V*rho_water*C_water) -> [deg_c]
	}
	
	# This is a very simplified density function. For one that also depends on salinity see the SeaWater module.
	water_density : function(T : [deg_c]) {
		dtemp := (T->[K] - 277.13[K]),  # Difference between temp and reference temp.
		rho_water*(1 - 0.5*1.6509e-5[K-2]*dtemp^2)
	}
}

library("Chemistry") {

	#avogadro         : constant("Avogadro constant", [mol -1], 6.02214076e23)
	
	
	o2_mol_mass  : constant("O₂ molar mass",    [g, mol-1], 31.998)
	c_mol_mass   : constant("C molar mass",     [g, mol-1], 12)
	n_mol_mass   : constant("N molar mass",     [g, mol-1], 14.01)
	p_mol_mass   : constant("P molar mass",     [g, mol-1], 30.97)
	no3_mol_mass : constant("NO₃ molar mass",   [g, mol-1], 62)
	po4_mol_mass : constant("PO₄ molar mass",   [g, mol-1], 94.9714)
	
	ca_mol_mass  : constant("Ca molar mass", [g, mol-1], 40.078)
	#ca_valency   : constant("Ca valency", [eq, mol-1], 2)
	

	#mass_to_eq : function(mass, mol_mass, valency) {
	#	mass * valency / mol_mass
	#}
}