

library("Thermodynamics") {
	
	ideal_gas        : constant("Ideal gas constant",        [J, K -1, mol -1], 8.31446261815324)
	boltzmann        : constant("Boltzmann constant",        [J, K -1],         1.380649e-23)
	stefan_boltzmann : constant("Stefan-Boltzmann constant", [W, m -2, K -4],   5.670373e-8)
	
	black_body_radiation : function(T_kelvin) {   stefan_boltzmann * T_kelvin^4   }
	
	enthalpy_adjust_log10 : function(log10ref : [], ref_T : [K], T : [K], dU : [k J, mol-1]) {
		du := dU->[J, mol-1]
		log10ref - (du/(ideal_gas*ln(10))) * (1/T - 1/ref_T)
	}
	
}

library("Water utils") {

	load(library("Thermodynamics"))
	load("basic_math.txt", library("Response"))
	
	rho_water  : constant("Water density",                   [k g, m-3],     999.98)
	C_water    : constant("Specific heat capacity of water", [J, k g-1, K-1], 4186)
	
	water_temp_to_heat : function(V : [m 3], T : [deg_c]) {  # We don't want to use dynamic water density here because of the use case.
		V*(T->[K])*rho_water*C_water
	}
	
	water_heat_to_temp : function(V : [m 3], heat : [J]) {       # We don't want to use dynamic water density here because of the use case.
		heat / (V*rho_water*C_water) -> [deg_c]
	}
	
	water_density : function(T : [deg_c]) {
		dtemp := (T->[K] - 277.13[K])=>[]  # Difference between temp and reference temp.
		rho_water*(1 - 0.5*1.6509e-5*dtemp^2)
	}
	
	#TODO: Fix the units of this one!
	dynamic_viscosity_water : function(T_celsius, salinity) {
		# Formula from J.P. Riley, Chemical Oceanography, vol 4, 2nd edition. AP. 1975
		# Returns viscosity in centipose (1000 Pa*s)
		# It is also possible to add pressure corrections. Pressure is here assumed to be at 1atm.
		eta20 := 1.0020               # Dynamic viscosity at t=20, s=0
		tm20  := 20-T_celsius
		lograt := (1.1709*tm20 - 0.001827*tm20^2) / (T_celsius + 89.93)
		eta_t := eta20*10^lograt      #Dynamic viscosity of distilled water, corrected for temperature
		a := lerp(T_celsius, 5, 25, 0.000366, 0.001403)
		b := lerp(T_celsius, 5, 25, 0.002756, 0.003416)
		cl := max(0, (salinity-0.03)/1.805)
		clv := water_density(T_celsius) * cl    # Volume chlorinity
		eta_t * (1 + a*sqrt(clv) + b*clv)
	}
	
	diffusivity_in_water : function(ref_diff, ref_T, ref_S, T_celsius, salinity) {
		# Diffusivity of some substance in water.
		# 	ref_diff  - the diffusivity of the substance in water at temperature ref_T and salinity ref_S.
		
		ref_diff * (dynamic_viscosity_water(ref_T, ref_S) / dynamic_viscosity_water(T_celsius, salinity)) * (deg_c_to_K(T_celsius) / deg_c_to_K(ref_T))
	}
}

library("Chemistry") {

	avogadro         : constant("Avogadro constant", [mol -1], 6.02214076e23)
	
}

library("Ions") {
	
	ca_mol_wt        : constant("Ca molecular weight", [g, mol-1], 40.078)
	ca_valency       : constant("Ca valency", [eq, mol-1], 2)
	
	# etc.
	
	
	mass_to_eq : function(mass, mol_wt, valency) {
		mass * valency / mol_wt
	}
}