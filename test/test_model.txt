
model("Test model") {
"""
General model description.
"""
	
	###### Import modules
	
	#add_directory("../../Modules")
	
	
	load("hbv_snow.txt",  sn : module("HBVSnow"))
	load("test_soil.txt", sw : module("Test soil water"))
	load("test_soil.txt", rw : module("Test river water"))
	load("test_soil.txt", pe : module("Degree-day PET"))
	
	soil : compartment("Soil")
	gw   : compartment("Groundwater")
	river : compartment("River")
	water : quantity("Water")
	
	###### Distribute modules over index sets and set solvers
	
	lu : index_set("Landscape units")
	#sc : index_set("Subcatchment")
	soil.distribute(lu) #(sc, lu)
	#gw.distribute(sc)
	#river.distribute(sc)
	
	simply_solver : solver("Simply solver", "INCADascru", 0.1)
	
	soil.water.solve(simply_solver)
	gw.water.solve(simply_solver)
	river.water.solve(simply_solver)
	
	##### Link fluxes between compartments and specify aggregation between compartments that are distributed differently, and unit conversions where volumes are different

	sn.p_rain     .to(soil.water)
	sn.melt_runoff.to(soil.water)
	sw.quick_flow .to(river.water)
	sw.soil_runoff.to(river.water)
	sw.gw_runoff  .to(river.water)
	
	soil.par_group("Land cover") {
		lu_prop  : par_real("Land use proportions", unit(), 1, 0, 1)
	}
	river.par_group("Catchment data") {
		a_catch  : par_real("Catchment area", unit(km 2), 51.7)
	}
	
	aggregation_weight(soil, gw) { lu_prop }
	aggregation_weight(soil, river) { lu_prop }
	
	# convert mm to m^3
	unit_conversion(soil.water, river.water) { a_catch * 1000 }   #TODO: when we get automatic unit checking we should remove the 1000 !
	unit_conversion(gw.water, river.water) { a_catch * 1000 }
}