

model("Diffusion") {
	
	module("Diffusion", 1, 0, 0) {
		
		topcomp : compartment("Top")
		layer   : compartment("Layer")
		
		o2    : quantity("O²")
		
		layer.par_group("Layers") {
			in_o2   : par_real("initial O²", [m g, c m-2], 0)
			dc      : par_real("Diffusion coeff", [c m, day-1], 0.001)
		}
		
		layer.has(o2, [m g, c m-2]) .initial { in_o2 }
		topcomp.has(o2, [m g, c m-2]) .initial { 100=>> }
		
		c : connection("Layer connection", grid1d) { layer* }
		
		z : constant("Layer thickness", [c m], 1)
		
		flux(layer.o2, c, [m g, c m-2, day-1], "Diffusion") {
			d := 0.5*(dc + below(dc))
			d*(o2 - below(o2))/z ->>
		}
		
		#flux(topcomp.o2, layer.o2, c, "Input") .top {
		#	top(dc)*(o2 - top(layer.o2))/z ->>
		#}
		
		#flux(layer.o2, topcomp.o2, c, [m g, c m-2, day-1], "Input") .bottom {
		#	bottom(dc)*(bottom(o2)-topcomp.o2)/z ->>
		#}
		flux(layer.o2[c.bottom], topcomp.o2, [m g, c m-2, day-1], "Input") {
			bottom(dc)*(bottom(o2)-topcomp.o2)/z ->>
		}
		
		#flux(nowhere, layer.o2, c, "Input") .top {
		#	0.01[m g, c m-2, day-1]
		#}
		
		#flux(layer.o2, nowhere, c, "Bottom input") .bottom {
		#	-0.01[m g, c m-2, day-1]
		#}
	}
	
	# sc : module("Simple source", 1, 0, 0) {
		
		# air : compartment("Atmosphere")
		# soil : compartment("Soil")
		# air.has(precip : property("Precipitation"), [m m, day-1])
		
		# o2    : quantity("O²")
		# soil.has(o2, [m g])
		# flux(nowhere, soil.o2, "O² influx") {
			# air.precip =>>    # This makes no sense, but whatever
		# }
		
		# o2out :
		# flux(soil.o2, out, "O² outflux") {
			# 0.2 * max(0, o2 - 20[m g]) *1[day-1]
		# }
	# }
	
	layer_index : index_set("Layer index")
	
	layer : compartment("Layer")
	topcomp : compartment("Top")
	#soil  : compartment("Soil")
	o2    : quantity("O²")
	
	#c : connection("Soil to lake", directed_tree) { (soil|layer)* } # TODO: not correct, but no full regex support yet.
	#sc.o2out.to(c)
	
	layer.distribute(layer_index)
	sol : solver("Solver", "INCADascru", 0.1)
	sol.solve(layer.o2)
	sol.solve(topcomp.o2)
	#sol.solve(soil.o2)
}