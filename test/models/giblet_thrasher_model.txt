
model("Giblet-Thrasher test model") {
	
	md : module("Giblet-Thrasher", 1, 1, 0) {
		
		habitat : compartment("Habitat")
		world   : compartment("World")
		
		load("../../stdlib/basic_math.txt", library("Response"))
		
		#TODO: should it be possible to specify a par_group to be global without creating a separate compartment for it?
		world  .par_group("General parameters") {
			birth_time : par_int ("Giblet preferred birthday", unit(), 120, 30, 335)
			pmig       : par_real("Giblet propensity to migrate", unit(), 0.05, 0, 1)
			nomnom     : par_real("Predation rate", unit(), 0.1)
			pred_birth : par_real("Thrasher birth rate", unit(), 0.025)
			pred_death : par_real("Thrasher death rate", unit(), 0.05)
			meteor_dth : par_real("Meteor strike death rate increase", unit(), 0.7)
		}
		
		habitat.par_group("Habitat parameters") {
			init_pred  : par_real("Initial predators", unit(), 1)
			init_prey  : par_real("Initial prey", unit(), 1)
			prey_birth : par_real("Giblet birth rate", unit(), 0.2)
		}
		habitat.has(pred : quantity("Thrashers"), unit()) .initial { init_pred }
		habitat.has(prey : quantity("Giblets"), unit())   .initial { init_prey }
		
		habitat.has(meteor : property("Meteor strikes"), unit())
		
		flux(nowhere, habitat.prey, "Giblet birth")     {  prey * prey_birth * bump_response(time.day_of_year, birth_time- 60.0, birth_time, birth_time+60.0, 0.6, 1, 0.6) }
		
		flux(habitat.prey, nowhere, "Predation")        {  nomnom * prey * pred  }
		
		flux(nowhere, habitat.pred, "Thrasher birth")   {  pred_birth * prey * pred  }
		
		flux(habitat.pred, nowhere, "Thrasher death")   {  pred * (pred_death + meteor_dth*meteor) }
		
		migration :
		flux(habitat.prey, out, "Giblet migration") {  prey * pred * pmig  }
		
		#
		# Need to implement the following:
		#
		# mig : neighbor("Migration route")
		#
		# Or is all of this on model scope? No, need a way to do it inside modules too to distinguish between fluxes in different directions (e.g. up/down)
		#
		# par_group ("Migration weights", matrix(mig)) {
		# 	mig_wt : par_real("Migration weights", mig, unit(), 0.1, 0, 1)
		# }
		#			# no need to explicitly index the matrix when used in this context...
		# flux(habitat.prey, mig) {  max(0, prey * mig_wt * (pred - to.pred) )
		#
		# model scope:
		#	mig : hi.neighbor("Migration route", all_to_all)
		#
	}
	
	habitat : compartment("Habitat")
	pred : quantity("Thrashers")
	prey : quantity("Giblets")
	
	sol : solver("LV-Solver", "INCADascru", 0.1)
	sol.solve(habitat.pred)
	sol.solve(habitat.prey)
	
	hi : index_set("Habitat index")
	habitat.distribute(hi)
	
	mig : hi.neighbor("Migration route", directed_tree)
	md.migration.to(mig)          # TODO: Need a way to specify boundary conditions for fluxes. What happens to this flux when there is no neighbors?
}


