

model("Another simple") {

	sp : module("So simple", 1, 0, 0) {
	
		a : compartment("A")
		b : compartment("B")
		q : quantity("Q")
		
		a.has(q, unit(), "QA") .initial { aq }
		b.has(q, unit(), "QB") .initial { bq }
		
		a.par_group("A Pars") {
			aq : par_real("initial a q", unit(), 0)
		}
		
		b.par_group("B Pars") {
			bq : par_real("initial b q", unit(), 0)
		}
		
		a_out : flux(a.q, out, "a out") { 0.002*q	}
		b_out : flux(b.q, out, "b out") { 0.001*q }
	}
	
	sol : solver("Solver", "INCADascru", 0.1)
	sol.solve(a.q)
	sol.solve(b.q)
	
	i : index_set("A index")
	j : index_set("B index")
	
	a : compartment("A")
	b : compartment("B")
	q : quantity("Q")
	
	a.distribute(i)
	b.distribute(j)
	
	n : connection("graph", directed_tree) { (b|a)* }
	
	sp.a_out.to(n)
	sp.b_out.to(n)
}