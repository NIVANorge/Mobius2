

module("SimplyC", 1, 0, 0) {
"""
Not finished, just for testing some systems.
"""

	load("../../stdlib/basic_math.txt", library("Rates"))

	soil  : compartment("Soil")
	gw    : compartment("Groundwater")
	river : compartment("River")

	water : quantity("Water")
	oc    : quantity("Organic carbon")
	
	soil.par_group("DOC general") {
		cdoc       : par_real("Baseline soil DOC dissolution rate", unit(m g, l-1, day-1), 1, 0, 10)
		kt1        : par_real("Soil temperature DOC creation linear coefficient", unit(deg_c -1), 0, 0, 0.1)
	}
	
	soil.par_group("DOC land") {
		basedoc    : par_real("Baseline soil DOC concentration", unit(m g, l-1), 10, 0, 100)
	}
	
	gw.par_group("DOC deep soil") {
		#gwdoc_type : par_enum("Groundwater DOC computation type", soil_avg) { soil_avg half_life const }   # also need override_conc
		gwdochl    : par_real("Groundwater DOC half-life", unit(day -1), 80, 1, 500)
	}
	
	temp : property("Temperature")
	
	#TODO: allow specifying the conc unit
	#TODO: we have to do something about the name system for these.
	#TODO: make .initial_conc
	soil.water.has (oc, unit(k g, k m -2), "Soil water DOC") .initial { water * basedoc }
	gw.water.has   (oc, unit(k g, k m -2), "Deep soil DOC")  .initial { 0 } #TODO: see below. 
	river.water.has(oc, unit(k g), "River water DOC") .initial { 0 } #TODO: aggregate() does not work for initial values! # { water * aggregate(soil.water.oc) }
	
	flux(nowhere, soil.water.oc, "Soil DOC production") {  max(0, water*cdoc*(1 + kt1*temp))  }
	
	flux(soil.water.oc, nowhere, "Soil DOC mineralization+resorption") {
		rate := cdoc / basedoc
		soil.water.oc * rate                    #TODO: make context system allow us to say just 'oc' here
	}
	
	flux(gw.water.oc, nowhere, "Deep soil DOC mineralization") {
		rate := hl_to_rate(gwdochl)
		gw.water.oc * rate
	}
}