

module("Degree-day PET", 1, 0, 0) {
	air       : compartment("Atmosphere")
	soil      : compartment("Soil")

	soil.par_group("Potential evapotranspiration") {
		ddf_pet   : par_real("Deegree-day factor for evapotranspiration", unit(m m, deg_c -1, day -1), 0.12)
		pet_min_t : par_real("Minimal temperature for evapotranspiration", unit(deg_c), 0)
	}
	
	pet  : property("Potential evapotranspiration")
	temp : property("Temperature")
	
	soil.has(pet, unit(m m, day -1))                {   max(0, ddf_pet*(air.temp - pet_min_t))   }
}


module("Test soil water", 1, 0, 0) {
"""
Oversimplified soil water module inc.
"""
	load("../stdlib/basic_math.txt", library("Response"))    #TODO: we need a better way to address the stdlib so that we don't have to know the path.

	air      : compartment("Atmosphere")
	soil     : compartment("Soil")
	gw       : compartment("Groundwater")
	
	water : quantity("Water")
	
	soil.par_group("Hydrology land") {
		fc   : par_real("Field capacity", unit(m m), 120)
		bfi  : par_real("Baseflow index", unit(), 0.7)
		tc_s : par_real("Soil water time constant", unit(day -1), 2)

		f_quick : par_real("Proportion to quick flow", unit(), 0.01)
	}
		
	gw.  par_group("Groundwater") {
		tc_g    : par_real("Groundwater time constant", unit(day -1), 60)
	}
	
	soil.has(water, unit(m m), "Soil water volume") .initial { fc }
	gw  .has(water, unit(m m), "Groundwater volume") .initial { 0 }

	pet  : property("Potential evapotranspiration")
	
	flux(soil.water, out, "Quick flow")             {   f_quick * in_flux(water)   }
	
	flux(soil.water, nowhere, "Evapotranspiration") {   pet*(1 - 0.01^(water/fc))   }  # = pet*(1 - exp(ln(0.01)*water/fc)) #NOTE: these two are equivalent formulations due to optimizations.
	
	soil.has(flow : property("Flow"), unit(m m, day -1), "Soil water flow") {
		rate := (water - fc)/tc_s
		s_response(water, fc, 1.01*fc, 0, rate) # smoothly turn the rate on between water volumes of fc and 1.01*fc
	}
	
	soil_runoff :
	flux(soil.water, out, "Soil runoff")            {   soil.flow * (1 - bfi)   }
	
	flux(soil.water, gw.water, "Recharge")          {   soil.flow * bfi   }
	
	gw_runoff :
	flux(gw.water, out, "Groundwater runoff")       {   water / tc_g   }
}


module("Test river water", 0, 0, 1) {
"""
The doc string
"""

	river : compartment("River")
	
	water : quantity("Water")
	
	river.par_group("Reach parameters") {
		slope          : par_real("Reach slope", unit(), 0.01)
		len            : par_real("Reach length", unit(m), 1000)
		c_mann         : par_real("Manning's roughness coefficient", unit(), 0.04)
		init_flow      : par_real("Initial reach flow", unit(m 3, s-1), 0)
		
		a_catch : par_real("Catchment area", unit(k m 2), 1)
	}
	
	river.has(water, unit(m 3), "Reach water volume") .initial {
		depth := 0.349 * flow^0.34
		width := 2.72 * flow^0.557
		width * depth * len
	}
	
	river.has(flow : property("Flow"), unit(m 3, s -1)) {
		0.28 * (water * sqrt(slope) / (len * c_mann))^1.5
	} .initial {
		init_flow
	}
	
	#TODO!
	flux(river.water, nowhere, "Reach flow") {
		flow
	}
}