
// The signature is our_name, cstdlibname, returntype, argtype, argtype

MAKE_INTRINSIC2(min, min, unresolved, unresolved, unresolved)
MAKE_INTRINSIC2(max, max, unresolved, unresolved, unresolved)
MAKE_INTRINSIC2(copysign, copysign, real, real, real)
// TODO: Note the cstdlibname for the random ones doesn't matter, as that is handled manually
MAKE_INTRINSIC2(uniform_real, min, real, real, real)
MAKE_INTRINSIC2(normal, min, real, real, real)
MAKE_INTRINSIC2(uniform_int, min, integer, integer, integer)


// The signature is our_name, cstdlibname, llvmname, returntype, argtype

MAKE_INTRINSIC1(sqrt, sqrt, sqrt, real, real)
// Hmmm we may want to include the integer version of abs, but the current way we organize it doesn't allow for it.
MAKE_INTRINSIC1(abs, fabs, fabs, real, real)
MAKE_INTRINSIC1(exp, exp, exp, real, real)
MAKE_INTRINSIC1(pow2, exp2, exp2, real, real)
MAKE_INTRINSIC1(ln,  log, log, real, real)
MAKE_INTRINSIC1(log10, log10, log10, real, real)
MAKE_INTRINSIC1(log2, log2, log2, real, real)
MAKE_INTRINSIC1(cos, cos, cos, real, real)
MAKE_INTRINSIC1(sin, sin, sin, real, real)
MAKE_INTRINSIC1(floor, floor, floor, real, real)
MAKE_INTRINSIC1(ceil, ceil, ceil, real, real)
// TODO: maybe have all the other rounding functions also.
// Note fshr is just a stand-in since these don't exist as llvm intrinsics.. We instead replace it with function calls or our own code in llvm_jit.cpp (we are not going to use fshr for anything, so it is ok to have it as a stand-in)
MAKE_INTRINSIC1(is_finite, isfinite, fshr, boolean, real)
MAKE_INTRINSIC1(tan, tan, fshr, real, real)
MAKE_INTRINSIC1(acos, acos, fshr, real, real)
MAKE_INTRINSIC1(asin, asin, fshr, real, real)
MAKE_INTRINSIC1(atan, atan, fshr, real, real)
MAKE_INTRINSIC1(tanh, tanh, fshr, real, real)
MAKE_INTRINSIC1(sinh, sinh, fshr, real, real)
MAKE_INTRINSIC1(cosh, cosh, fshr, real, real)
MAKE_INTRINSIC1(cbrt, cbrt, fshr, real, real)
